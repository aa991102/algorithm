문제 설명


위와 같은 삼각형의 꼭대기에서 바닥까지 이어지는 경로 중, 거쳐간 숫자의 합이 가장 큰 경우를 찾아보려고 합니다. 

아래 칸으로 이동할 때는 대각선 방향으로 한 칸 오른쪽 또는 왼쪽으로만 이동 가능합니다. 

예를 들어 3에서는 그 아래칸의 8 또는 1로만 이동이 가능합니다.

​

삼각형의 정보가 담긴 배열 triangle이 매개변수로 주어질 때, 거쳐간 숫자의 최댓값을 return 하도록 solution 함수를 완성하세요.

​

제한사항

- 삼각형의 높이는 1 이상 500 이하입니다.

- 삼각형을 이루고 있는 숫자는 0 이상 9,999 이하의 정수입니다.

​

입출력 예

triangle

result

[[7], [3, 8], [8, 1, 0], [2, 7, 4, 4], [4, 5, 2, 6, 5]]

30





내 풀이

class Solution {
    public int solution(int[][] triangle) {
        int answer = 0;
        int[][] sums = new int[triangle.length][triangle.length+1];
        
        for(int i=0; i<triangle.length; i++){
            for(int j=0; j<triangle[i].length; j++){
                if(i==0 && j==0){
                    sums[0][0] = triangle[0][0];
                    continue;
                }
                
                int left = 0; // 왼쪽 위의 더할 값
                int right = 0; // 오른쪽 위의 더할 값
                
                if(j==0){
                    left = sums[i-1][j];
                }else {
                    if(j>0 && j<triangle[i].length-1){
                        right = sums[i-1][j];
                    }
                    left = sums[i-1][j-1];
                }
                // 왼쪽 위의 값과 오른쪽 위의 값 중 큰 것을 선택해 triangle[i][j]에 더하여 sum[i][j]에 저장
                sums[i][j] = triangle[i][j] + Math.max(left, right); 
            }
        }

        // sums배열의 맨 아래 값들 중에서 가장 큰 값을 찾는다.
        for(int j=0; j<triangle[triangle.length-1].length; j++){
            if(answer < sums[triangle.length-1][j]){
                answer = sums[triangle.length-1][j];
            }
        }
        
        return answer;
    }
}
0.04 ~ 13.86ms

​

​

다른사람풀이 < Stream >

코딩테스트 연습 / 동적계획법(Dynamic Programming) / 정수 삼각형 / 다른 사람의 풀이 / - , subinmun1997 , 강민구

import java.util.*;
class Solution {
    public int solution(int[][] triangle) {
        for (int i = 1; i < triangle.length; i++) {
            triangle[i][0] += triangle[i-1][0];
            triangle[i][i] += triangle[i-1][i-1];
            for (int j = 1; j < i; j++) 
                triangle[i][j] += Math.max(triangle[i-1][j-1], triangle[i-1][j]);
        }

        return Arrays.stream(triangle[triangle.length-1]).max().getAsInt();
    }
}
0.84 ~ 13.09ms

​

아닛 이렇게 깔끔한데 시간차도 안난다
