문제 설명

네트워크란 컴퓨터 상호 간에 정보를 교환할 수 있도록 연결된 형태를 의미합니다. 

예를 들어, 컴퓨터 A와 컴퓨터 B가 직접적으로 연결되어있고, 컴퓨터 B와 컴퓨터 C가 직접적으로 연결되어 있을 때 컴퓨터 A와 컴퓨터 C도 간접적으로 연결되어 정보를 교환할 수 있습니다. 따라서 컴퓨터 A, B, C는 모두 같은 네트워크 상에 있다고 할 수 있습니다.

​

컴퓨터의 개수 n, 연결에 대한 정보가 담긴 2차원 배열 computers가 매개변수로 주어질 때, 

네트워크의 개수를 return 하도록 solution 함수를 작성하시오.

​

제한사항

- 컴퓨터의 개수 n은 1 이상 200 이하인 자연수입니다.

- 각 컴퓨터는 0부터 n-1인 정수로 표현합니다.

- i번 컴퓨터와 j번 컴퓨터가 연결되어 있으면 computers[i][j]를 1로 표현합니다.

- computer[i][i]는 항상 1입니다.

​

입출력 예

n

computers

return

3

[[1, 1, 0], [1, 1, 0], [0, 0, 1]]

2

3

[[1, 1, 0], [1, 1, 1], [0, 1, 1]]

1

입출력 예 설명

예제 #1

아래와 같이 2개의 네트워크가 있습니다.

예제 #2

아래와 같이 1개의 네트워크가 있습니다.





내 풀이

class Solution {
    boolean[] checked;
    int answer;
    
    public int solution(int n, int[][] computers) {
        checked = new boolean[n];
        answer = n;
        
        for(int i=0; i<n; i++){
            for(int j=0; j<n; j++){
                if(i==j) continue;
                if(checked[i]) continue;
                
                if(computers[i][j] == 1){
                    checked[i] = true;
                    checked[j] = true;
                    find(n, computers, j);
                }
            }
        }
        
        return answer;
    }
    
    public void find(int n, int[][] computers, int i) {
        answer--;
        
        for(int j=0; j<n; j++){
            if(i==j) continue;
            if(checked[j]) continue;

            if(computers[i][j] == 1){
                checked[j] = true;
                find(n, computers, j);
            }
        }
    }
}
깊이 우선 탐색(DFS, Depth-First Search)을 구현하여 풀었다.

0.02 ~ 0.63ms

​

다른사람풀이

코딩테스트 연습 / 깊이/너비 우선 탐색(DFS/BFS) / 네트워크 / 다른 사람의 풀이 / 김형민 , 최성준 , - , - , 테스트 외 8 명

class Solution {
    public int solution(int n, int[][] computers) {
        int answer = 0;
        boolean[] chk = new boolean[n];
        for(int i = 0; i < n; i++) {
            if(!chk[i]) {
                dfs(computers, chk, i);
                answer++;
            }
        }
        return answer;
    }
    void dfs(int[][] computers, boolean[] chk, int start) {
        chk[start] = true;
        for(int i = 0; i < computers.length; i++) {
            if(computers[start][i] == 1 && !chk[i]) {
                dfs(computers, chk, i);
            }
        }
    }
}
0.02 ~ 0.28ms

나랑 비슷한 로직이지만...불필요한 것들을 제거해 보기도 좋고 실속도 좋은 코드가 여기있네~^^...!

일단 해결하자는 마음이 앞서서 마구잡이로 풀었었는데.. 
오늘은 이렇게 코드의 효율성에 대해서도 생각해야 된다는 걸.. 다시한번 배우고 갑니다...
