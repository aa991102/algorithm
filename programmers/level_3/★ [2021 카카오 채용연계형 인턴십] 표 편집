문제 설명
[본 문제는 정확성과 효율성 테스트 각각 점수가 있는 문제입니다.]

업무용 소프트웨어를 개발하는 니니즈웍스의 인턴인 앙몬드는 명령어 기반으로 표의 행을 선택, 삭제, 복구하는 프로그램을 작성하는 과제를 맡았습니다. 세부 요구 사항은 다음과 같습니다

table_1.png

위 그림에서 파란색으로 칠해진 칸은 현재 선택된 행을 나타냅니다. 단, 한 번에 한 행만 선택할 수 있으며, 표의 범위(0행 ~ 마지막 행)를 벗어날 수 없습니다. 이때, 다음과 같은 명령어를 이용하여 표를 편집합니다.

"U X": 현재 선택된 행에서 X칸 위에 있는 행을 선택합니다.
"D X": 현재 선택된 행에서 X칸 아래에 있는 행을 선택합니다.
"C" : 현재 선택된 행을 삭제한 후, 바로 아래 행을 선택합니다. 단, 삭제된 행이 가장 마지막 행인 경우 바로 윗 행을 선택합니다.
"Z" : 가장 최근에 삭제된 행을 원래대로 복구합니다. 단, 현재 선택된 행은 바뀌지 않습니다.
예를 들어 위 표에서 "D 2"를 수행할 경우 아래 그림의 왼쪽처럼 4행이 선택되며, "C"를 수행하면 선택된 행을 삭제하고, 바로 아래 행이었던 "네오"가 적힌 행을 선택합니다(4행이 삭제되면서 아래 있던 행들이 하나씩 밀려 올라오고, 수정된 표에서 다시 4행을 선택하는 것과 동일합니다).

table_2.png

다음으로 "U 3"을 수행한 다음 "C"를 수행한 후의 표 상태는 아래 그림과 같습니다.

table_3.png

다음으로 "D 4"를 수행한 다음 "C"를 수행한 후의 표 상태는 아래 그림과 같습니다. 5행이 표의 마지막 행 이므로, 이 경우 바로 윗 행을 선택하는 점에 주의합니다.

table_4.png

다음으로 "U 2"를 수행하면 현재 선택된 행은 2행이 됩니다.

table_5.png

위 상태에서 "Z"를 수행할 경우 가장 최근에 제거된 "라이언"이 적힌 행이 원래대로 복구됩니다.

table_6.png

다시한번 "Z"를 수행하면 그 다음으로 최근에 제거된 "콘"이 적힌 행이 원래대로 복구됩니다. 이때, 현재 선택된 행은 바뀌지 않는 점에 주의하세요.
table_7.png

이때, 최종 표의 상태와 처음 주어진 표의 상태를 비교하여 삭제되지 않은 행은 "O", 삭제된 행은 "X"로 표시하면 다음과 같습니다.

table_8.png

처음 표의 행 개수를 나타내는 정수 n, 처음에 선택된 행의 위치를 나타내는 정수 k, 수행한 명령어들이 담긴 문자열 배열 cmd가 매개변수로 주어질 때, 모든 명령어를 수행한 후 표의 상태와 처음 주어진 표의 상태를 비교하여 삭제되지 않은 행은 O, 삭제된 행은 X로 표시하여 문자열 형태로 return 하도록 solution 함수를 완성해주세요.

제한사항
5 ≤ n ≤ 1,000,000
0 ≤ k < n
1 ≤ cmd의 원소 개수 ≤ 200,000
cmd의 각 원소는 "U X", "D X", "C", "Z" 중 하나입니다.
X는 1 이상 300,000 이하인 자연수이며 0으로 시작하지 않습니다.
X가 나타내는 자연수에 ',' 는 주어지지 않습니다. 예를 들어 123,456의 경우 123456으로 주어집니다.
cmd에 등장하는 모든 X들의 값을 합친 결과가 1,000,000 이하인 경우만 입력으로 주어집니다.
표의 모든 행을 제거하여, 행이 하나도 남지 않는 경우는 입력으로 주어지지 않습니다.
본문에서 각 행이 제거되고 복구되는 과정을 보다 자연스럽게 보이기 위해 "이름" 열을 사용하였으나, "이름"열의 내용이 실제 문제를 푸는 과정에 필요하지는 않습니다. "이름"열에는 서로 다른 이름들이 중복없이 채워져 있다고 가정하고 문제를 해결해 주세요.
표의 범위를 벗어나는 이동은 입력으로 주어지지 않습니다.
원래대로 복구할 행이 없을 때(즉, 삭제된 행이 없을 때) "Z"가 명령어로 주어지는 경우는 없습니다.
정답은 표의 0행부터 n - 1행까지에 해당되는 O, X를 순서대로 이어붙인 문자열 형태로 return 해주세요.
정확성 테스트 케이스 제한 사항
5 ≤ n ≤ 1,000
1 ≤ cmd의 원소 개수 ≤ 1,000
효율성 테스트 케이스 제한 사항
주어진 조건 외 추가 제한사항 없습니다.
입출력 예
n	k	cmd	result
8	2	["D 2","C","U 3","C","D 4","C","U 2","Z","Z"]	"OOOOXOOO"
8	2	["D 2","C","U 3","C","D 4","C","U 2","Z","Z","U 1","C"]	"OOXOXOOO"
입출력 예 설명
입출력 예 #1

문제의 예시와 같습니다.

입출력 예 #2

다음은 9번째 명령어까지 수행한 후의 표 상태이며, 이는 입출력 예 #1과 같습니다.

table_7.png

10번째 명령어 "U 1"을 수행하면 "어피치"가 적힌 2행이 선택되며, 마지막 명령어 "C"를 수행하면 선택된 행을 삭제하고, 바로 아래 행이었던 "제이지"가 적힌 행을 선택합니다.

table_9.png

따라서 처음 주어진 표의 상태와 최종 표의 상태를 비교하면 다음과 같습니다.

table_10.png

제한시간 안내
정확성 테스트 : 10초
효율성 테스트 : 언어별로 작성된 정답 코드의 실행 시간의 적정 배수

-------------------------------------------------------------------------
카카오 문제 해설
https://tech.kakao.com/2021/07/08/2021-%EC%B9%B4%EC%B9%B4%EC%98%A4-%EC%9D%B8%ED%84%B4%EC%8B%AD-for-tech-developers-%EC%BD%94%EB%94%A9-%ED%85%8C%EC%8A%A4%ED%8A%B8-%ED%95%B4%EC%84%A4/

정확성 테스트 케이스 해설
주어진 표의 각 행의 삭제 여부를 배열에 저장합니다. 이 배열의 이름을 arr이라 하겠습니다.

예를 들어, 입출력 예 #2의 최종 상태에서 삭제되지 않은 행을 1, 삭제된 행을 0으로 표현하면 다음과 같이 표현할 수 있습니다.

[1, 1, 0, 1, 0, 1, 1, 1]
또한 중간 처리 과정을 위해 현재 선택된 행의 번호도 저장해야 합니다. selected 변수에 저장했다고 하겠습니다.

이러한 자료구조를 사용해 문제에 주어진 명령을 구현하면 다음과 같습니다.

"U X": arr배열을 순회하면서 삭제되지 않은 행 X개 만큼 위쪽으로 selected값을 조절합니다.
예를 들면 arr = [1, 1, 0, 1, 0, 1, 1, 1]이고 selected = 3일 때 "U 2" 명령이 들어온 경우, 2번 행이 삭제된 상태이므로 selected = 0이 됩니다.
"D X": "U X"와 유사한 방식으로 처리할 수 있습니다.
"D X": selected의 값을 X만큼 증가시킵니다.
"C"
1) 선택된 행 삭제: arr[selected]를 0으로 변경하고, 나중에 "Z" 명령이 들어왔을 때를 대비하여 스택에 삭제된 행 번호를 저장합니다.
2) 선택된 행 변경: 삭제되지 않은 바로 아래 행으로 selected 값을 변경합니다. 이때, 삭제된 행이 마지막 행인 경우 삭제되지 않은 바로 위 행으로 변경합니다.
"Z": 스택에서 삭제되었던 행 번호를 가져와서 arr배열의 해당 행의 상태를 1로 변경합니다.
이렇게 구현할 경우, U, D, C 명령은 최악의 경우 O(n), Z 명령은 O(1) 에 처리할 수 있습니다.

정확성 테스트 케이스의 제한 조건에서 5 ≤ n ≤ 1,000이므로 충분히 해결할 수 있습니다.

효율성 테스트 케이스 해설
효율성 테스트 케이스의 경우, 5 ≤ n ≤ 1,000,000 이므로 배열을 사용해서 해결하기에는 수행시간이 너무 오래 걸립니다.

링크드 리스트 사용
단순히 특정 행의 상태만을 저장하는 것에서 벗어나 링크드 리스트의 아이디어를 사용합니다. 리스트의 각 노드는 삭제되지 않은 이전/이후 노드에 대한 정보를 가집니다.

예를 들어, 행이 4개가 있고, 1번과 2번 행을 차례로 삭제하는 경우 다음과 같이 표현할 수 있습니다.


이와 같은 방법으로 구현할 경우,

U, D: 선택된 노드에서 X 번만 링크를 따라가면 되기 때문에 O(X)에 처리할 수 있습니다.
C: 선택된 노드와 그 노드의 앞뒤로 연결된 노드들의 링크 정보만 변경해 주면 되기 때문에 O(1)에 처리할 수 있습니다.
Z: 삭제된 노드 정보를 스택에 담아 두면 나중에 해당 노드에 O(1)에 접근하여 링크 정보를 복구해 줄 수 있기 때문에 O(1)에 처리할 수 있습니다.
따라서, 문제에서 cmd에 등장하는 모든 X들의 합이 1,000,000 이하인 경우만 입력으로 주어진다고 하였으므로, 충분히 효율성 테스트 케이스를 통과할 수 있습니다.

Segment Tree 또는 Fenwick Tree 사용
실제 테스트에서 일부 참가자들이 사용한 풀이를 하나 소개합니다. 링크드 리스트 접근과는 완전히 다른 방식인데요, 먼저 정확성 풀이 처음에 나왔던 방식을 떠올려봅시다. 각 행의 삭제 여부를 0과 1로 나타냈던 방식입니다.

이때, 배열의 특정 구간의 합은 해당 구간의 삭제되지 않은 행의 수로 볼 수 있습니다.

그렇다면, U와 D 명령은 다음과 같이 생각할 수 있습니다.

U X: 현재 선택된 행에서, 그 위쪽 구간의 합이 X가 되는 지점으로 이동
D X: 현재 선택된 행에서, 그 아래쪽 구간의 합이 X가 되는 지점으로 이동

예를 들어, 하늘색 칸이 선택된 행을 나타낼 때, U 3 명령을 수행하려면 하늘색 칸 왼쪽으로 합이 3이 되는 지점까지 이동하면 됩니다. 즉, 노란색 부분의 합이 3이므로 그림에 표시된 지점까지 이동하는 것입니다.

이 방법을 사용하기 위해서는 선택된 행 위쪽 또는 아래쪽으로 얼마나 이동했을 때 구간 합이 X가 되는지를 빠르게 구해야 합니다. 만약 배열 전체를 순회할 경우 O(X)가 되어 배열을 사용한 풀이와 동일해지기 때문에 더 빠른 방법을 찾아야 합니다. 이를 위해 두 가지 기법을 사용합니다.

Segment Tree 또는 Fenwick Tree
이 자료구조를 이용하면 크기가 n인 배열의 구간 합을 O(log2 n) 시간에 구할 수 있습니다.
이분 탐색
선택된 행 앞, 또는 뒤로 몇 칸을 이동해야 할지를 이분 탐색을 사용해 O(log2 n)시간에 구할 수 있습니다.
두 기법을 조합하여 어느 지점까지 이동해야 할지를 O((log2 n)^2)시간에 구할 수 있습니다.

C, Z 명령의 경우는 정확성 테스트 케이스 풀이와 동일한 방법으로 처리할 수 있습니다.

이렇게 해결할 경우, 전체 cmd 수 ≤ 200,000 이고 5 ≤ n ≤ 1,000,000 이므로 효율성 테스트 케이스까지 해결할 수 있습니다.

--------------------------------------------------------------------------------------------------------------

다른 사람 풀이 https://velog.io/@yuiopre98/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4-level-3-%ED%91%9C-%ED%8E%B8%EC%A7%91

import java.util.Stack;
class Solution {
    public String solution(int n, int k, String[] cmd) {
        Stack<Integer> remove_order = new Stack<Integer>();
        int table_size = n;
        for(int i=0; i<cmd.length; i++) {
            char c = cmd[i].charAt(0);
            if(c=='D')
                k+=Integer.parseInt(cmd[i].substring(2));
            else if(c=='U')
                k-=Integer.parseInt(cmd[i].substring(2));
            else if(c=='C') {
                remove_order.add(k);
                table_size--;
                if(k==table_size)
                    k--;
            }
            else if(c=='Z') {
                if(remove_order.pop()<=k)
                    k++;
                table_size++;
            }
        }
        StringBuilder builder = new StringBuilder();
        for(int i=0; i<table_size; i++)
            builder.append("O");
        while(!remove_order.isEmpty())
            builder.insert(remove_order.pop().intValue(), "X");
        String answer=builder.toString();
        return answer;
    }
}






다른사람풀이 2 <연결리스트를 활용한 풀이 - 시간복잡도O(n + 1000000)>
https://moonsbeen.tistory.com/m/294

import java.util.*;

 

class Solution {

    public String solution(int n, int k, String[] cmd) {

        int[] pre = new int[n];

        int[] next = new int[n];

        for(int i = 0; i < n; i++) {

            pre[i] = i - 1;

            next[i] = i + 1;

        }

        next[n - 1] = -1;

        

        Stack<Node> stack = new Stack<>();

        StringBuilder sb = new StringBuilder("O".repeat(n));

        for(int i = 0; i < cmd.length; i++) {

            char c = cmd[i].charAt(0);

            if(c == 'U') {

                int num = Integer.valueOf(cmd[i].substring(2));

                while(num-- > 0) {

                    k = pre[k];

                }

            } else if(c == 'D') {

                int num = Integer.valueOf(cmd[i].substring(2));

                while(num-- > 0) {

                    k = next[k];

                }

            } else if(c == 'C') {

                stack.push(new Node(pre[k], k, next[k]));

                if(pre[k] != -1) next[pre[k]] = next[k]; //현재 노드 삭제 후 앞뒤 연결

                if(next[k] != -1) pre[next[k]] = pre[k];

                sb.setCharAt(k, 'X');

                

                if(next[k] != -1) k = next[k];

                else k = pre[k]; //마지막 행인 경우에 바로 윗 행 선택

            } else {

                Node node = stack.pop();

                if(node.pre != -1) next[node.pre] = node.cur; //연결 정보 복구

                if(node.nxt != -1) pre[node.nxt] = node.cur;

                sb.setCharAt(node.cur, 'O');

            }

        }

        return sb.toString();

    }

    

    public class Node{

        int pre, cur, nxt;

        

        public Node(int pre, int cur, int nxt) {

            this.pre = pre;

            this.cur = cur;

            this.nxt = nxt;

        }

    }

}


