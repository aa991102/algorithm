문제 설명

고고학자인 "튜브"는 고대 유적지에서 보물과 유적이 가득할 것으로 추정되는 비밀의 문을 발견하였습니다. 그런데 문을 열려고 살펴보니 특이한 형태의 자물쇠로 잠겨 있었고 문 앞에는 특이한 형태의 열쇠와 함께 자물쇠를 푸는 방법에 대해 다음과 같이 설명해 주는 종이가 발견되었습니다.

​

잠겨있는 자물쇠는 격자 한 칸의 크기가 1 x 1인 N x N 크기의 정사각 격자 형태이고 특이한 모양의 열쇠는 M x M 크기인 정사각 격자 형태로 되어 있습니다.

​

자물쇠에는 홈이 파여 있고 열쇠 또한 홈과 돌기 부분이 있습니다. 열쇠는 회전과 이동이 가능하며 열쇠의 돌기 부분을 자물쇠의 홈 부분에 딱 맞게 채우면 자물쇠가 열리게 되는 구조입니다. 자물쇠 영역을 벗어난 부분에 있는 열쇠의 홈과 돌기는 자물쇠를 여는 데 영향을 주지 않지만, 자물쇠 영역 내에서는 열쇠의 돌기 부분과 자물쇠의 홈 부분이 정확히 일치해야 하며 열쇠의 돌기와 자물쇠의 돌기가 만나서는 안됩니다. 또한 자물쇠의 모든 홈을 채워 비어있는 곳이 없어야 자물쇠를 열 수 있습니다.

​

열쇠를 나타내는 2차원 배열 key와 자물쇠를 나타내는 2차원 배열 lock이 매개변수로 주어질 때, 

열쇠로 자물쇠를 열수 있으면 true를, 열 수 없으면 false를 return 하도록 solution 함수를 완성해주세요.

​

제한사항

- key는 M x M(3 ≤ M ≤ 20, M은 자연수)크기 2차원 배열입니다.

- lock은 N x N(3 ≤ N ≤ 20, N은 자연수)크기 2차원 배열입니다.

- M은 항상 N 이하입니다.

- key와 lock의 원소는 0 또는 1로 이루어져 있습니다.

   - 0은 홈 부분, 1은 돌기 부분을 나타냅니다.

​

입출력 예

key

lock

result

[[0, 0, 0], [1, 0, 0], [0, 1, 1]]

[[1, 1, 1], [1, 1, 0], [1, 0, 1]]

true

입출력 예에 대한 설명


key를 시계 방향으로 90도 회전하고, 오른쪽으로 한 칸, 아래로 한 칸 이동하면 lock의 홈 부분을 정확히 모두 채울 수 있습니다.



==========================================================================
카카오 문제 풀이  2020 신입 개발자 블라인드 채용 1차 코딩 테스트 문제 해설

​

제한이 크지 않기 때문에 가능한 모든 경우를 탐색해 볼 수 있습니다. 

2차원 배열을 회전하는 함수를 하나 만들어 둔다면 코드를 더욱 깔끔하게 작성할 수 있습니다.

​

최대 4번까지 배열을 회전시키면서 가능한 경우를 모두 탐색한 다음, 

자물쇠의 모든 홈을 채워 비어있는 곳이 없도록 할 수 있다면 true를, 그렇지 않다면 false를 return 하면 됩니다.

​

key와 lock을 순서대로 맞춰보는 방법 중 하나는 우선 lock 배열을 가로, 세로 길이가 3배인 새로운 배열의 중앙 부분으로 옮긴 후, key 배열을 새로운 배열의 좌측 상단부터 순서대로 이동시키면서 겹치는 부분만 확인해보면 됩니다. 이때, 겹치는 부분은 자물쇠의 모든 홈이 채워지더라도, 겹치지 않는 부분에 여전히 자물쇠의 홈 부분이 남아있을 수 있으므로 모든 홈이 채워졌는지를 정확히 확인해야 합니다.

==========================================================================


다른사람풀이

https://velog.io/@hyeon930/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4-%EC%9E%90%EB%AC%BC%EC%87%A0%EC%99%80-%EC%97%B4%EC%87%A0-Java

import java.util.*;

class Solution {
    public boolean solution(int[][] key, int[][] lock) {
    	int size = lock.length - 1;
    	
    	for(int d = 0 ; d < 4 ; ++d) {
    		int[][] rotatedKey = rotate(d, key);
    		int[][] paddedKey = padding(rotatedKey, size);
    		
    		for(int R = 0 ; R < paddedKey.length - size ; ++R) {
    			for(int C = 0 ; C < paddedKey[0].length - size ; ++C) {
    				boolean flag = true;

    				for(int r = 0 ; r < lock.length ; ++r) {
    					for(int c = 0 ; c < lock[0].length ; ++c) {
    						if(lock[r][c] == paddedKey[R + r][C + c]) flag = false;
    					}
    				}
    				
    				if(flag) return true;
    			}
    		}
    	}
    	
    	return false;
    }

    private int[][] padding(int[][] arr, int size) {
    	int[][] result = new int[arr.length + size * 2][arr[0].length + size * 2];
    	
    	for(int r = 0 ; r < arr.length ; ++r) {
    		for(int c = 0 ; c < arr[0].length ; ++c) {
    			result[r + size][c + size] = arr[r][c];
    		}
    	}

    	return result;
	}

	private int[][] rotate(int cnt, int[][] arr){
    	if(cnt == 0) return arr;
    	
    	int[][] result = null;
    	int[][] origin = copy(arr);
    	
    	for(int i = 0 ; i < cnt ; ++i) {
    		result = new int[arr.length][arr[0].length];

    		for(int r = 0 ; r < origin.length ; ++r) {
    			for(int c = 0 ; c < origin[0].length ; ++c) {
    				result[c][origin.length - 1 - r] = origin[r][c]; 
    			}
    		
    		}
    		origin = result;
    	}
    	
    	return result;
    }
    
    private int[][] copy(int[][] arr){
    	int[][] result = new int[arr.length][arr[0].length];
    	
    	for(int r = 0 ; r < arr.length ; ++r) {
    		for(int c = 0 ; c < arr[r].length ; ++c) {
    			result[r][c] = arr[r][c];
    		}
    	}
    	
    	return result;
    }
}
 
[프로그래머스] 자물쇠와 열쇠 (Java)
프로그래머스 자물쇠와 열쇠나타날 수 있는 모든 모양의 키를 자물쇠와 대조해야하는 문제다. 따라서 모든 경우의 수를 다 구하는 것이 핵심이다.키 배열의 회전키 배열이 0도, 90도, 180도, 270도로 회전하여 나타나는 모양은 단순 이동으로 모두 포함할 수 없다. 따라

velog.io
