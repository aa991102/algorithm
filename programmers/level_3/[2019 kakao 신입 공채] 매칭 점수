문제 설명

프렌즈 대학교 조교였던 제이지는 허드렛일만 시키는 네오 학과장님의 마수에서 벗어나, 카카오에 입사하게 되었다.

평소에 관심있어하던 검색에 마침 결원이 발생하여, 검색개발팀에 편입될 수 있었고, 대망의 첫 프로젝트를 맡게 되었다.

그 프로젝트는 검색어에 가장 잘 맞는 웹페이지를 보여주기 위해 아래와 같은 규칙으로 검색어에 대한 웹페이지의 매칭점수를 계산 하는 것이었다.

 - 한 웹페이지에 대해서 기본점수, 외부 링크 수, 링크점수, 그리고 매칭점수를 구할 수 있다.

 - 한 웹페이지의 기본점수는 해당 웹페이지의 텍스트 중, 검색어가 등장하는 횟수이다. (대소문자 무시)

 - 한 웹페이지의 외부 링크 수는 해당 웹페이지에서 다른 외부 페이지로 연결된 링크의 개수이다.

 - 한 웹페이지의 링크점수는 해당 웹페이지로 링크가 걸린 다른 웹페이지의 기본점수 ÷ 외부 링크 수의 총합이다.

 - 한 웹페이지의 매칭점수는 기본점수와 링크점수의 합으로 계산한다.

​

예를 들어, 다음과 같이 A, B, C 세 개의 웹페이지가 있고, 검색어가 hi라고 하자.


이때 A 웹페이지의 매칭점수는 다음과 같이 계산할 수 있다.

 - 기본 점수는 각 웹페이지에서 hi가 등장한 횟수이다.

    - A,B,C 웹페이지의 기본점수는 각각 1점, 4점, 9점이다.

 - 외부 링크수는 다른 웹페이지로 링크가 걸린 개수이다.

    - A,B,C 웹페이지의 외부 링크 수는 각각 1점, 2점, 3점이다.

 - A 웹페이지로 링크가 걸린 페이지는 B와 C가 있다.

    - A 웹페이지의 링크점수는 B의 링크점수 2점(4 ÷ 2)과 C의 링크점수 3점(9 ÷ 3)을 더한 5점이 된다.

그러므로, A 웹페이지의 매칭점수는 기본점수 1점 + 링크점수 5점 = 6점이 된다.

​

검색어 word와 웹페이지의 HTML 목록인 pages가 주어졌을 때, 매칭점수가 가장 높은 웹페이지의 index를 구하라. 

만약 그런 웹페이지가 여러 개라면 그중 번호가 가장 작은 것을 구하라.

​

제한사항

 - pages는 HTML 형식의 웹페이지가 문자열 형태로 들어있는 배열이고, 길이는 1 이상 20 이하이다.

 - 한 웹페이지 문자열의 길이는 1 이상 1,500 이하이다.

 - 웹페이지의 index는 pages 배열의 index와 같으며 0부터 시작한다.

 - 한 웹페이지의 url은 HTML의 <head> 태그 내에 <meta> 태그의 값으로 주어진다.

    - 예를들어, 아래와 같은 meta tag가 있으면 이 웹페이지의 url은 https://careers.kakao.com/index 이다.

    - <meta property="og:url" content="https://careers.kakao.com/index" />

 - 한 웹페이지에서 모든 외부 링크는 <a href="https://careers.kakao.com/index"\>의 형태를 가진다.

    - <a> 내에 다른 attribute가 주어지는 경우는 없으며 항상 href로 연결할 사이트의 url만 포함된다.

    - 위의 경우에서 해당 웹페이지는 https://careers.kakao.com/index 로 외부링크를 가지고 있다고 볼 수 있다.

 - 모든 url은 https:// 로만 시작한다.

 - 검색어 word는 하나의 영어 단어로만 주어지며 알파벳 소문자와 대문자로만 이루어져 있다.

 - word의 길이는 1 이상 12 이하이다.

 - 검색어를 찾을 때, 대소문자 구분은 무시하고 찾는다.

    - 예를들어 검색어가 blind일 때, HTML 내에 Blind라는 단어가 있거나, BLIND라는 단어가 있으면 두 경우 모두 해당된다.

 - 검색어는 단어 단위로 비교하며, 단어와 완전히 일치하는 경우에만 기본 점수에 반영한다.

    - 단어는 알파벳을 제외한 다른 모든 문자로 구분한다.

    - 예를들어 검색어가 "aba" 일 때, "abab abababa"는 단어 단위로 일치하는게 없으니, 기본 점수는 0점이 된다.

    - 만약 검색어가 "aba" 라면, "aba@aba aba"는 단어 단위로 세개가 일치하므로, 기본 점수는 3점이다.

 - 결과를 돌려줄때, 동일한 매칭점수를 가진 웹페이지가 여러 개라면 그중 index 번호가 가장 작은 것를 리턴한다

    - 즉, 웹페이지가 세개이고, 각각 매칭점수가 3,1,3 이라면 제일 적은 index 번호인 0을 리턴하면 된다.

​

입출력 예 1

word : blind

pages : ["<html lang=\"ko\" xml:lang=\"ko\" xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n <meta charset=\"utf-8\">\n <meta property=\"og:url\" content=\"https://a.com\"/>\n</head> \n<body>\nBlind Lorem Blind ipsum dolor Blind test sit amet, consectetur adipiscing elit. \n<a href=\"https://b.com\"> Link to b </a>\n</body>\n</html>", "<html lang=\"ko\" xml:lang=\"ko\" xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n <meta charset=\"utf-8\">\n <meta property=\"og:url\" content=\"https://b.com\"/>\n</head> \n<body>\nSuspendisse potenti. Vivamus venenatis tellus non turpis bibendum, \n<a href=\"https://a.com\"> Link to a </a>\nblind sed congue urna varius. Suspendisse feugiat nisl ligula, quis malesuada felis hendrerit ut.\n<a href=\"https://c.com\"> Link to c </a>\n</body>\n</html>", "<html lang=\"ko\" xml:lang=\"ko\" xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n <meta charset=\"utf-8\">\n <meta property=\"og:url\" content=\"https://c.com\"/>\n</head> \n<body>\nUt condimentum urna at felis sodales rutrum. Sed dapibus cursus diam, non interdum nulla tempor nec. Phasellus rutrum enim at orci consectetu blind\n<a href=\"https://a.com\"> Link to a </a>\n</body>\n</html>"] 

​

pages는 다음과 같이 3개의 웹페이지에 해당하는 HTML 문자열이 순서대로 들어있다.

<html lang="ko" xml:lang="ko" xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta charset="utf-8">
  <meta property="og:url" content="https://a.com"/>
</head>  
<body>
Blind Lorem Blind ipsum dolor Blind test sit amet, consectetur adipiscing elit. 
<a href="https://b.com"> Link to b </a>
</body>
</html>
<html lang="ko" xml:lang="ko" xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta charset="utf-8">
  <meta property="og:url" content="https://b.com"/>
</head>  
<body>
Suspendisse potenti. Vivamus venenatis tellus non turpis bibendum, 
<a href="https://a.com"> Link to a </a>
blind sed congue urna varius. Suspendisse feugiat nisl ligula, quis malesuada felis hendrerit ut.
<a href="https://c.com"> Link to c </a>
</body>
</html>
<html lang="ko" xml:lang="ko" xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta charset="utf-8">
  <meta property="og:url" content="https://c.com"/>
</head>  
<body>
Ut condimentum urna at felis sodales rutrum. Sed dapibus cursus diam, non interdum nulla tempor nec. Phasellus rutrum enim at orci consectetu blind
<a href="https://a.com"> Link to a </a>
</body>
</html>
위의 예를 가지고 각각의 점수를 계산해보자.

 - 기본점수 및 외부 링크수는 아래와 같다.

    - a.com의 기본점수는 3, 외부 링크 수는 1개

    - b.com의 기본점수는 1, 외부 링크 수는 2개

    - c.com의 기본점수는 1, 외부 링크 수는 1개

 - 링크점수는 아래와 같다.

    - a.com의 링크점수는 b.com으로부터 0.5점, c.com으로부터 1점

    - b.com의 링크점수는 a.com으로부터 3점

    - c.com의 링크점수는 b.com으로부터 0.5점

 - 각 웹 페이지의 매칭 점수는 다음과 같다.

    - a.com : 4.5 점

    - b.com : 4 점

    - c.com : 1.5 점

따라서 매칭점수가 제일 높은 첫번째 웹 페이지의 index인 0을 리턴 하면 된다.

​

입출력 예 2

word : Muzi

pages :

["<html lang=\"ko\" xml:lang=\"ko\" xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n <meta charset=\"utf-8\">\n <meta property=\"og:url\" content=\"https://careers.kakao.com/interview/list\"/>\n</head> \n<body>\n<a href=\"https://programmers.co.kr/learn/courses/4673\"></a>#!MuziMuzi!)jayg07con&&\n\n</body>\n</html>", "<html lang=\"ko\" xml:lang=\"ko\" xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n <meta charset=\"utf-8\">\n <meta property=\"og:url\" content=\"https://www.kakaocorp.com\"/>\n</head> \n<body>\ncon%\tmuzI92apeach&2<a href=\"https://hashcode.co.kr/tos\"></a>\n\n\t^\n</body>\n</html>"] 

​

pages는 다음과 같이 2개의 웹페이지에 해당하는 HTML 문자열이 순서대로 들어있다.

<html lang="ko" xml:lang="ko" xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta charset="utf-8">
  <meta property="og:url" content="https://careers.kakao.com/interview/list"/>
</head>  
<body>
<a href="https://programmers.co.kr/learn/courses/4673"></a>#!MuziMuzi!)jayg07con&&

</body>
</html>
<html lang="ko" xml:lang="ko" xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta charset="utf-8">
  <meta property="og:url" content="https://www.kakaocorp.com"/>
</head>  
<body>
con%    muzI92apeach&2<a href="https://hashcode.co.kr/tos"></a>

    ^
</body>
</html>
 - 기본점수 및 외부 링크수는 아래와 같다.

    - careers.kakao.com/interview/list 의 기본점수는 0, 외부 링크 수는 1개

    - www.kakaocorp.com 의 기본점수는 1, 외부 링크 수는 1개

 - 링크점수는 아래와 같다.

    - careers.kakao.com/interview/list 의 링크점수는 0점

    - www.kakaocorp.com 의 링크점수는 0점

 - 각 웹 페이지의 매칭 점수는 다음과 같다.

    - careers.kakao.com/interview/list : 0점

    - www.kakaocorp.com : 1 점

따라서 매칭점수가 제일 높은 두번째 웹 페이지의 index인 1을 리턴 하면 된다.







카카오 문제 풀이   2019 카카오 신입 공채 1차 코딩 테스트 문제 해설

점수를 계산하는 로직 자체는 복잡하지 않지만, 점수 계산에 필요한 요소들을 잘 추출해야 하는 문제입니다.

​

정규표현식을 이용하거나 문자열 처리 로직을 구현해서 a 태그와 meta 태그를 찾아 현재 페이지의 URL 과 외부 링크의 URL 을 찾습니다. 또한, 전체 HTML 문서를 대상으로 검색어가 몇 번 등장하는지 찾습니다. 

이때, 제시된 조건에 맞게 단어를 찾을 수 있도록 적절히 split 하여 비교합니다. 

각 HTML 문서별 기본 점수, 외부 링크 수를 구하고, 해당 웹페이지로 링크가 걸린 다른 웹페이지들을 찾아 링크 점수를 계산합니다.

​

마지막으로 각 페이지의 매칭 점수를 구하고, 최댓값을 갖는 문서의 인덱스를 구하면 됩니다.

​

정답률: 6.12%






내 풀이 < 이렇게 풀지 말자 >

import java.util.*;
class Solution {
    public int solution(String word, String[] pages) {
        HashMap<String,ArrayList<Integer>> map = new HashMap<>();
        ArrayList<Page> page_list = new ArrayList<>();
        
        String before = "<meta property=\"og:url\" content=\"https://";
        String external_link_before = "<a href=\"https://";
        word = word.toUpperCase();
        
        for(int i=0; i<pages.length; i++){
            String page = pages[i].substring(pages[i].indexOf(before) + before.length());
            
            // 1. 이 페이지의 링크 찾기
            String page_link = page.substring(0, page.indexOf("\""));
            page = page.substring(page_link.length());
            
            // 2. 주어진 단어 찾아서 앞뒤 확인하고 괜찮으면 cnt++ 그리고 지우기
            String upper = page.toUpperCase();
            int word_cnt = 0;
            while(upper.indexOf(word) != -1){
            	boolean ok = true;
            	if(upper.indexOf(word) != 0) {
            		char before_char = upper.charAt(upper.indexOf(word)-1);
            		if(before_char >= 'A' && before_char <= 'Z'){
            			ok = false;
            		}
            	}
            	
                char after_char = upper.charAt(upper.indexOf(word) + word.length());
                if(after_char >= 'A' && after_char <= 'Z'){
                    ok = false;
                }
                
                if(ok) word_cnt++;
                upper = upper.substring(upper.indexOf(word) + word.length() + 1);
            }
            
            // 3. 외부 링크 찾기 및 map에 추가
            int external_link_cnt = 0;
            while(page.indexOf(external_link_before) != -1){
                page = page.substring(page.indexOf(external_link_before) + external_link_before.length());
                String external_link = page.substring(0, page.indexOf("\""));
                page = page.substring(external_link.length());
                
                ArrayList<Integer> list;
                if(map.containsKey(external_link)){
                    list = map.get(external_link);
                }else{
                    list = new ArrayList<>();
                }
                list.add(i);
                map.put(external_link, list);
                external_link_cnt++;
            }
            Page pageinfo = new Page(page_link, i, word_cnt, external_link_cnt);
            page_list.add(pageinfo);
        }
        
        for(int i=0; i<page_list.size(); i++){
            Page page = page_list.get(i);
            ArrayList<Integer> list = map.get(page.page_link);
            double score = page.basic_score;
            
            if(list != null) {
            	for(int j=0; j<list.size(); j++){
            		Page page2 = page_list.get(list.get(j));
            		if(page2.basic_score != 0 && page2.external_link_cnt != 0){
            			score += page2.basic_score/(double)page2.external_link_cnt;
            		}
            	}            	
            }
            page.setScore(score);
        }
        
        Collections.sort(page_list);
        
        return page_list.get(0).index;
    }
    
    static class Page implements Comparable<Page>{
        int index;
        String page_link;
        int basic_score;
        int external_link_cnt;
        double score;
        
        Page(String page_link, int index, int basic_score, int external_link_cnt){
            this.page_link = page_link;
            this.index = index;
            this.basic_score = basic_score;
            this.external_link_cnt = external_link_cnt;
        }
        
        void setScore(double score) {
        	this.score = score;
        }
        
        @Override
        public int compareTo(Page p){
            if(this.score == p.score){
                return this.index - p.index;
            }
            if(p.score - this.score > 0){
                return 1;
            }else{
                return -1;
            }
        }
    }
}
0.87 ~ 8.01ms

하...링크를 찾는 부분을 대체 어떻게 해야할 지 모르겠어서 

정말 공간적으로 매우 비효율적이라는 것을 알면서도 substring한 걸 저장할 수밖에 없었던 나의 슬픈 코드.... 

다시는 이렇게 코드를 작성하지 않길 바라며 경견한 마음으로 다른사람풀이를 봅니다..

​

​

다른사람풀이

코딩테스트 연습 / 2019 KAKAO BLIND RECRUITMENT / 매칭 점수 / 다른 사람의 풀이 / Isu Kim

import java.util.*;

class Solution {
    public int solution(String word, String[] pages) {
        word = word.toLowerCase();
        double[] originalScores = new double[pages.length];

        HashMap<String, Integer> sites = new HashMap<>();

        for(int i=0; i<pages.length; i++) {
            pages[i] = pages[i].toLowerCase();
            double score = 0;
            int index = 0;
            while((index = pages[i].indexOf(word, index)) != -1) {
                int endIndex = index + word.length();

                char leftChar = pages[i].charAt(index-1);
                char rightChar = pages[i].charAt(endIndex);
                if((leftChar < 'a' || leftChar > 'z') && (rightChar < 'a' || rightChar > 'z')) {
                    score += 1.0;
                }

                index = endIndex;
            }
            originalScores[i] = score;

            int metaIndex = pages[i].indexOf("<meta property=\"og:url\"");
            int httpsIndex = pages[i].indexOf("https", metaIndex);
            int endIndex = pages[i].indexOf("\"", httpsIndex);
            String url = pages[i].substring(httpsIndex, endIndex);
            sites.put(url, i);
        }

        double[] scoresAfterLink = Arrays.copyOf(originalScores, originalScores.length);
        for(int i=0; i<pages.length; i++) {
            int index = 0;
            ArrayList<String> linkSites = new ArrayList<>();
            while((index = pages[i].indexOf("<a href", index)) != -1) {
                int httpsIndex = pages[i].indexOf("https", index);
                int endIndex = pages[i].indexOf("\"", httpsIndex);
                String url = pages[i].substring(httpsIndex, endIndex);
                linkSites.add(url);

                index = endIndex;
            }

            double plusScore = originalScores[i] / linkSites.size();
            for(String link : linkSites) {
                Integer linkIndex = sites.get(link);
                if(linkIndex != null)
                    scoresAfterLink[linkIndex] += plusScore;
            }
        }


        int answer = 0;
        double maxScore = 0;
        for(int i=0; i<scoresAfterLink.length; i++) {
            if(maxScore < scoresAfterLink[i]) {
                maxScore = scoresAfterLink[i];
                answer = i;
            }
        }
        return answer;
    }
}
0.25 ~ 3.64ms

​

​

indexOf() 가 이런 기능도 있었다니.... 꼭 기억해두자!!!!! ★★★

사용법

설명

indexOf(String str) 

대상문자열에 인자값으로 주어지는 String값이 있는지 검색합니다.

indexOf(char ch) 

대상문자열에 인자값으로 주어지는 char값이 있는지 검색합니다.

indexOf(String str, int fromIndex)

대상문자열에 첫번째 인자값으로 주어지는 String값이 있는지 두번째 인자값의 index부터 검색합니다.

indexOf(char ch, int fromIndex) 

대상문자열에 첫번째 인자값으로 주어지는 char값이 있는지 두번째 인자값의 index부터 검색합니다.

* 참조 사이트


 
[Java] 문자열에 특정 문자 포함 찾기/검색하는 다양한 방법(indexOf, contains, matches)
프로그래밍을 하다보면 특정 문자열에서 원하는 문자가 포함되어 있는지 확인해야하는 소스를 넣을때가 종종 있습니다. 문자열을 찾는 방법은 String클래스의 indexOf(), contains(), matches()메소드를 활용하여..

coding-factory.tistory.com
