문제 설명

하드디스크는 한 번에 하나의 작업만 수행할 수 있습니다. 디스크 컨트롤러를 구현하는 방법은 여러 가지가 있습니다. 가장 일반적인 방법은 요청이 들어온 순서대로 처리하는 것입니다.

예를들어

  - 0ms 시점에 3ms가 소요되는 A작업 요청

  - 1ms 시점에 9ms가 소요되는 B작업 요청

  - 2ms 시점에 6ms가 소요되는 C작업 요청 

와 같은 요청이 들어왔습니다. 이를 그림으로 표현하면 아래와 같습니다.


한 번에 하나의 요청만을 수행할 수 있기 때문에 각각의 작업을 요청받은 순서대로 처리하면 다음과 같이 처리 됩니다.


  - A: 3ms 시점에 작업 완료 (요청에서 종료까지 : 3ms)

  - B: 1ms부터 대기하다가, 3ms 시점에 작업을 시작해서 12ms 시점에 작업 완료(요청에서 종료까지 : 11ms)

  - C: 2ms부터 대기하다가, 12ms 시점에 작업을 시작해서 18ms 시점에 작업 완료(요청에서 종료까지 : 16ms) 

이 때 각 작업의 요청부터 종료까지 걸린 시간의 평균은 10ms(= (3 + 11 + 16) / 3)가 됩니다.

​

하지만 A → C → B 순서대로 처리하면


  - A: 3ms 시점에 작업 완료(요청에서 종료까지 : 3ms)

  - C: 2ms부터 대기하다가, 3ms 시점에 작업을 시작해서 9ms 시점에 작업 완료(요청에서 종료까지 : 7ms)

  - B: 1ms부터 대기하다가, 9ms 시점에 작업을 시작해서 18ms 시점에 작업 완료(요청에서 종료까지 : 17ms) 

이렇게 A → C → B의 순서로 처리하면 각 작업의 요청부터 종료까지 걸린 시간의 평균은 9ms(= (3 + 7 + 17) / 3)가 됩니다.

​

각 작업에 대해 [작업이 요청되는 시점, 작업의 소요시간]을 담은 2차원 배열 jobs가 매개변수로 주어질 때, 

작업의 요청부터 종료까지 걸린 시간의 평균을 가장 줄이는 방법으로 처리하면 평균이 얼마가 되는지 return 하도록 

solution 함수를 작성해주세요. (단, 소수점 이하의 수는 버립니다)

​

제한 사항

  - jobs의 길이는 1 이상 500 이하입니다.

  - jobs의 각 행은 하나의 작업에 대한 [작업이 요청되는 시점, 작업의 소요시간] 입니다.

  - 각 작업에 대해 작업이 요청되는 시간은 0 이상 1,000 이하입니다.

  - 각 작업에 대해 작업의 소요시간은 1 이상 1,000 이하입니다.

  - 하드디스크가 작업을 수행하고 있지 않을 때에는 먼저 요청이 들어온 작업부터 처리합니다.

​

입출력 예

jobs

return

[[0, 3], [1, 9], [2, 6]]

9

입출력 예 설명

문제에 주어진 예와 같습니다.

  - 0ms 시점에 3ms 걸리는 작업 요청이 들어옵니다.

  - 1ms 시점에 9ms 걸리는 작업 요청이 들어옵니다.

  - 2ms 시점에 6ms 걸리는 작업 요청이 들어옵니다.





다른사람풀이1

https://velog.io/@hyeon930/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4-%EB%94%94%EC%8A%A4%ED%81%AC-%EC%BB%A8%ED%8A%B8%EB%A1%A4%EB%9F%AC-Java

import java.util.*;
class Solution {
    public int solution(int[][] jobs) {
        // 대기 큐
    	LinkedList<Job> waiting = new LinkedList<>();
        // 작업 큐 - 우선순위큐(작업시간을 기준으로 오름차순 정렬)
    	PriorityQueue<Job> pq = new PriorityQueue<>(new Comparator<Job>() {
    		@Override
    		public int compare(Job j1, Job j2) {
    			return j1.workingTime - j2.workingTime;
    		}
    	});
    	
        // 대기큐에 모든 작업을 넣고 요청시간을 기준으로 오름차순 정렬
    	for(int[] job : jobs) {
    		waiting.offer(new Job(job[0], job[1]));
    	}
    	Collections.sort(waiting, new Comparator<Job>() {
			@Override
			public int compare(Job j1, Job j2) {
				return j1.requestTime - j2.requestTime;
			}
    	});
    	
    	int answer = 0;
    	int cnt = 0;
    	int time = waiting.peek().requestTime; // 현재시간

    	while(cnt < jobs.length) {
            // 현재 시간 이하의 요청시간을 가지는 작업을 모두 대기큐에서 작업 큐로 옮긴다.
    		while(!waiting.isEmpty() && waiting.peek().requestTime <= time) {
    			pq.offer(waiting.pollFirst());
    		}
    		
    		if(!pq.isEmpty()) {
    			Job job = pq.poll();
    			time += job.workingTime; // 현재 시간에 현재 작업의 작업시간을 더해준다.
    			answer += time - job.requestTime; // 각 작업의 Turn Arround Time을 answer에 더해나간다.
    			cnt++; // 완료된 작업의 숫자인 cnt를 +1 
    		} else {
    			time++; // 작업 큐가 비어있는 경우 현재 시간을 +1
    		}
    	}
    	
    	return answer / cnt;
    }
    
    class Job {
        int requestTime; // 요청시간
        int workingTime; // 작업시간
        
        Job(int requestTime, int workingTime){
            this.requestTime = requestTime;
            this.workingTime = workingTime;
        }
    }
}
이 분의 해설을 함께 첨부! ↓↓↓↓↓↓↓

​

이 문제는 스케쥴링 알고리즘 중 하나인 SJF 알고리즘을 구현하는 문제였다.

* SPN(Shortest Process Next) / SJF(Shortest Job First)

   - 준비 큐에서 가장 짧은(CPU 요구량이 가장 적은) 프로세스에게 CPU 할당.

   - starvation 발생가능, aging 기법으로 해결

   - 실행 전에는 실행 시간을 알 수 없다. 지수 평균 방법을 통해 추측한다.

원래는 실행 전에는 실행 시간(작업 시간)을 알 수 없지만 이 문제에서는 미리 주어지기 때문에 신경쓸 필요가 없다. 

​

1. 대기 큐에 모든 작업을 넣고 요청 시간을 기준으로 오름차순 정렬한다.

모든 작업이 완료될 때 까지 다음을 반복한다.

   2. 현재 시간 이하의 요청시간을 가지는 작업을 모두 대기큐에서 작업 큐로 옮긴다.

   3. ​작업 큐에서 가장 작업시간이 짧은 작업을 꺼내어 작업한다.

         - 작업 큐는 작업시간을 기준으로 오름차순 정렬되어있다.

         - 현재 시간에 현재 작업의 작업시간을 더해준다.

         - Turn Arround Time의 평균 시간을 구하기 위해서 각 작업의 Turn Arround Time을 answer에 더해나간다.

         - 완료된 작업의 숫자인 cnt를 +1 한다.

   4. 작업 큐가 비어있는 경우 현재 시간을 +1 한다.

​

 
[프로그래머스] 디스크 컨트롤러 (Java)
프로그래머스 디스크 컨트롤러이 문제는 스케쥴링 알고리즘 중 하나인 SJF 알고리즘을 구현하는 문제였다.SPN(Shortest Process Next) / SJF(Shortest Job First)준비 큐에서 가장 짧은(CPU 요구량이 가장 적은) 프로세스에게 CPU 할

velog.io

​

​

다른사람풀이2

코딩테스트 연습 / 힙(Heap) / 디스크 컨트롤러 / 다른 사람의 풀이 / Kim_TaeHyeong

import java.util.*;
class Solution {
    public int solution(int[][] jobs) {
        int answer = 0;

        ArrayList<Process> processArrayList = new ArrayList();
        //make arrayList
        for(int i = 0 ; i < jobs.length ; i++){
            Process process = new Process(jobs[i][0],jobs[i][1],jobs[i][0]+jobs[i][1]);
            processArrayList.add(process);
        }
        int job = processArrayList.size();

        processArrayList.sort(Comparator.comparingInt(process -> process.executionTime));

        int time = 0;
        int sum = 0;
        while(!processArrayList.isEmpty()){
            for(int i = 0 ; i < processArrayList.size(); i++){
                if(time >= processArrayList.get(i).startTime){
                    time += processArrayList.get(i).executionTime;
                    sum += time - processArrayList.get(i).startTime;
                    processArrayList.remove(i);
                    break;
                }
                if(i==processArrayList.size()-1){
                    time++;
                }
            }
            // System.out.println(sum);
        }  
        answer = sum/job;
        return answer;
    }
}
class Process implements Comparable<Process> {
    int startTime;
    int executionTime;
    int endTime;
    Process(int a, int b,int c){
        this.startTime = a;
        this.executionTime = b;
        this.endTime = c;
    }
    @Override
    public int compareTo(Process o){
        return this.executionTime - o.executionTime;
    }
}
