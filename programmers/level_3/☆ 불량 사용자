문제 설명

개발팀 내에서 이벤트 개발을 담당하고 있는 "무지"는 최근 진행된 카카오이모티콘 이벤트에 비정상적인 방법으로 당첨을 시도한 응모자들을 발견하였습니다. 이런 응모자들을 따로 모아 불량 사용자라는 이름으로 목록을 만들어서 당첨 처리 시 제외하도록 이벤트 당첨자 담당자인 "프로도" 에게 전달하려고 합니다. 이 때 개인정보 보호을 위해 사용자 아이디 중 일부 문자를 '*' 문자로 가려서 전달했습니다. 가리고자 하는 문자 하나에 '*' 문자 하나를 사용하였고 아이디 당 최소 하나 이상의 '*' 문자를 사용하였습니다.

"무지"와 "프로도"는 불량 사용자 목록에 매핑된 응모자 아이디를 제재 아이디 라고 부르기로 하였습니다.

​

예를 들어, 이벤트에 응모한 전체 사용자 아이디 목록이 다음과 같다면

응모자 아이디

frodo

fradi

crodo

abc123

frodoc

다음과 같이 불량 사용자 아이디 목록이 전달된 경우,

불량 사용자

fr*d*

abc1**

불량 사용자에 매핑되어 당첨에서 제외되어야 야 할 제재 아이디 목록은 다음과 같이 두 가지 경우가 있을 수 있습니다.

제재 아이디

frodo

abc123

제재 아이디

fradi

abc123

​

이벤트 응모자 아이디 목록이 담긴 배열 user_id와 불량 사용자 아이디 목록이 담긴 배열 banned_id가 매개변수로 주어질 때, 

당첨에서 제외되어야 할 제재 아이디 목록은 몇가지 경우의 수가 가능한 지 return 하도록 solution 함수를 완성해주세요.

​

[제한사항]

 - user_id 배열의 크기는 1 이상 8 이하입니다.

 - user_id 배열 각 원소들의 값은 길이가 1 이상 8 이하인 문자열입니다.

    - 응모한 사용자 아이디들은 서로 중복되지 않습니다.

    - 응모한 사용자 아이디는 알파벳 소문자와 숫자로만으로 구성되어 있습니다.

 - banned_id 배열의 크기는 1 이상 user_id 배열의 크기 이하입니다.

 - banned_id 배열 각 원소들의 값은 길이가 1 이상 8 이하인 문자열입니다.

    - 불량 사용자 아이디는 알파벳 소문자와 숫자, 가리기 위한 문자 '*' 로만 이루어져 있습니다.

    - 불량 사용자 아이디는 '*' 문자를 하나 이상 포함하고 있습니다.

    - 불량 사용자 아이디 하나는 응모자 아이디 중 하나에 해당하고

      같은 응모자 아이디가 중복해서 제재 아이디 목록에 들어가는 경우는 없습니다.

 - 제재 아이디 목록들을 구했을 때 아이디들이 나열된 순서와 관계없이 아이디 목록의 내용이 동일하다면 같은 것으로 처리하여

   하나로 세면 됩니다.

[입출력 예]

user_id

banned_id

result

["frodo", "fradi", "crodo", "abc123", "frodoc"]

["fr*d*", "abc1**"]

2

["frodo", "fradi", "crodo", "abc123", "frodoc"]

["*rodo", "*rodo", "******"]

2

["frodo", "fradi", "crodo", "abc123", "frodoc"]

["fr*d*", "*rodo", "******", "******"]

3

입출력 예에 대한 설명

입출력 예 1

문제 설명과 같습니다.

​

입출력 예 2

다음과 같이 두 가지 경우가 있습니다.

제재 아이디

frodo

crodo

abc123

제재 아이디

frodo

crodo

frodoc

입출력 예 3

다음과 같이 세 가지 경우가 있습니다.

제재 아이디

frodo

crodo

abc123

frodoc

제재 아이디

fradi

crodo

abc123

frodoc

제재 아이디

fradi

frodo

abc123

frodoc






내 풀이 < DFS 알고리즘 방식 >

import java.util.HashSet;
import java.util.ArrayList;

class Solution {
    HashSet<HashSet<String>> sets = new HashSet<>();
    int length = 0;
    
    public int solution(String[] user_id, String[] banned_id) {
        length = banned_id.length;
        ArrayList<String>[] list_arr = new ArrayList[length];
        
        for(String user : user_id){
            for(int i=0; i<length; i++){
                String ban = banned_id[i];
                
                if(user.length() != ban.length()) continue;
                
                boolean ok = true;
                for(int j=0; j<ban.length(); j++){
                    if(ban.charAt(j) == '*') continue;
                    
                    if(user.charAt(j) != ban.charAt(j)) {
                        ok = false;
                        continue;
                    }
                }
                
                if(ok){
                    if(list_arr[i] == null) list_arr[i] = new ArrayList();
                    list_arr[i].add(user);
                }
            }
        }
        
        dfs(0, list_arr, new HashSet<String>());
        
        return sets.size();
    }
                   
    void dfs(int deep, ArrayList<String>[] list_arr, HashSet<String> set){
        if(deep == length){
            sets.add(new HashSet(set)); // sets.add(set); 으로 하지 않는 이유는 아래에서 설명
            return;
        }
        
        ArrayList<String> list = list_arr[deep];
        
        for(int i=0; i<list.size(); i++){
            String str = list.get(i);
            
            if(set.contains(str)) continue;
            
            set.add(list.get(i));
            dfs(deep+1, list_arr, set);
            set.remove(list.get(i));
        }
        return;
    }
}
0.13 ~ 165.87ms

​

dfs메소드의 if문에서 sets.add(set); 라 하면 테스트 케이스 3번에서 실패한다. 그 이유를 질문하기에서 어떤 분이 말씀하시기를...

" 주소값 그 자체가 들어가버리기 때문에, 나중에 set객체를 수정해버리면 hs안에 있는 set객체가 수정되어 버리는 경우가 생기기 때문 아닐까요? 깊은복사, 얕은복사 개념이 들어가는거 같아요 " 라고 하셨다.

​

여기서 얕은복사와 깊은복사의 개념을 찾아와 보자면...

▶ 얕은 복사(shallow copy)는 주소값을 복사하기 때문에 주소로 참조한 값이 변경되면 해당 값을 참조하고 있는 값들이 변경된다. 

      즉, 얕은 복사를 한 변수는 원본이 변경될 때 함께 변경된다. = 연산자가 얕은 복사를 수행한다. 

▶ 깊은 복사(Deep copy)는 주소값 참조가 아닌, 새로운 메모리 공간에 값을 복사하는 것이기 때문에, 

      복사한 후 한쪽 값을 수정해도 다른 값에 영향을 끼치지 않는다.

​

​

​

다른사람풀이 < 비트 마스크(Bit Mask) 활용 >

코딩테스트 연습 / 2019 카카오 개발자 겨울 인턴십 / 불량 사용자 / 다른 사람의 풀이 / 채윤병

import java.util.HashSet;
import java.util.Set;

public class Solution {

    Set<Integer> set;

    public int solution(String[] user_id, String[] banned_id) {
        set = new HashSet<>();

        go(0, user_id, banned_id, 0);

        return set.size();
    }

    public void go(int index, String[] user_id, String[] banned_id, int bit) {

        if(index == banned_id.length) {
            set.add(bit);
            return;
        }

        String reg = banned_id[index].replace("*", "[\\w\\d]");
        for(int i=0; i<user_id.length; ++i) {
            if((((bit>>i) & 1) == 1) || !user_id[i].matches(reg)) continue;
            go(index + 1, user_id, banned_id, (bit | 1<<i));
        }
    }
}
0.47 ~ 402.26ms

비트마스크 등장!! 두둥... 시간은 비교적 오래 걸리지만 코드가 정말 간단해진다... 다음에 다시 보자!

​

​

비트마스크와 정규표현식 정리한 글 링크! 참고!!

 
비트마스크(BitMask) 는 무엇인가? :: 마이구미
mygumi.tistory.com

 
정규표현식 (Regex) 정리
hamait.tistory.com
