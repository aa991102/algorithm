문제 설명

n명의 권투선수가 권투 대회에 참여했고 각각 1번부터 n번까지 번호를 받았습니다. 권투 경기는 1대1 방식으로 진행이 되고, 만약 A 선수가 B 선수보다 실력이 좋다면 A 선수는 B 선수를 항상 이깁니다. 심판은 주어진 경기 결과를 가지고 선수들의 순위를 매기려 합니다. 하지만 몇몇 경기 결과를 분실하여 정확하게 순위를 매길 수 없습니다.

​

선수의 수 n, 경기 결과를 담은 2차원 배열 results가 매개변수로 주어질 때 

정확하게 순위를 매길 수 있는 선수의 수를 return 하도록 solution 함수를 작성해주세요.

​

제한사항

 · 선수의 수는 1명 이상 100명 이하입니다.

 · 경기 결과는 1개 이상 4,500개 이하입니다.

 · results 배열 각 행 [A, B]는 A 선수가 B 선수를 이겼다는 의미입니다.

 · 모든 경기 결과에는 모순이 없습니다.

​

입출력 예

n

results

return

5

[[4, 3], [4, 2], [3, 2], [1, 2], [2, 5]]

2

입출력 예 설명

2번 선수는 [1, 3, 4] 선수에게 패배했고 5번 선수에게 승리했기 때문에 4위입니다.

5번 선수는 4위인 2번 선수에게 패배했기 때문에 5위입니다.







다른사람풀이1 < 플로이드 와샬 알고리즘 >

https://in-intuition.tistory.com/25

class Solution {
    public int solution(int n, int[][] results) {
        boolean[][] game =  new boolean[n][n];
        int answer = 0;
        for(int i=0; i<results.length; i++){ 
            game[results[i][0]-1][results[i][1]-1]=true; 
        }

        for(int i=0; i<n; i++){
            for(int j=0; j<n; j++){
                for(int k=0; k<n; k++){
                    if(game[j][i]&&game[i][k]) {
                        game[j][k]=true;
                    }
                }
            }
        }

        for(int i=0; i<n; i++){
            int result=0;
            for(int j=0; j<n; j++){
                if(game[i][j] || game[j][i]){result++;}
            }
            if(result==n-1){answer++;}
        }
        return answer;
    }
}
​

다른사람풀이2 < 플로이드 와샬 알고리즘 >

https://tosuccess.tistory.com/47

import java.util.Arrays;

class Solution {
    public int solution(int n, int[][] results) {
        //모든 정점에서 갈 수 있으면, 그 정점은 비교 가능 대상이 됨. 
        //플로이드 워샬로 최단거리표를 만들고, 표 중 [i][j], [j][i] 중 하나라도 길이 있으면 모든 정점에서 갈 수 있다고 판단. 
        int INF = 100001; 
        int answer = 0; 
        int[][] fw = new int[n+1][n+1]; 
        
        //모든 경로 INF로 채우기 
        for(int[] arr : fw) { 
            Arrays.fill(arr, INF); 
        } 
        
        //플로이드 워샬 표 채우기 
        for(int[] arr : results) { 
            fw[arr[0]][arr[1]] = 1; 
        } 
        
        for(int k = 1; k < fw.length; k++) { 
            //거치는 경로 
            for(int i = 1; i < fw.length; i++) { 
                //시작 정점 
                for(int j = 1; j < fw.length; j++) { 
                    //도착 정점 ex) k-1, i-2, j-3 이면 2->3 > 2->1->3을 비교 
                    if(fw[i][j] > fw[i][k] + fw[k][j]) { 
                        fw[i][j] = fw[i][k] + fw[k][j]; 
                    } 
                } 
            } 
        } 
        
        for(int i = 1; i < fw.length; i++) { 
            boolean flag = true; 
            for(int j = 1; j < fw[i].length; j++) { 
                if(i == j) continue; 
                
                if(fw[i][j] == INF && fw[j][i] == INF) { 
                    flag = false; 
                    break; 
                } 
            } 
            if(flag) answer++; //모든 정점에서 갈 수 있는 정점을 찾은 경우 
        } 
        
        return answer;
    }
}
​

​

[1,2] [2,3] [3,4] [4,5]일 때, 1이 이긴 사람들을 2, 3, 4, 5로 n-1이니까 1의 순위를 알 수 있다.

고 생각했으면서 이걸 어떻게 구현할지 생각해내지 못했다. 

​

저번에 이런 류의 문제가 나왔을 때도 오늘처럼 map으로 풀려다가 실패하고 다른 사람 풀이를 찾아봤더니 플로이드 와샬(혹은 다익스트라) 알고리즘으로 풀이된 코드들이었다.

​

학습을 제대로 못했군 나 자신....

다시 보자 이 풀이!!!!!!!!!!!!!!!!!!! and 저번에 정리한 글...


 
배달 ★★★다익스트라&플로이드 와샬 알고리즘★★★
https://m.blog.naver.com/PostView.naver?blogId=aa991102&logNo=222400715602
