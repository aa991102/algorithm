문제 설명

두 개의 단어 begin, target과 단어의 집합 words가 있습니다. 

아래와 같은 규칙을 이용하여 begin에서 target으로 변환하는 가장 짧은 변환 과정을 찾으려고 합니다.

1. 한 번에 한 개의 알파벳만 바꿀 수 있습니다. 

2. words에 있는 단어로만 변환할 수 있습니다. 

​

예를 들어 begin이 "hit", target가 "cog", words가 ["hot","dot","dog","lot","log","cog"]라면 

"hit" -> "hot" -> "dot" -> "dog" -> "cog"와 같이 4단계를 거쳐 변환할 수 있습니다.

​

두 개의 단어 begin, target과 단어의 집합 words가 매개변수로 주어질 때, 

최소 몇 단계의 과정을 거쳐 begin을 target으로 변환할 수 있는지 return 하도록 solution 함수를 작성해주세요.

​

제한사항

- 각 단어는 알파벳 소문자로만 이루어져 있습니다.

- 각 단어의 길이는 3 이상 10 이하이며 모든 단어의 길이는 같습니다.

- words에는 3개 이상 50개 이하의 단어가 있으며 중복되는 단어는 없습니다.

- begin과 target은 같지 않습니다.

- 변환할 수 없는 경우에는 0를 return 합니다.

​

입출력 예

begin

target

words

return

"hit"

"cog"

["hot", "dot", "dog", "lot", "log", "cog"]

4

"hit"

"cog"

["hot", "dot", "dog", "lot", "log"]

0

입출력 예 설명

예제 1

문제에 나온 예와 같습니다.

예제 2

target인 "cog"는 words 안에 없기 때문에 변환할 수 없습니다.







내 풀이 < BFS(Breadth-First Search), 너비 우선 탐색 >

import java.util.LinkedList;
class Solution {
    boolean[] visited;
    int answer = Integer.MAX_VALUE;
    
    public int solution(String begin, String target, String[] words) {
        visited = new boolean[words.length];
        
        bfs(begin, target, words);
    
        return (answer==Integer.MAX_VALUE)? 0 : answer;
    }
    
    public void bfs(String start, String target, String[] words) {
        LinkedList<Node> q = new LinkedList<>();
        q.offer(new Node(start, 0));
        
        while(!q.isEmpty()) {
            Node node = q.poll();
            String begin = node.word;
            int count = node.count;
            
            if(begin.equals(target)){
                if(count < answer) answer = count;
            }
            
            for(int i = 0; i < words.length; i++) {
                if(visited[i]) continue;

                int differ_cnt = 0;

                for(int j=0; j<begin.length(); j++){
                    if(begin.charAt(j) != words[i].charAt(j)) differ_cnt++;
                    if(differ_cnt > 1) break;
                }

                if(differ_cnt == 1){
                    q.offer(new Node(words[i], count+1));
                    visited[i] = true;
                }
            }
        }
    }
    
    public class Node {
        String word;
        int count;
        
        public Node(String word, int count) {
            this.word = word;
            this.count = count;
        }
    }
}
0.32 ~ 0.57ms

​

​

다른사람풀이 < DFS(Depth-First Search), 깊이 우선 탐색 >

https://tosuccess.tistory.com/29

class Solution {
    int answer; // 최소 단계
    boolean[] used; // 단어를 사용 중인지를 판단하는 visited와 같은 역할을 하는 배열
    public int solution(String begin, String target, String[] words) {
        answer = 51; // 단어 최대값이 50이므로
        used = new boolean[words.length];
        dfs(begin, target, 0, words);
        return answer == 51 ? 0 : answer; // answer이 51이면 target과 같은 단어가 없는 것으로 판단.
    }
    
    public void dfs(String presentWord, String target, int count,String[] words) {
        if(presentWord.equals(target)) {
            answer = (answer > count) ? count : answer;
            return;
        }

        // 탐색한 글자중 하나만 차이나고 탐색되지 않은 글자이 있다면. dfs 수행
        for(int i = 0; i < words.length; i++) {
            if(!used[i] && check(presentWord, words[i])) {
                used[i] = true;
                dfs(words[i],target,count+1, words);
                used[i] = false;
            }
        }
    }

    // 현재의 단어와 다음 단어가 바뀔 조건에 일치하는가를 체크
    public boolean check(String presentWord, String nextWord) {
        int count = 0;
        for(int i = 0; i < presentWord.length(); i++) {
            if(presentWord.charAt(i) != nextWord.charAt(i)) {
                count++;
            }
        }
        return count == 1 ? true : false;
    }
}
0.03 ~ 0.85ms

 
[프로그래머스 level_3] 단어 변환 for JAVA
https://programmers.co.kr/learn/courses/30/lessons/43163 프로그래머스 코드 중심의 개발자 채용. 스택 기반의 포지션 매칭. 프로그래머스의 개발자 맞춤형 프로필을 등록하고, 나와 기술 궁합이 잘 맞는 기업..

tosuccess.tistory.com
