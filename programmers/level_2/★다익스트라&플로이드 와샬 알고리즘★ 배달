문제 설명

N개의 마을로 이루어진 나라가 있습니다. 

이 나라의 각 마을에는 1부터 N까지의 번호가 각각 하나씩 부여되어 있습니다. 

각 마을은 양방향으로 통행할 수 있는 도로로 연결되어 있는데, 서로 다른 마을 간에 이동할 때는 이 도로를 지나야 합니다. 

도로를 지날 때 걸리는 시간은 도로별로 다릅니다. 

​

현재 1번 마을에 있는 음식점에서 각 마을로 음식 배달을 하려고 합니다. 

각 마을로부터 음식 주문을 받으려고 하는데, N개의 마을 중에서 K 시간 이하로 배달이 가능한 마을에서만 주문을 받으려고 합니다. 

​

다음은 N = 5, K = 3인 경우의 예시입니다.


위 그림에서 1번 마을에 있는 음식점은 [1, 2, 4, 5] 번 마을까지는 3 이하의 시간에 배달할 수 있습니다. 

그러나 3번 마을까지는 3시간 이내로 배달할 수 있는 경로가 없으므로 3번 마을에서는 주문을 받지 않습니다. 

따라서 1번 마을에 있는 음식점이 배달 주문을 받을 수 있는 마을은 4개가 됩니다.

​

​

마을의 개수 N, 각 마을을 연결하는 도로의 정보 road, 음식 배달이 가능한 시간 K가 매개변수로 주어질 때, 

음식 주문을 받을 수 있는 마을의 개수를 return 하도록 solution 함수를 완성해주세요.

​

​

제한사항

- 마을의 개수 N은 1 이상 50 이하의 자연수입니다.

- road의 길이(도로 정보의 개수)는 1 이상 2,000 이하입니다.

- road의 각 원소는 마을을 연결하고 있는 각 도로의 정보를 나타냅니다.

- road는 길이가 3인 배열이며, 순서대로 (a, b, c)를 나타냅니다.

   - a, b(1 ≤ a, b ≤ N, a != b)는 도로가 연결하는 두 마을의 번호이며, 

     c(1 ≤ c ≤ 10,000, c는 자연수)는 도로를 지나는데 걸리는 시간입니다.

   - 두 마을 a, b를 연결하는 도로는 여러 개가 있을 수 있습니다.

   - 한 도로의 정보가 여러 번 중복해서 주어지지 않습니다.

- K는 음식 배달이 가능한 시간을 나타내며, 1 이상 500,000 이하입니다.

- 임의의 두 마을간에 항상 이동 가능한 경로가 존재합니다.

- 1번 마을에 있는 음식점이 K 이하의 시간에 배달이 가능한 마을의 개수를 return 하면 됩니다.

​

입출력 예

N

road

K

result

5

[[1,2,1],[2,3,3],[5,2,2],[1,4,2],[5,3,1],[5,4,2]]

3

4

6

[[1,2,1],[1,3,2],[2,3,2],[3,4,3],[3,5,2],[3,5,3],[5,6,1]]

4

4

입출력 예 설명

입출력 예 #1

문제의 예시와 같습니다.

​

입출력 예 #2

주어진 마을과 도로의 모양은 아래 그림과 같습니다.


1번 마을에서 배달에 4시간 이하가 걸리는 마을은 [1, 2, 3, 5] 4개이므로 4를 return 합니다.

​

​

다른사람풀이1 < 다익스트라 알고리즘 >

https://youngest-programming.tistory.com/518

import java.util.ArrayList;
import java.util.Arrays;
import java.util.PriorityQueue;

class Solution {
    private static ArrayList<Edge>[] edgeList; // 도시 인접리스트
    private static int[] distance; // 1번 도시와 다른 도시간의 최단 경로

    private static void dijkstra() {
        PriorityQueue<Edge> queue = new PriorityQueue<>();
        queue.add(new Edge(1, 0));
        while (!queue.isEmpty()) {
            Edge edge = queue.poll();
            int vertex = edge.vertex;
            int weight = edge.weight;
            if (distance[vertex] < weight) {
                continue;
            }
            for (int i = 0; i < edgeList[vertex].size(); i++) { // 해당 도시와 연결되 있는 도시들 탐색
                int vertex2 = edgeList[vertex].get(i).vertex;
                int weight2 = edgeList[vertex].get(i).weight + weight;
                if (distance[vertex2] > weight2) { // 최단경로 세팅
                    distance[vertex2] = weight2;
                    queue.add(new Edge(vertex2, weight2));
                }
            }
        }
    }

    public int solution(int N, int[][] road, int K) { // N : 마을의 개수, road : 마을번호와 비용, K : 최대 가능한 비용
        int answer = 0;
        //초기화 과정
        edgeList = new ArrayList[N + 1];
        distance = new int[N + 1];
        Arrays.fill(distance, Integer.MAX_VALUE);
        for (int i = 1; i <= N; i++) {
            edgeList[i] = new ArrayList<>();
        }
        for (int i = 0; i < road.length; i++) {
            edgeList[road[i][0]].add(new Edge(road[i][1], road[i][2]));
            edgeList[road[i][1]].add(new Edge(road[i][0], road[i][2]));
        }
        distance[1] = 0; //1번 도시 - 자신 최단 경로 0
        //다익스트라
        dijkstra();
        // 1번마을에서 K 이하 비용인 도시 개수 구하기
        for (int cost : distance) {
            if (cost <= K) {
                answer++;
            }
        }
        return answer;
    }

    private static class Edge implements Comparable<Edge> {
        int vertex; //
        int weight; //배달주문 시간

        public Edge(int vertex, int weight) {
            this.vertex = vertex;
            this.weight = weight;
        }

        @Override
        public int compareTo(Edge o) {
            return weight - o.weight;
        }
    }
}
​

다른사람풀이2 < 플로이드 와샬 알고리즘 >

https://dev-mb.tistory.com/198

class Solution {
    public int solution(int N, int[][] road, int K) {
        int MAX = Integer.MAX_VALUE;
        int[][] adj = new int[N+1][N+1];

        for(int i=1; i<=N; i++){
            for(int j=1; j<=N; j++){
                adj[i][j] = MAX;
            }
        }

        for(int[] r : road){
            int a = r[0];
            int b = r[1];
            int c = r[2];

            adj[a][b] = Integer.min(adj[a][b], c);
            adj[b][a] = Integer.min(adj[b][a], c);
        }

        for(int k=1; k<=N; k++){
            for(int i=1; i<=N; i++){
                for(int j=1; j<=N; j++){
                    if(i==j) continue;
                    if(adj[i][k] != MAX && adj[k][j] != MAX){
                        adj[i][j] = Integer.min(adj[i][j], adj[i][k] + adj[k][j]);
                    }
                }
            }
        }

        int answer = 1;
        for(int i=2; i<=N; i++){
            if(adj[1][i] <= K) answer++;
        }
        return answer;
    }
}
​

다른사람풀이3 < 플로이드 와샬 알고리즘 >

코딩테스트 연습 / Summer/Winter Coding(~2018) / 배달 / 다른 사람의 풀이 / 김정원 , 장종현

class Solution {
    public int solution(int N, int[][] road, int K) {

        int matrix[][] = new int[N][N];
        for(int i=0;i<N;i++)
            for(int j=0;j<N;j++)
                matrix[i][j] = 0;

        for(int i=0;i<road.length;i++) {
            if(matrix[road[i][0]-1][road[i][1]-1] == 0 || 
              matrix[road[i][0]-1][road[i][1]-1] > road[i][2])
                matrix[road[i][0]-1][road[i][1]-1] = 
                    matrix[road[i][1]-1][road[i][0]-1] = road[i][2];
        }

        boolean visits[] = new boolean[N];
        int costs[] = new int[N];
        for(int i=0;i<N;i++) {
            visits[i] = false;
            costs[i] = Integer.MAX_VALUE;
        }

        costs[0] = 0;
        int target = 0;
        while(true) {
            visits[target] = true;
            for(int i=0;i<N;i++)
                if(matrix[target][i] > 0) {
                    if( costs[i] > costs[target] + matrix[target][i])
                        costs[i] = costs[target] + matrix[target][i];
                }

            target = -1;
            for(int i=0;i<N;i++)
                if(!visits[i]) {
                    if(target == -1 || costs[target] > costs[i])
                        target = i;
                }

            if(target == -1)
                break;
        }

        int answer = 0;
        for(int i=0;i<N;i++) {
            if(costs[i] <= K)
                answer++;
        }

        return answer;
    }
}
​

▶ 다익스트라(Dijkstra) 알고리즘이란?

다익스트라(Dijkstra) 알고리즘은 다이나믹 프로그래밍을 활용한 대표적인 최단 경로(Shortest Path) 탐색 알고리즘입니다. 

흔히 인공위성 GPS 소프트웨어 등에서 가장 많이 사용됩니다. 

다익스트라 알고리즘은 특정한 하나의 정점에서 다른 모든 정점으로 가는 최단 경로를 알려줍니다. 

다만 이 때 음의 간선을 포함할 수 없습니다. 

물론 현실 세계에서는 음의 간선이 존재하지 않기 때문에 다익스트라는 현실 세계에 사용하기 매우 적합한 알고리즘 중 하나라고 할 수 있습니다. 

​

다익스트라 알고리즘이 다이나믹 프로그래밍 문제인 이유는 '최단 거리는 여러 개의 최단 거리로 이루어져있기 때문입니다.' 

작은 문제가 큰 문제의 부분 집합에 속해있다고 볼 수 있습니다. 

기본적으로 다익스트라는 하나의 최단 거리를 구할 때 그 이전까지 구했던 최단 거리 정보를 그대로 사용한다는 특징이 있습니다.


 
23. 다익스트라(Dijkstra) 알고리즘
다익스트라(Dijkstra) 알고리즘은 다이나믹 프로그래밍을 활용한 대표적인 최단 경로(Shortest Path) 탐...

blog.naver.com

​

▶ 플로이드 와샬(Floyd Warshall) 알고리즘이란?

다익스트라 알고리즘은 하나의 정점에서 출발했을 때 다른 모든 정점으로의 최단 경로를 구하는 알고리즘입니다. 

하지만 만약에 '모든 정점'에서 '모든 정점'으로 최단 경로를 구하고 싶다면 플로이드 와샬 알고리즘을 아용해야 합니다. 

다익스트라 알고리즘은 가장 적은 비용을 하나씩 선택해야 했다면 플로이드 와샬 알고리즘은 기본적으로 '거쳐가는 정점'을 기준으로 알고리즘을 수행한다는 점에서 그 특징이 있습니다.


24. 플로이드 와샬(Floyd Warshall) 알고리즘
지난 시간에는 다익스트라(Dijkstra) 알고리즘에 대해 학습했습니다. 다익스트라 알고리즘은 하나의 정점...

blog.naver.com

​

​

▶ 플로이드, 다익스트라 알고리즘 비교

​

정점 V개 간선 E개가 있을 때

​

* 용도

플로이드: 각 정점간 최단경로를 구할 때

다익스트라: 시작점으로 부터 나머지 정점까지 최단거리를 구할 때

​

* 공간복잡도

플로이드: V^2

다익스트라: V^2(인접행렬), V+E(인접리스트)

​

* 시간복잡도

플로이드: V^3

다익스트라: V^2(인접행렬), ElogV(인접리스트 + 우선순위 큐) -> VlogV (피보나치힙이나 이진검색트리 사용, 하지만 이런 자료구조들은 상수가 커서 잘 안씀.)

​

* 장단점

- 플로이드 알고리즘 소스가 훨씬 더 간결하다.

- 플로이드 알고리즘은 간선 수가 많으면 다익스트라 알고리즘보다 빠를 수가 있음.

- 시작점으로부터 각 정점까지 최단거리만 구해도 될 때, 보통 다익스트라 알고리즘이 압도적으로 빠름.

- 그래프에 음의 가중치 간선이 있으면(물론 음의 싸이클은 없어야 한다) 다익스트라 알고리즘은 못 쓰지만 플로이드 알고리즘은 사용할 수 있다.

​

* 사용전략

1. 정점간 최단경로를 모두 구해야 한다.

  1-1. 간선이 매우 많다(V^2=E): 플로이드 알고리즘이 우수함.

  1-2. 간선이 많지 않다: 플로이드 알고리즘은 V^3, 다익스트라 알고리즘은 VElogV 경우에 따라 다름

2. 시작점으로부터 나머지 정점까지 최단거리만 구해도 된다.

  2-1. 간선이 매우 많다(V^2=E): 인접행렬을 이용하는 다익스트라 알고리즘을 사용한다.

  2-2. 간선이 많지 않다: 인접리스트를 이용하는 다익스트라 알고리즘을 사용한다.

3. 최단경로를 구하는 것이 전체 시간에 큰 영향을 끼치지 않는다: 소스가 간결한 플로이드 알고리즘을 사용한다.

4. 그래프 간선에 음의 가중치가 존재한다: 다익스트라 알고리즘은 무조건 사용하지 못한다. 다른 최단경로 알고리즘과 비교한다.

​

 
플로이드, 다익스트라 알고리즘 비교
정점 V개 간선 E개가 있을 때 용도 플로이드: 각 정점간 최단경로를 구할 때 다익스트라: 시작점으로 부터 나머지 정점까지 최단거리를 구할 때 공간복잡도 플로이드: V^2 다익스트라: V^2(인접행렬), V+E(인접리..

codedoc.tistory.com
