문제 설명

한자리 숫자가 적힌 종이 조각이 흩어져있습니다. 흩어진 종이 조각을 붙여 소수를 몇 개 만들 수 있는지 알아내려 합니다.

각 종이 조각에 적힌 숫자가 적힌 문자열 numbers가 주어졌을 때, 종이 조각으로 만들 수 있는 소수가 몇 개인지 return 하도록 solution 함수를 완성해주세요.

​

제한사항

numbers는 길이 1 이상 7 이하인 문자열입니다.

numbers는 0~9까지 숫자만으로 이루어져 있습니다.

013은 0, 1, 3 숫자가 적힌 종이 조각이 흩어져있다는 의미입니다.

​

입출력 예

numbers

return

17

3

011

2

입출력 예 설명

예제 #1

[1, 7]으로는 소수 [7, 17, 71]를 만들 수 있습니다.

예제 #2

[0, 1, 1]으로는 소수 [11, 101]를 만들 수 있습니다.

11과 011은 같은 숫자로 취급합니다.

​

출처

* 순열 : n개의 값 중에서 r개의 숫자를 모든 순서대로 뽑는 경우

​

예를 들어 [1, 2, 3] 이라는 3 개의 배열에서 2 개의 숫자를 뽑는 경우는

[1, 2] [1, 3] [2, 1] [2, 3] [3, 1] [3, 2]

이렇게 6 개가 됩니다.

​

 
순열 Permutation (Java)
순열 연습 문제 순열이란 n  개의 값 중에서 r  개의 숫자를 모든 순서대로 뽑는 경우를 말합니다. 
예를 들어 [1, 2, 3]  이라는 3 개의 배열에서 2 개의 숫자를 뽑는 경우는 [1, 2] [1, 3] [2, 1] [2, 3] [3,..
bcp0109.tistory.com

​

다른사람풀이1

코딩테스트 연습 / 완전탐색 / 소수 찾기 / 다른 사람의 풀이 / 정인섭 , 테스트 , - , Tim J. Lee , 김여천 외 2 명

import java.util.HashSet;
class Solution {
    public int solution(String numbers) {
        HashSet<Integer> set = new HashSet<>();
        permutation("", numbers, set);
        int count = 0;
        while(set.iterator().hasNext()){
            int a = set.iterator().next();
            set.remove(a);
            if(a==2) count++;
            if(a%2!=0 && isPrime(a)){
                count++;
            }
        }        
        return count;
    }

    public boolean isPrime(int n){
        if(n==0 || n==1) return false;
        for(int i=3; i<=(int)Math.sqrt(n); i+=2){
            if(n%i==0) return false;
        }
        return true;
    }

        public void permutation(String prefix, String str, HashSet<Integer> set) {
        int n = str.length();
        //if (n == 0) System.out.println(prefix);
        if(!prefix.equals("")) set.add(Integer.valueOf(prefix));
        for (int i = 0; i < n; i++)
          permutation(prefix + str.charAt(i), str.substring(0, i) + str.substring(i+1, n), set);

    }

}
​

다른사람풀이2

코딩테스트 연습 / 완전탐색 / 소수 찾기 / 다른 사람의 풀이 / 박재현 , -

import java.util.TreeSet;

class Solution {
    TreeSet<Integer> ts = new TreeSet<>();

    public int solution(String numbers) {
        int answer = 0,check,i;
        func("",numbers);

        for(int num:ts){
            check=0;
            for(i=2;i<num;i++){
                if(num%i==0)
                    break;
            }
            if(i==num)
                answer++;
        }
        return answer;
    }

    public void func(String s, String number) {
        if (number.length() == 0) {
            if(!s.equals(""))
                ts.add(Integer.parseInt(s));
        } else {
            for (int i = 0; i < number.length(); i++) 
                func(s + number.charAt(i), number.substring(0, i) + number.substring(i + 1, number.length()));
            for (int i = 0; i < number.length(); i++) 
                func(s , number.substring(0, i) + number.substring(i + 1, number.length()));
        }
    }
}
​

다른사람풀이3

코딩테스트 연습 / 완전탐색 / 소수 찾기 / 다른 사람의 풀이 /  -

import java.util.*;
class Solution {
    private static Set<Integer> set = new HashSet<>();

    public static boolean check(int x) {
        if (x == 0 || x == 1) {
            return false;
        }else {
            boolean flag = true;
            for (int i=2; i<x; i++) {
                if (!flag) {
                    break;
                }else if(x%i == 0){
                    flag = false;
                }
            }
            return flag;
        }
    }

    public static void dfs(ArrayList<String> arr,String s, int count, int number) {

        count++;
        if (count > number) {
            return;
        }
        for (int i=0; i<arr.size(); i++) {
            set.add(Integer.parseInt(s+arr.get(0)));
            String temp = arr.get(0);
            arr.remove(0);
            dfs(arr,s+temp,count,number);
            arr.add(temp);

        }
    }

    public static int solution(String numbers) {
        ArrayList<String> arr = new ArrayList<>();

        for (String s:numbers.split("")) {
            arr.add(s);
        };

        int length = numbers.length();
        dfs(arr,"",0,length);

        int answer = 0;
        for (int i: set) {
            if (check(i)) {
                answer++;
            }
        }
        return answer;

    }
}
​
