문제 설명

프렌즈대학교 컴퓨터공학과 조교인 제이지는 네오 학과장님의 지시로, 

학생들의 인적사항을 정리하는 업무를 담당하게 되었다.

​

그의 학부 시절 프로그래밍 경험을 되살려, 모든 인적사항을 데이터베이스에 넣기로 하였고, 

이를 위해 정리를 하던 중에 후보키(Candidate Key)에 대한 고민이 필요하게 되었다.

​

후보키에 대한 내용이 잘 기억나지 않던 제이지는, 

정확한 내용을 파악하기 위해 데이터베이스 관련 서적을 확인하여 아래와 같은 내용을 확인하였다.

- 관계 데이터베이스에서 릴레이션(Relation)의 튜플(Tuple)을 유일하게 식별할 수 있는 속성(Attribute) 또는 속성의 집합 중,

   다음 두 성질을 만족하는 것을 후보 키(Candidate Key)라고 한다.

    - 유일성(uniqueness) : 릴레이션에 있는 모든 튜플에 대해 유일하게 식별되어야 한다.

    - 최소성(minimality) : 유일성을 가진 키를 구성하는 속성(Attribute) 중 하나라도 제외하는 경우 유일성이 깨지는 것을 의미

                                         한다. 즉, 릴레이션의 모든 튜플을 유일하게 식별하는 데 꼭 필요한 속성들로만 구성되어야 한다.

​

제이지를 위해, 아래와 같은 학생들의 인적사항이 주어졌을 때, 후보 키의 최대 개수를 구하라.


위의 예를 설명하면, 학생의 인적사항 릴레이션에서 모든 학생은 각자 유일한 "학번"을 가지고 있다. 

따라서 "학번"은 릴레이션의 후보 키가 될 수 있다.

그다음 "이름"에 대해서는 같은 이름("apeach")을 사용하는 학생이 있기 때문에, "이름"은 후보 키가 될 수 없다. 

그러나, 만약 ["이름", "전공"]을 함께 사용한다면 릴레이션의 모든 튜플을 유일하게 식별 가능하므로 후보 키가 될 수 있게 된다.

물론 ["이름", "전공", "학년"]을 함께 사용해도 릴레이션의 모든 튜플을 유일하게 식별할 수 있지만, 최소성을 만족하지 못하기 때문에 후보 키가 될 수 없다.

따라서, 위의 학생 인적사항의 후보키는 "학번", ["이름", "전공"] 두 개가 된다.

​

​

릴레이션을 나타내는 문자열 배열 relation이 매개변수로 주어질 때, 

이 릴레이션에서 후보 키의 개수를 return 하도록 solution 함수를 완성하라.

​

​

제한사항

- relation은 2차원 문자열 배열이다.

- relation의 컬럼(column)의 길이는 1 이상 8 이하이며, 각각의 컬럼은 릴레이션의 속성을 나타낸다.

- relation의 로우(row)의 길이는 1 이상 20 이하이며, 각각의 로우는 릴레이션의 튜플을 나타낸다.

- relation의 모든 문자열의 길이는 1 이상 8 이하이며, 알파벳 소문자와 숫자로만 이루어져 있다.

- relation의 모든 튜플은 유일하게 식별 가능하다.(즉, 중복되는 튜플은 없다.)

​

입출력 예

relation

result

[["100","ryan","music","2"],["200","apeach","math","2"],["300","tube","computer","3"],["400","con","computer","4"],["500","muzi","music","3"],["600","apeach","music","2"]]

2

입출력 예 설명

입출력 예 #1

문제에 주어진 릴레이션과 같으며, 후보 키는 2개이다.





[카카오 문제 풀이] - 2019 카카오 신입 공채 1차 코딩 테스트 문제 해설

​

가능한 모든 어트리뷰트의 조합을 만들고, 이 조합에서 조건을 만족시키는 조합만 추려야 하는 문제입니다.

​

dfs 또는 bit 를 이용한 집합 표현을 이용하여 어트리뷰트의 모든 부분 집합을 만들어냅니다.

만들어지는 각 부분 집합을 이용해서 중복 튜플이 있는지 검사합니다. 만약 중복 튜플이 없다면, 이 부분 집합을 슈퍼 키 집합(유일성을 만족하는 키들의 집합)에 포함시킵니다.

​

슈퍼 키 집합을 구한 후, 여기서 최소성을 만족하는 키들을 선택하여 후보 키 집합을 만들 수 있습니다.

만약 어떤 슈퍼 키 X에 대해 X의 부분집합인 슈퍼 키 Y가 없다면 (X ⊃ Y인 슈퍼 키 Y가 없다면) X는 후보 키로 선택될 수 있습니다.

​

예를 들어 어떤 릴레이션의 어트리뷰트가 ABCDE 이고, 슈퍼 키 집합이 {A, AB, BC, BCE, BDE, …} 라고 해봅시다.

 - A 는 후보 키로 선택될 수 있습니다.

 - AB 는 AB ⊃ A 이므로 후보 키가 될 수 없습니다.

 - BC 는 부분집합이 되는 다른 슈퍼 키가 없으므로 후보 키로 선택됩니다.

 - BCE 는 BCE ⊃ BC 이므로 후보 키가 될 수 없습니다.

 - BDE 는 부분집합이 되는 다른 슈퍼 키가 없으므로 후보 키로 선택됩니다.

 - …

따라서 이 경우 후보 키 집합은 {A, BC, BDE, …} 가 됩니다.

가능한 모든 조합을 만드는 부분 때문인지 앞쪽에 배치된 문제임에도 많은 지원자들이 어려움을 겪은 것으로 보입니다.



​

다른사람풀이1

https://dundung.tistory.com/124

import java.util.*;
 
public class CandidateKey {
    static List<Integer> list = new ArrayList<>();
 
    public static int solution(String[][] relation) {
        dfs(relation, "", -1);
        int answer = 0;
        Collections.sort(list);
        while(!list.isEmpty()) {
            int v = list.remove(0);
            answer++;
            Iterator<Integer> it = list.iterator();
            while(it.hasNext()) {
                int next = it.next();
                if((next&v) == v) {
                    it.remove();
                }
            }
        }
        return answer;
 
    }

    public static void dfs(String[][] relation, String s, int idx) {
        if(idx == relation[0].length-1) {
            if(check(relation, s)) {
                int now = 0;
                for(int i=0; i<s.length(); i++) {
                    now |= 1<<(s.charAt(i)-'0');
                }
                list.add(now);
            }
            return;
        }
        dfs(relation, s+(idx+1), idx+1);
        dfs(relation, s, idx+1);
    }
    
    public static boolean check(String[][] relation, String s) {
        Set<String> set = new TreeSet<>();
        for(int i=0; i<relation.length; i++) {
            StringBuilder sb = new StringBuilder();
            for(int j=0; j<s.length(); j++) {
                sb.append(relation[i][s.charAt(j)-'0']);
            }
            set.add(sb.toString());
        }
        if(set.size()==relation.length) return true;
        return false;
    }
}
​

다른사람풀이2

https://dundung.tistory.com/124

import java.util.*;
 
public class CandidateKey_ver2 {
    
    public static int solution(String[][] relation) {
        int n = relation.length;
        int m = relation[0].length;
        List<Integer> ans = new ArrayList<>();
        for(int i=1; i<=(1<<m)-1; i++) { //1부터 전체집합 (1<<m)-1까지
            Set<String> set = new HashSet<>();
            for(int j=0; j<n; j++) {
                StringBuilder sb = new StringBuilder();
                for(int k=0; k<m; k++) {
                    if((i&(1<<k)) > 0) { //정수 k가 비트마스크i에 포함되어있다면        
                        sb.append(relation[j][k]);
                    }                }
                set.add(sb.toString());
            }
            if(set.size()==n && check(ans, i)) {
                ans.add(i);
            }
        }
        return ans.size();
    }
    public static boolean check(List<Integer> ans, int now) { //최소성검사
        for(int i=0; i<ans.size(); i++) {
            if((ans.get(i)&now)==ans.get(i)) {
                return false;
            }
        }
        return true;
    }
}
이 두 코드를 설명하신 내용(출처 블로그에 기재되어있음) 중에서

​

풀이1은 DFS를 사용한 방법이라고 하시고

풀이2는 DFS를 사용하지 않은 방법이라고 하시면서 

풀이1,2 모두 비트마스크를 썼다고 하셨는데, 

​

DFS와 비트마스크가 뭔지 몰라서 찾아봤다~

​

​

​

* DFS(깊이 우선 탐색, Depth-First Search)

: 루트 노드(혹은 다른 임의의 노드)에서 시작해서 다음 분기(branch)로 넘어가기 전에 해당 분기를 완벽하게 탐색하는 방법


그리고 bfs라는 것도 있다는데, 이건 루트 노드(혹은 다른 임의의 노드)에서 시작해서 인접한 노드를 먼저 탐색하는 방법이라고 한다!

​

* 출처사이트

[알고리즘] 깊이 우선 탐색(DFS)이란 - Heee's Development Blog
Step by step goes a long way.

gmlwjd9405.github.io


[알고리즘] 너비 우선 탐색(BFS)이란 - Heee's Development Blog
Step by step goes a long way.

gmlwjd9405.github.io

​

​

* 비트마스크

: 컴퓨터의 언어인 이진수를 사용하면 연산이 빠른점을 이용해 어떠한 정수를 이진수 형태로 표현하여 자료구조로써 사용하는 기법

{ 0, 1, 2, 3, 4 } => 11111 

{ 1, 2, 3, 4 }    => 11110

{ 1, 2, 4 }       => 10110

{ 2, 4 }          => 10100 

{ 1 }             => 00010 


각 요소는 인덱스처럼 표현. 

즉, 집합 i 번째 요소가 부분집합에 존재한다면 1 을 의미하고, 그렇지 않으면 0 을 의미

​

​

- 비트 연산자

1. AND 연산자( & ) : 두 정수를 한 비트씩 비교하면서 양쪽 비트가 모두 1이면 결과도 1 이고 나머지는 0 을 반환
예) 101 & 100 = 100

2. OR 연산자( | ) : 두 정수를 한 비트씩 비교하면서 양쪽 비트 중 하나라도 1이면 결과가 1 이고 나머지는 0 을 반환
예) 101 | 100 = 101

3. XOR 연산자 ( ^ ) : 두 정수를 한 비트씩 비교하면서 양쪽 비트가 서로 다르면 1 , 같으면 0을 반환
예) 101^100 = 010

4. NOT 연산자 ( ~ ) : 정수 하나의 각 비트를 1 이면 0 , 0 이면 1 로 바꾸는 연산
예) ~101 = 010

5. 쉬프트 연산자 ( a << b ) : 정수 a 를 왼쪽으로 b 비트 만큼 이동
예) 0000101 << 3 = 0101000

6. 쉬프트 연산자 ( a >> b ) : 정수 a 를 오른쪽으로 b 비트 만큼 이동
예) 111000 >> 3 = 000111

7. 쉬프트 연산자 ( a >>> b ) : 정수 a를 오른쪽으로 b 비트 만큼 이동 한뒤 왼쪽에는 모두 0 으로 채움
예) 11110000 >>> 3 = 00011110

​

- 비트마스크를 이용한 구현

// N개의 꽉 찬 집합 (N이 5인 경우, 꽉찬 집합은 11111)
int set = (1<<N)-1;

// p번 째 원소 추가 
set |=(1<<p);

// 원소의 포함 여부
if(set &(1<<p)){ } // set에 p가 포함되어 있는 경우 ~

// 원소의 삭제
set &= ~(1<<p); 

// 원소의 토글 (toggle: 해당 비트가 켜져있으면 끄고, 꺼져있으면 키는 것~)
set ^=(1<<p);

// 집합 연산
int add = (a|b);// a와 b의 합집합
int intersection = (a&b); // a와 b의 교집합
int removed = (a&~b); // a에서 b를 뺀 차집합
int toggled = (a^b); // aUb - a∩b 

// 모든 부분 집합 순회하기
for(int subset=set; subset; (subset-1)&set){ } // subset: 부분집합
​

​

* 출처사이트
 
[알고리즘] 비트마스크란
컴퓨터의 언어는 기계어라고 불리는 이진수이다. 이진수는 독일의 철학자 라이프니츠가 발명한 수 체계이다. 컴퓨터가 이진수를 사용하는 이유는 무엇일까? 그 이유는 전기신호로 작동하는 컴퓨터에게 전기가 통..

noahlogs.tistory.com


비트마스크(BitMask) 는 무엇인가? :: 마이구미
이 글은 비트마스크(BitMask) 기법에 대해 다룬다. 특정 알고리즘이 아닌, bit 를 활용한 테크닉이라고 할 수 있다. bit 는 low level 이 아닌 경우에는 크게 비트를 다룰 일은 없어보이지만, 분명 이해가 필요한..

mygumi.tistory.com

 
비트마스크(bit mask)
컴퓨터의 모든 CPU는 이진수를 이용해 모든 자료를 표현합니다. 이진수를 이용해 연산을 하면 매우 빠르...

m.blog.naver.com
