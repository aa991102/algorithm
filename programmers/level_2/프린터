문제 설명

일반적인 프린터는 인쇄 요청이 들어온 순서대로 인쇄합니다. 그렇기 때문에 중요한 문서가 나중에 인쇄될 수 있습니다. 이런 문제를 보완하기 위해 중요도가 높은 문서를 먼저 인쇄하는 프린터를 개발했습니다. 이 새롭게 개발한 프린터는 아래와 같은 방식으로 인쇄 작업을 수행합니다.

​

1. 인쇄 대기목록의 가장 앞에 있는 문서(J)를 대기목록에서 꺼냅니다. 

2. 나머지 인쇄 대기목록에서 J보다 중요도가 높은 문서가 한 개라도 존재하면 J를 대기목록의 가장 마지막에 넣습니다. 

3. 그렇지 않으면 J를 인쇄합니다. 

​

예를 들어, 4개의 문서(A, B, C, D)가 순서대로 인쇄 대기목록에 있고 중요도가 2 1 3 2 라면 C D A B 순으로 인쇄하게 됩니다.

내가 인쇄를 요청한 문서가 몇 번째로 인쇄되는지 알고 싶습니다. 위의 예에서 C는 1번째로, A는 3번째로 인쇄됩니다.

​

현재 대기목록에 있는 문서의 중요도가 순서대로 담긴 배열 priorities와 내가 인쇄를 요청한 문서가 현재 대기목록의 어떤 위치에 있는지를 알려주는 location이 매개변수로 주어질 때, 내가 인쇄를 요청한 문서가 몇 번째로 인쇄되는지 return 하도록 solution 함수를 작성해주세요.

​

제한사항

현재 대기목록에는 1개 이상 100개 이하의 문서가 있습니다.

인쇄 작업의 중요도는 1~9로 표현하며 숫자가 클수록 중요하다는 뜻입니다.

location은 0 이상 (현재 대기목록에 있는 작업 수 - 1) 이하의 값을 가지며 대기목록의 가장 앞에 있으면 0, 두 번째에 있으면 1로 표현합니다.

​

입출력 예

priorities

location

return

[2, 1, 3, 2]

2

1

[1, 1, 9, 1, 1, 1]

0

5

입출력 예 설명

예제 #1

문제에 나온 예와 같습니다.

​

예제 #2

6개의 문서(A, B, C, D, E, F)가 인쇄 대기목록에 있고 중요도가 1 1 9 1 1 1 이므로 C D E F A B 순으로 인쇄합니다.





다른사람풀이1 < Queue >

코딩테스트 연습 / 스택/큐 / 프린터 / 다른 사람의 풀이 / - , - , 이민아 , - , Chiseunglee 외 2 명

import java.util.*;

class Solution {
    public int solution(int[] priorities, int location) {
        int answer = 0;
        int l = location;

        Queue<Integer> que = new LinkedList<Integer>();
        for(int i : priorities){
            que.add(i);
        }

        Arrays.sort(priorities);
        int size = priorities.length-1;

        while(!que.isEmpty()){
            Integer i = que.poll();
            if(i == priorities[size - answer]){
                answer++;
                l--;
                if(l <0)
                    break;
            }else{
                que.add(i);
                l--;
                if(l<0)
                    l=que.size()-1;
            }
        }

        return answer;
    }
}

Queue는 먼저 들어온 데이터 순으로 처리하는 자료구조를 말한다!

FIFO(First In First Out)구조~
​

자바에서 큐는 LinkedList를 활용해서 생성!!

Queue<Element> queue = new LinkedList<>(); 

이런 식으로 선언하면 된다.

기본적인 함수를 보자면

① add(value), offer(value) : 큐에 값을 추가
   - add()의 경우, 삽입에 성공하면 true를, 큐에 여유공간이 없어 실패하면 IllegalStateException 발생
② poll() : 큐의 첫번째 값을 반환하고 삭제
③ peek() : 큐의 첫번째 값 참조
④ remove() : 큐의 첫번째 값 삭제
⑤ clear() : 큐의 모든 요소 제거

​
[Java] 자바 Queue 클래스 사용법 & 예제 총정리
Queue란? Queue의 사전적 의미는 무엇을 기다리는 사람, 차량 등의 줄 혹은 줄을 서서 기다리는 것을 의미하는데 이처럼 줄을 지어 순서대로 처리되는 것이 큐라는 자료구조입니다. 큐는 데이터를 일시적으로 쌓아..
coding-factory.tistory.com

​

다른사람풀이2 < List >

코딩테스트 연습 / 스택/큐 / 프린터 / 다른 사람의 풀이 / - , - , -

import java.util.ArrayList;
import java.util.List;

class Solution {
    public int solution(int[] priorities, int location) {
    List<Integer> list = new ArrayList<>();
    for (int priority : priorities) {
      list.add(priority);
    }

    int turn = 1;
    while (!list.isEmpty()) {
      final Integer j = list.get(0);
      if (list.stream().anyMatch(v -> j < v)) {
        list.add(list.remove(0));
      } else {
        if (location == 0) {
          return turn;
        }
        list.remove(0);
        turn++;
      }

      if (location > 0) {
        location--;
      } else {
        location = list.size() - 1;
      }
    }

    throw new IllegalArgumentException();
  }
}
​

​

다른사람풀이3 < Array >

코딩테스트 연습 / 스택/큐 / 프린터 / 다른 사람의 풀이 / - 

class Solution {
    public int solution(int[] priorities, int location) {
        int answer = 0;
        int max = 0;
        int len = priorities.length;

        while (true) {
            answer++;
            max = 0;
            int maxIndex = 0;

            // max 찾기
            for (int i = 0; i < len; i++) {
                if (max < priorities[i]) {
                    max = priorities[i];
                    maxIndex = i;
                }
            }

            // 처음값이 최대값이 아니라면 회전하기 - location 값 변경
            if (maxIndex != 0) {
                int[] tempArr = new int[maxIndex];

                for (int i = 0; i < maxIndex; i++) {
                    tempArr[i] = priorities[i];
                }

                int j;
                for (j = 0; j+maxIndex < len; j++) {
                    priorities[j] = priorities[j+maxIndex];
                }

                for (int i = 0; i < maxIndex; i++) {
                    priorities[j++] = tempArr[i];
                }

                location -= maxIndex;

                if (location < 0) {
                    location += len;
                }

            }

            // pop!!

            if (location == 0)
                break;

            // for (int i : priorities) {
            // System.out.print(i + " ");
            // }
            // System.out.println();

            for (int i = 1; i < len; i++) {
                priorities[i - 1] = priorities[i];
            }
            // for (int i = 1; i < len; i++) {
            //  System.out.print(priorities[i] + " ");
            // }
            // System.out.println();
            location--;
            len--;
        }

        return answer;
    }
}
