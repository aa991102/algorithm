파일명 정렬

세 차례의 코딩 테스트와 두 차례의 면접이라는 기나긴 블라인드 공채를 무사히 통과해 카카오에 입사한 무지는 파일 저장소 서버 관리를 맡게 되었다.

​

저장소 서버에는 프로그램의 과거 버전을 모두 담고 있어, 이름 순으로 정렬된 파일 목록은 보기가 불편했다. 

파일을 이름 순으로 정렬하면 나중에 만들어진 ver-10.zip이 ver-9.zip보다 먼저 표시되기 때문이다.

​

버전 번호 외에도 숫자가 포함된 파일 목록은 여러 면에서 관리하기 불편했다. 

예컨대 파일 목록이 ["img12.png", "img10.png", "img2.png", "img1.png"]일 경우, 일반적인 정렬은 ["img1.png", "img10.png", "img12.png", "img2.png"] 순이 되지만, 숫자 순으로 정렬된 ["img1.png", "img2.png", "img10.png", img12.png"] 순이 훨씬 자연스럽다.

​

무지는 단순한 문자 코드 순이 아닌, 파일명에 포함된 숫자를 반영한 정렬 기능을 저장소 관리 프로그램에 구현하기로 했다.

​

소스 파일 저장소에 저장된 파일명은 100 글자 이내로, 영문 대소문자, 숫자, 공백(" "), 마침표("."), 빼기 부호("-")만으로 이루어져 있다. 

​

파일명은 영문자로 시작하며, 숫자를 하나 이상 포함하고 있다.

​

파일명은 크게 HEAD, NUMBER, TAIL의 세 부분으로 구성된다.

 - HEAD는 숫자가 아닌 문자로 이루어져 있으며, 최소한 한 글자 이상이다.

 - NUMBER는 한 글자에서 최대 다섯 글자 사이의 연속된 숫자로 이루어져 있으며, 앞쪽에 0이 올 수 있다. 

    0부터 99999 사이의 숫자로, 00000이나 0101 등도 가능하다.

 - TAIL은 그 나머지 부분으로, 여기에는 숫자가 다시 나타날 수도 있으며, 아무 글자도 없을 수 있다.

파일명

HEAD

NUMBER

TAIL

foo9.txt

foo

9

.txt

foo010bar020.zip

foo

010

bar020.zip

F-15

F-

15

(빈 문자열)

파일명을 세 부분으로 나눈 후, 다음 기준에 따라 파일명을 정렬한다.

  - 파일명은 우선 HEAD 부분을 기준으로 사전 순으로 정렬한다. 이때, 문자열 비교 시 대소문자 구분을 하지 않는다. 

     MUZI와 muzi, MuZi는 정렬 시에 같은 순서로 취급된다.

 - 파일명의 HEAD 부분이 대소문자 차이 외에는 같을 경우, NUMBER의 숫자 순으로 정렬한다. 

     9 < 10 < 0011 < 012 < 13 < 014 순으로 정렬된다. 숫자 앞의 0은 무시되며, 012와 12는 정렬 시에 같은 같은 값으로 처리된다.

 - 두 파일의 HEAD 부분과, NUMBER의 숫자도 같을 경우, 원래 입력에 주어진 순서를 유지한다. 

     MUZI01.zip과 muzi1.png가 입력으로 들어오면, 정렬 후에도 입력 시 주어진 두 파일의 순서가 바뀌어서는 안 된다.

​

무지를 도와 파일명 정렬 프로그램을 구현하라.

​

입력 형식

입력으로 배열 files가 주어진다.

 - files는 1000 개 이하의 파일명을 포함하는 문자열 배열이다.

 - 각 파일명은 100 글자 이하 길이로, 영문 대소문자, 숫자, 공백(" "), 마침표("."), 빼기 부호("-")만으로 이루어져 있다. 

    파일명은 영문자로 시작하며, 숫자를 하나 이상 포함하고 있다.

 - 중복된 파일명은 없으나, 대소문자나 숫자 앞부분의 0 차이가 있는 경우는 함께 주어질 수 있다.   

    (muzi1.txt, MUZI1.txt, muzi001.txt, muzi1.TXT는 함께 입력으로 주어질 수 있다.)

​

출력 형식

위 기준에 따라 정렬된 배열을 출력한다.

​

입출력 예제

입력: ["img12.png", "img10.png", "img02.png", "img1.png", "IMG01.GIF", "img2.JPG"]

출력: ["img1.png", "IMG01.GIF", "img02.png", "img2.JPG", "img10.png", "img12.png"]

​

입력: ["F-5 Freedom Fighter", "B-50 Superfortress", "A-10 Thunderbolt II", "F-14 Tomcat"]

출력: ["A-10 Thunderbolt II", "B-50 Superfortress", "F-5 Freedom Fighter", "F-14 Tomcat"]



=================================================================================

카카오 문제 풀이  카카오 신입 공채 3차 코딩 테스트 문제 해설

​

코딩의 기초 문제라고 할 수 있는 정렬 문제입니다. 하지만 조건은 꽤나 복합적입니다. 

파일명을 세 부분으로 나눠, 첫 부분은 대소문자 구분 없이Case Insensitive, 다음 부분은 숫자 값에 따라Numerical 정렬해야 합니다. 

또한 정렬 기준에 따라 차이가 없다면 원래 입력에서 주어진 순서를 유지하는 안정 정렬Stable Sort을 사용해야 합니다. 

정렬 문제를 풀 때 한 번씩은 다 해보셨죠? 

그런데 이걸 어떻게 꿰어서 하나의 프로그램으로 만들어야 할지 어려워하시더군요.

​

여러 정렬 알고리즘을 배우셨을 텐데요. 이 중에 안정 정렬이 어떤 건지 알고 계신가요? 

빠른 정렬 알고리즘으로 가장 유명한 퀵 정렬Quick Sort는 아쉽게도 안정 정렬이 아닙니다. 

효율이 좋은 O(n log n) 복잡도의 정렬 알고리즘 중에는 병합 정렬Merge Sort 등 일부 알고리즘은 안정 정렬이고요. 

효율이 떨어지는 O(n2) 복잡도의 알고리즘 중 버블 정렬Bubble Sort과 삽입 정렬Insertion Sort은 모두 안정 정렬입니다. 

여러분이 아는 다른 알고리즘도 안정 정렬인지 아닌지 확인해보세요. 

알고리즘의 구현 방법에 따라 같은 알고리즘이라도 안정 정렬이거나 아닐 수도 있습니다.

​

정렬 문제가 워낙 많이 쓰이므로 많은 프로그래밍 언어에서 정렬 알고리즘을 기본 함수로 제공하고 있습니다. 

자신이 사용하는 프로그래밍 언어에서 안정 정렬 알고리즘을 제공해주는지 알아두시는 게 좋습니다. 

코딩 테스트에서 사용된 프로그래밍 언어 중 C++과 Python에는 안정 정렬이 있고, 

Java와 JavaScript, Swift에는 안정 정렬이 없습니다. 

PHP 언어는 숫자 값을 고려해 정렬하는 natsort()를 기본 함수로 제공하기도 합니다. (아쉽게도 문제 3과 조건이 달라 그대로는 쓸 수 없지만요.)

​

기본 정렬 함수가 안정 정렬을 지원하지 않거나, 이 문제처럼 비교 조건이 까다로운 경우에는 decorate-sort-undecorate 패턴을 이용해서 쉽게 해결할 수도 있답니다.

​

이 문제의 정답률은 66.95%였습니다. 언어별로는 C++과 Python 사용자들이 힘들어했습니다. 안정 정렬을 지원해주는 언어인데 도움이 안 되었나 봅니다.

=================================================================================


내 풀이

// 다중 조건 정렬 참고 사이트 - https://chickenpaella.tistory.com/24
import java.util.*;
class Solution {
    
    public String[] solution(String[] files) {
        ArrayList<File> list = new ArrayList<>();
        
        for(int i=0; i<files.length; i++){
            int start_of_num = 0;
            int end_of_num = 0;
            
            for(int j=0; j<files[i].length(); j++){
                char ch = files[i].charAt(j);

                if(start_of_num==0 && ch>='0' && ch<='9'){
                    start_of_num = j;
                    continue;
                }
                
                if(start_of_num>0 && (ch<'0' || ch>'9')){
                    end_of_num = j;
                    break;
                }
            }
            if(end_of_num==0) end_of_num = files[i].length();
            
            list.add(new File(files[i].substring(0,start_of_num), 
                              files[i].substring(start_of_num, end_of_num), 
                              files[i].substring(end_of_num)));
        }
        
        Collections.sort(list, new FileCompare());
        
        String[] answer = new String[list.size()];
        
        for(int i=0; i<list.size(); i++){
            File file = list.get(i);
            answer[i] = file.head+file.number+file.tail;
        }
    
        return answer;
    }
}

class File {
    String head;
    String number;
    String tail;
    
    File(String head, String number, String tail) {
        this.head = head;
        this.number = number;
        this.tail = tail;
    }
}

class FileCompare implements Comparator<File> {
    int ret = 0;
    
    @Override
    public int compare(File f1, File f2) {
        if(f1.head.compareToIgnoreCase(f2.head) < 0) {
            ret = -1;
        }else if(f1.head.compareToIgnoreCase(f2.head) == 0) {
            int num1 = Integer.parseInt(f1.number);
            int num2 = Integer.parseInt(f2.number);
            
            if(num1 == num2) {
                ret = 0;
            }else if(num1< num2) {
                ret = -1;
            }else if(num1 > num2) {
                ret = 1;
            }
        }else if(f1.head.compareToIgnoreCase(f2.head) > 0) {
            ret = 1;
        }
        
        return ret;
    }
}
오우 정렬하는거...

Comparable이랑 Comparator 인터페이스를 이용해서 코드를 짜본적이 없어서 열심히 찾아봤다.

구글의 도움을 받았지만, 스스로의 힘으로 풀었단 사실에 만족!!!

​

16.15 ~ 51.81ms

​

​

다른사람풀이1

코딩테스트 연습 / 2018 KAKAO BLIND RECRUITMENT / [3차] 파일명 정렬 / 다른 사람의 풀이 / - , 탈퇴한 사용자

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

class Solution {
  public String[] solution(String[] files) {
        List<FileName> fileNameList = new ArrayList<>();
        String head, number, tail;

        for (int i = 0; i < files.length; i++) {
            String s = files[i];
            Pattern p = Pattern.compile("[0-9]+");
            Matcher m = p.matcher(s);
            if (m.find()){
                number = m.group();
                int numberStartIndex = s.indexOf(number);
                head = s.substring(0, numberStartIndex);
                int numberEndIndex = numberStartIndex + number.length() - 1;
                if (numberEndIndex + 1 > s.length() - 1) {
                    tail = "";
                } else {
                    tail = s.substring(numberEndIndex + 1);
                }
                fileNameList.add(new FileName(head, number, tail));
            }
        } 

        fileNameList.sort(Comparator.comparing(FileName::getHead).thenComparing(Comparator.naturalOrder()));

        String[] answer = new String[files.length];
        for (int i = 0; i < files.length; i++) {
            answer[i] = fileNameList.get(i).toString();
        }
        return answer;
    }

    public static class FileName implements Comparable<FileName> {
        String head;
        String number;
        String tail;

        public FileName(String head, String number, String tail) {
            this.head = head;
            this.number = number;
            this.tail = tail;
        }

        public String getHead() {
            return head.toUpperCase();
        }

        @Override
        public String toString() {
            return head + number + tail;
        }

        @Override
        public int compareTo(FileName o) {
            int mine = Integer.parseInt(this.number);
            int yours = Integer.parseInt(o.number);
            return mine - yours;
        }
    }
}
16.71 ~ 93.93ms

​

​

다른사람풀이2

코딩테스트 연습 / 2018 KAKAO BLIND RECRUITMENT / [3차] 파일명 정렬 / 다른 사람의 풀이 / Nick H

import java.util.*;
class Solution {
  public String[] solution(String[] files) {
      Arrays.sort(files, new StrCmp());
      return files;
  }
  private class StrCmp implements Comparator<String> {
      @Override
      public int compare(String s1, String s2) {
          s1 = s1.toLowerCase();
          s2 = s2.toLowerCase();
          int i = 0;
          int j = 0;

          while (i < s1.length() && !Character.isDigit(s1.charAt(i))) ++i;
          while (j < s2.length() && !Character.isDigit(s2.charAt(j))) ++j;

          int cmp1 = s1.substring(0, i).compareTo(s2.substring(0, j));

          if (cmp1 != 0) return cmp1;

          int startI = i;
          int startJ = j;

          while (i < s1.length() && Character.isDigit(s1.charAt(i))) ++i;
          while (j < s2.length() && Character.isDigit(s2.charAt(j))) ++j;

          int num1 = Integer.parseInt(s1.substring(startI, i));
          int num2 = Integer.parseInt(s2.substring(startJ, j));

          return num1 - num2;
      }
  }
}
0.53 ~ 41.48ms

오호 입력된 배열을 그대로 정렬해서 내보내 버리셨다...! (ﾉ◕ヮ◕)ﾉ*:･ﾟ✧

​

​

​

* 참고 사이트
다중 조건 정렬
chickenpaella.tistory.com
