문제 설명

셀수있는 수량의 순서있는 열거 또는 어떤 순서를 따르는 요소들의 모음을 튜플(tuple)이라고 합니다. 

n개의 요소를 가진 튜플을 n-튜플(n-tuple)이라고 하며, 다음과 같이 표현할 수 있습니다.

 (a1, a2, a3, ..., an)

​

튜플은 다음과 같은 성질을 가지고 있습니다.

1. 중복된 원소가 있을 수 있습니다. ex : (2, 3, 1, 2)

2. 원소에 정해진 순서가 있으며, 원소의 순서가 다르면 서로 다른 튜플입니다. ex : (1, 2, 3) ≠ (1, 3, 2)

3. 튜플의 원소 개수는 유한합니다.

​

원소의 개수가 n개이고, 중복되는 원소가 없는 튜플 (a1, a2, a3, ..., an)이 주어질 때(단, a1, a2, ..., an은 자연수), 

이는 다음과 같이 집합 기호 '{', '}'를 이용해 표현할 수 있습니다.

 {{a1}, {a1, a2}, {a1, a2, a3}, {a1, a2, a3, a4}, ... {a1, a2, a3, a4, ..., an}}

예를 들어 튜플이 (2, 1, 3, 4)인 경우 이는

{{2}, {2, 1}, {2, 1, 3}, {2, 1, 3, 4}}

와 같이 표현할 수 있습니다. 이때, 집합은 원소의 순서가 바뀌어도 상관없으므로

{{2}, {2, 1}, {2, 1, 3}, {2, 1, 3, 4}}

{{2, 1, 3, 4}, {2}, {2, 1, 3}, {2, 1}}

{{1, 2, 3}, {2, 1}, {1, 2, 4, 3}, {2}}

는 모두 같은 튜플 (2, 1, 3, 4)를 나타냅니다.

​

​

특정 튜플을 표현하는 집합이 담긴 문자열 s가 매개변수로 주어질 때, 

s가 표현하는 튜플을 배열에 담아 return 하도록 solution 함수를 완성해주세요.

​

[제한사항]

- s의 길이는 5 이상 1,000,000 이하입니다.

- s는 숫자와 '{', '}', ',' 로만 이루어져 있습니다.

- 숫자가 0으로 시작하는 경우는 없습니다.

- s는 항상 중복되는 원소가 없는 튜플을 올바르게 표현하고 있습니다.

- s가 표현하는 튜플의 원소는 1 이상 100,000 이하인 자연수입니다.

- return 하는 배열의 길이가 1 이상 500 이하인 경우만 입력으로 주어집니다.

​

[입출력 예]

s

result

"{{2},{2,1},{2,1,3},{2,1,3,4}}"

[2, 1, 3, 4]

"{{1,2,3},{2,1},{1,2,4,3},{2}}"

[2, 1, 3, 4]

"{{20,111},{111}}"

[111, 20]

"{{123}}"

[123]

"{{4,2,3},{3},{2,3,4,1},{2,3}}"

[3, 2, 4, 1]

입출력 예에 대한 설명

입출력 예 #1

문제 예시와 같습니다.

​

입출력 예 #2

문제 예시와 같습니다.

​

입출력 예 #3

(111, 20)을 집합 기호를 이용해 표현하면 {{111}, {111,20}}이 되며, 이는 {{20,111},{111}}과 같습니다.

​

입출력 예 #4

(123)을 집합 기호를 이용해 표현하면 {{123}} 입니다.

​

입출력 예 #5

(3, 2, 4, 1)을 집합 기호를 이용해 표현하면 {{3},{3,2},{3,2,4},{3,2,4,1}}이 되며, 이는 {{4,2,3},{3},{2,3,4,1},{2,3}}과 같습니다.





내풀이

import java.util.*;
class Solution {
    public int[] solution(String s) {
        int[] answer;
        
        Map<Integer,Integer> map = new HashMap<>(); // map(튜플 원소, 나온 횟수)
        
        String s_temp = s.substring(1); // 바깥 '{' 제거
        s_temp = s_temp.substring(0,s_temp.length()-1); // 바깥 '}' 제거
        
        if(s_temp.indexOf(",") != -1){
            String[] s_arr = s_temp.split("\\},\\{"); // "},{" 로 split -> 집합별로 나누기

            // 각 집합 처리
            for(int i=0; i<s_arr.length; i++){
                s_arr[i] = s_arr[i].replace("{","").replace("}","");
                
                for(String ss : s_arr[i].split(",")){
                    int key = Integer.parseInt(ss);
                    
                    if(map.containsKey(key)){
                        map.put(key,map.get(key)+1);
                    }else{
                        map.put(key,1);
                    }
                }
            }
            
            // map의 value값으로 key 내림차순 정렬(주문횟수가 많은 조합부터)
            List<Integer> key_set = new ArrayList<>(map.keySet());
            key_set.sort((o1,o2)->map.get(o2)-map.get(o1));
            
            answer = new int[map.size()];
            int a_index = 0;
            
            for(int key : key_set) {
                answer[a_index++] = key;
            }
            
        }else {
            answer = new int[]{Integer.parseInt(s_temp.replace("{","").replace("}",""))};
        }
        
        return answer;
    }
}
원래는 주어진 문자열에서 바깥{ }을 제거하고, { } 안에 든  길이가 가장 긴 것을 그대로 int로 바꿔서 answer에 넣으려고 했는데... 

도중에 입출력 예 5번을 보는데, 주어진 문자열에서 { } 안에 가장 길이가 긴 건 {2,3,4,1}인데 답은 {3,2,4,1}여서 뭐지? 하다가

질문하기에서 

jujubebat

2020.8.27 22:53

집합에서 "가장 빈번히 나온 숫자" 순으로 튜플이 구성됩니다.

{{1, 2, 3}, {2, 1}, {1, 2, 4, 3}, {2}} 이 집합을 보면 '2'가 4번나오니까 튜플의 가장 맨앞 숫자가 '2'라는 것을 유추할 수 있습니다. 

​
라고 해서 갑작스레 map을 추가해서 처리했다...ㅎㅎ
실행시간은 0.05 ~ 117.18ms

앗 그리고 "{,}"로 split하는데 "{"랑 "}" 앞에 "\\"를 붙인 이유!는 아래에서 확인합시다...!

 
[에러로그] java.util.regex.PatternSyntaxException: Illegal repetition
안녕하세요! 오늘은 Java에서 '{'(특수문자)를 기준으로 split을 통해 문자열을 자르는 도중에 아래와 같은 에러가 발생하였습니다. java.util.regex.PatternSyntaxException: Illegal repetition { at java.ut..

soo-vely-dev.tistory.com

​

다른사람풀이1 < Set >

코딩테스트 연습 / 2019 카카오 개발자 겨울 인턴십 / 튜플 / 다른 사람의 풀이 / 유준혁

import java.util.*;
class Solution {
    public int[] solution(String s) {
        Set<String> set = new HashSet<>();
        String[] arr = s.replaceAll("[{]", " ").replaceAll("[}]", " ").trim().split(" , ");
        Arrays.sort(arr, (a, b)->{return a.length() - b.length();});
        int[] answer = new int[arr.length];
        int idx = 0;
        for(String s1 : arr) {
            for(String s2 : s1.split(",")) {
                if(set.add(s2)) {
                     answer[idx++] = Integer.parseInt(s2);
                }
            }
        }
        return answer;
    }
}
앗.....!! "{"랑 "}"를 " "로 해서 이걸 trim(문자열 앞 뒤 공백 제거) 하고 " , "로 split을 해버리시다닛!

참으로 배울게 많습니다...쓸데없는 것은 작성하지 않으시는군요...!

​

그리고 또 배운 것은

set.add()에 리턴값이 있다는 것!

값이 아직 존재하지 않으면 true / 이미 값이 존재하면 false

​

0.96 ~99.84ms

다른사람풀이2

코딩테스트 연습 / 2019 카카오 개발자 겨울 인턴십 / 튜플 / 다른 사람의 풀이 / 

import java.util.*;
import java.util.regex.Pattern;
import java.util.regex.Matcher;

class Solution {
    public int[] solution(String s) {

        Map<String, Integer> map = new HashMap<>();
        Pattern pattern = Pattern.compile("[0-9]+");
        Matcher matcher = pattern.matcher(s);
        while (matcher.find()) {
            String n = matcher.group();
            map.put(n, map.getOrDefault(n, 0) + 1);
        }
        int size = map.size();
        int[] answer = new int[size];
        for (String key: map.keySet()) {
            answer[size - map.get(key)] = Integer.parseInt(key);
        }
        return answer;
    }

}
0.13 ~ 69.09ms

와우 가장 실행시간이 짧다!

​

matcher.group() : 매치된 값을 반환

map.getOrDefault(찾는 키 , 기본값) : 찾는 키가 존재한다면 그 값을 반환하고, 아니면 기본값을 반환

​

이런게 있군요!

그리고 정규식에서 + 는 앞 문자가 1개 이산 존재할 수 있음을 의미한다고 함.

​

​

* 참고 사이트
 
[ 정규식 사용하기 ] Pattern, Matcher, find(), group()
원하는 형태의 값인지 확인 할 경우, 또는 값을 원하는 형태로 바꿀 경우, 또는 원하는 형태의 값을 찾을 경우 정규식을 사용 하면 된다. ( 정규식이 잘 정리 되어있는 블로그 : https://lng1982.tistory.com/14..

dev-onthegiant.tistory.com

 
Java 정규식 표현(Regular Expression)에 대해
nesoy.github.io

​
