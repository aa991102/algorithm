문제 설명

1와 0로 채워진 표(board)가 있습니다. 표 1칸은 1 x 1 의 정사각형으로 이루어져 있습니다. 

​

표에서 1로 이루어진 가장 큰 정사각형을 찾아 넓이를 return 하는 solution 함수를 완성해 주세요. 

(단, 정사각형이란 축에 평행한 정사각형을 말합니다.)

​

예를 들어

1

2

3

4

0

1

1

1

1

1

1

1

1

1

1

1

0

0

1

0

가 있다면 가장 큰 정사각형은

1

2

3

4

0

1

1

1

1

1

1

1

1

1

1

1

0

0

1

0

가 되며 넓이는 9가 되므로 9를 반환해 주면 됩니다.

​

제한사항

- 표(board)는 2차원 배열로 주어집니다.

- 표(board)의 행(row)의 크기 : 1,000 이하의 자연수

- 표(board)의 열(column)의 크기 : 1,000 이하의 자연수

- 표(board)의 값은 1또는 0으로만 이루어져 있습니다.

​

입출력 예

board

answer

[[0,1,1,1],[1,1,1,1],[1,1,1,1],[0,0,1,0]]

9

[[0,0,1,1],[1,1,1,1]]

4

입출력 예 설명

입출력 예 #1

위의 예시와 같습니다.

​

입출력 예 #2

| 0 | 0 | 1 | 1 |

| 1 | 1 | 1 | 1 |

로 가장 큰 정사각형의 넓이는 4가 되므로 4를 return합니다.






내 풀이 < 실패 >

class Solution{
    public int solution(int [][]board){
        int answer = 0;

        for(int i=0; i<board.length; i++){
            for(int j=0; j<board[i].length; j++){
                if(board[i][j] == 1){
                    int side = measure(board, i, j);
                    int area = 1;
                    
                    if(side > 0 && check(board, i, j, side)){
                        area = (int)Math.pow(side+1, 2);
                    }
                    
                    if(area > answer) answer = area;
                }
            }
        }
        
        return answer;
    }
    
    // 1로 된 정사각형의 높이, 넓이 구하기
    public int measure(int[][] board, int x, int y){
        int height = 0;
        int width = 0;
        
        // 1로된 높이 구하기
        for(int i=x+1; i<board.length; i++){
            if(board[i][y]==0){
                break;
            }
            height++;
        }
        // 1로된 넓이 구하기
        for(int i=y+1; i<board[x].length; i++){
            if(board[x][i]==0){
                break;
            }
            width++;
        }
        
        return Math.min(height, width);
    }
    
    // 정사각형 내부가 전부 1인지 확인
    public boolean check(int[][] board, int x, int y, int side){
        for(int i=x+1; i<=x+side; i++){
            for(int j=y+1; j<y+side; j++){
                if(board[i][j]!=1){
                    return false;
                }
            }
        }
        return true;
    }
}

흙... 시간초과는 그럴 수 있다 해도... 실패하는 건........ 이유를 모르겠어서 더 슬프닷... ಥ_ಥ ಥ_ಥ ಥ_ಥ

​

일단

1. [[0,1],[0,0]] 일 때, 1이 나오는 것 (넓이 1 처리)

2. [[1,1,1],[1,0,1],[1,1,1]] 일 때, 1이 나오는 것 (가운데가 빈(0인) 경우 처리)

3. [[0,1,0]] 일 때, 1이 나오는 것 (행이나 열의 길이가 1일 때 처리)

이렇게 세 가지 경우는 맞게 나오는 거 같은데 말이지... 허허허...

​

​

다른사람풀이

https://zzang9ha.tistory.com/189

class Solution{
    public int solution(int [][]board){
        int answer = 0;
        int[][] newBoard = new int[board.length+1][board[0].length+1];
        // 새로운 배열 생성
        for(int i=0; i<board.length; i++)
            for(int j=0; j<board[i].length; j++)
                newBoard[i+1][j+1] = board[i][j];
        
        int max = 0;
        
        // 만들 수 있는 정사각형 검사
        for(int i=1; i<newBoard.length; i++){
            for(int j=1; j<newBoard[i].length; j++){
                /* 2x2 사각형의 우측하단 꼭짓점을 기준으로 정사각형이 되는지 체크한다.
                 * 현재 값이 1인경우 좌←, 상↑, 좌상↖ 체크 
                 * ←, ↑, ↖ 값이 모두 1인경우 정사각형을 만들 수 있음
                */ 
                if(newBoard[i][j] == 1){
                    int left = newBoard[i-1][j];    // 좌측 값
                    int up = newBoard[i][j-1];      // 상단 값
                    int leftUp = newBoard[i-1][j-1];// 좌측상단(대각선) 값
                    int min = Math.min(left, Math.min(up, leftUp)); 
                    newBoard[i][j] = min+1;
                    max = Math.max(max, min+1);
                }
            }
        }
        answer = max * max;
        return answer;
    }
}

프로그래머스[Java] - (Level2)가장 큰 정사각형찾기(DP)
https://programmers.co.kr/learn/courses/30/lessons/12905 프로그래머스 코드 중심의 개발자 채용. 스택 기반의 포지션 매칭. 프로그래머스의 개발자 맞춤형 프로필을 등록하고, 나와 기술 궁합이 잘 맞는 기업..

zzang9ha.tistory.com

오우...난 위에서 오른쪽, 아래로 풀어나갔는데 이 분은 반대로 왼쪽, 상단, 왼쪽상단의 값을 구해서 풀어나가셨다.

​

그리고 이 분은 DP(Dynamic Programming)알고리즘을 이용하여 풀었다고 하셨는데... 이것도 익숙하지 않아서 찾아봤다.

​

​

​

* Dynamic Programming(동적계획법) 개념

: 큰 문제를 작은 문제로 나누어 푸는 알고리즘. 큰 문제를 작은 문제들로 분할하여 그것을 이용해 큰 문제를 해결하는 방법

​

* Dvide and Conquer(분할정복)과의 차이점

: 작은 문제의 중복 여부! 

  분할정복은 큰 문제를 해결하기 어려워 단지 작은 문제로 나누어 푸는 방법(반복X). 

  동적프로그래밍은 작은 부분문제들이 반복되는 것(답이 바뀌지 않음)을 이용해서 풀어나가는 방법.

​

* Dynamic Programming 방법

: ​모든 작은 문제들은 한 번만 풀어야 함. 따라서 정답을 구한 작은 문제를 어딘가에 메모해 놓고, 

  다시 그보다 큰 문제를 풀어나갈 때 똑같은 작은 문제가 나타나면 앞서 메모한 작은 문제의 결과값을 이용. 

​

* Dynamic Programming 조건

: 아래 조건을 만족하는 경우에만 동적프로그래밍을 사용할 수 있다. 

 작은 문제의 결과값이 항상 같다는 점을 이용해서 큰 문제를 해결하는 방법이기 때문!

- 작은 문제들에서 반복이 일어난다.

- 같은 문제는 구할 때마다 정답이 같다.

​

​

* 출처


 
알고리즘 - Dynamic Programming(동적프로그래밍)이란?
Dynamic Programming(동적계획법) 이란 1. Dynamic Programming(동적계획법)이란? 큰 문제를 작은문제로 나누어 푸는 문제를 일컫는 말입니다. 동적 계획법이란 말 때문에 어떤 부분에서 동적으로 프로그래밍이 이..

galid1.tistory.com

​
