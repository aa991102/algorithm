문제 설명

매운 것을 좋아하는 Leo는 모든 음식의 스코빌 지수를 K 이상으로 만들고 싶습니다. 

모든 음식의 스코빌 지수를 K 이상으로 만들기 위해 Leo는 스코빌 지수가 가장 낮은 두 개의 음식을 아래와 같이 특별한 방법으로 섞어 새로운 음식을 만듭니다.

​

섞은 음식의 스코빌 지수 = 가장 맵지 않은 음식의 스코빌 지수 + (두 번째로 맵지 않은 음식의 스코빌 지수 * 2) 

​

Leo는 모든 음식의 스코빌 지수가 K 이상이 될 때까지 반복하여 섞습니다.

​

Leo가 가진 음식의 스코빌 지수를 담은 배열 scoville과 원하는 스코빌 지수 K가 주어질 때, 

모든 음식의 스코빌 지수를 K 이상으로 만들기 위해 섞어야 하는 최소 횟수를 return 하도록 solution 함수를 작성해주세요.

​

제한 사항

- scoville의 길이는 2 이상 1,000,000 이하입니다.

- K는 0 이상 1,000,000,000 이하입니다.

- scoville의 원소는 각각 0 이상 1,000,000 이하입니다.

- 모든 음식의 스코빌 지수를 K 이상으로 만들 수 없는 경우에는 -1을 return 합니다.

​

입출력 예

scoville

K

return

[1, 2, 3, 9, 10, 12]

7

2

입출력 예 설명

스코빌 지수가 1인 음식과 2인 음식을 섞으면 음식의 스코빌 지수가 아래와 같이 됩니다.

새로운 음식의 스코빌 지수 = 1 + (2 * 2) = 5

가진 음식의 스코빌 지수 = [5, 3, 9, 10, 12]

스코빌 지수가 3인 음식과 5인 음식을 섞으면 음식의 스코빌 지수가 아래와 같이 됩니다.

새로운 음식의 스코빌 지수 = 3 + (5 * 2) = 13

가진 음식의 스코빌 지수 = [13, 9, 10, 12]

모든 음식의 스코빌 지수가 7 이상이 되었고 이때 섞은 횟수는 2회입니다.





내 풀이 < 시간초과 실패 >

import java.util.*;
class Solution {
    public int solution(int[] scoville, int K) {
        int answer = 0;
        List<Integer> list = new ArrayList();
        
        for(int i=0; i<scoville.length; i++){
            list.add(scoville[i]);
        }
        Collections.sort(list);
        
        for(int i = 0; i < list.size(); i++){
            if((i < list.size()-1) && (list.get(i) < K)){
                list.add(i+2,list.get(i)+(list.get(i+1))*2);
                list.remove(i);
                list.remove(i);
                answer++;
                Collections.sort(list);
                i = -1;
                continue;
            }else{
                break;
            }
        }
        
        if(list.get(0) < K){
            answer = -1;
        }
        
        return answer;
    }
}
ㅠㅠ 정확성 테스트 16문제는 성공했는데, 효율성 테스트 5문제에는 전부 시간초과로 실패했다...
아무래도 for문 돌때마다 정렬시키는게 시간초과의 원인이지 않을까!!
​

​

다른사람풀이 < PriorityQueue 이용 >

코딩테스트 연습 / 힙(Heap) / 더 맵게 / 다른 사람의 풀이 / - , 이경태 , - , 정화영 , rmsdud2435 외 11 명

import java.util.*;
class Solution {
    public int solution(int[] scoville, int K) {
        PriorityQueue<Integer> q = new PriorityQueue<>();

        for(int i = 0; i < scoville.length; i++)
            q.add(scoville[i]);

        int count = 0;
        while(q.size() > 1 && q.peek() < K){
            int weakHot = q.poll();
            int secondWeakHot = q.poll();

            int mixHot = weakHot + (secondWeakHot * 2);
            q.add(mixHot);
            count++;
        }

        if(q.size() <= 1 && q.peek() < K)
            count = -1;

        return count;
    }
}
오호오호오호!!! ​PriorityQueue​ 라는게 있구나! 이렇게 새로운 것을 배워 갑니다....!

​

​

* PriorityQueue (우선순위 큐)

- 큐는 데이터를 일시적으로 쌓아두기 위한 자료구조로, FIFO(First In First Out : 먼저 들어온 것이 먼저 나가는) 구조를 가짐.

- PriorityQueue는 먼저 들어온 순서대로 데이터가 나가는 것이 아닌   

  우선순위를 먼저 결정하고 그 우선순위가 높은 엘리먼트가 먼저 나가는 자료구조

- 우선순위 큐는 힙을 이용하여 구현하는 것이 일반적임. 

- 데이터를 삽입할 때 우선순위를 기준으로 최대힙 혹은 최소 힙을 구성하고, 데이터를 꺼낼 때 루트 노드를 얻어낸 뒤 루트 노드를 삭제할 때는 빈 루트 노드 위치에 맨 마지막 노드를 삽입한 후 아래로 내려가면서 적절한 자리를 찾아서 옮기는 방식으로 진행.

​

​

- Priority Queue의 특징​

1. 높은 우선순위의 요소를 먼저 꺼내서 처리하는 구조 (큐에 들어가는 원소는 비교가 가능한 기준이 있어야함) 

2. 내부 요소는 힙으로 구성되어 이진트리 구조로 이루어져 있음   

3. 내부구조가 힙으로 구성되어 있기에 시간 복잡도는 O(NLogN)

4. 응급실과 같이 우선순위를 중요시해야 하는 상황에서 쓰임

​

​

- Priority Queue 선언, 추가, 삭제, 참조​

import java.util.PriorityQueue; //import

//int형 priorityQueue 선언 (우선순위가 낮은 숫자 순)
PriorityQueue<Integer> priorityQueue = new PriorityQueue<>();

//int형 priorityQueue 선언 (우선순위가 높은 숫자 순)
PriorityQueue<Integer> priorityQueue = new PriorityQueue<>(Collections.reverseOrder());

//String형 priorityQueue 선언 (우선순위가 낮은 숫자 순)
PriorityQueue<String> priorityQueue = new PriorityQueue<>(); 

//String형 priorityQueue 선언 (우선순위가 높은 숫자 순)
PriorityQueue<String> priorityQueue = new PriorityQueue<>(Collections.reverseOrder());
priorityQueue.add(1);     // priorityQueue 값 1 추가 - 성공시 true 반환 / 큐에 여유공간이 없어 실패시 ﻿IllegalStateException을 발생
priorityQueue.offer(2);   // priorityQueue 값 2 추가
priorityQueue.poll();       // priorityQueue에 첫번째 값을 반환하고 제거 비어있다면 null
priorityQueue.remove();     // priorityQueue에 첫번째 값 제거
priorityQueue.clear();      // priorityQueue에 초기화
priorityQueue.peek();       // priorityQueue의 첫번째 값 참조
​

​

아래 링크로 가서 좀 더 자세히 살펴보도록 하자!!


* 참고 사이트
 
[Java] PriorityQueue(우선순위 큐) 클래스 사용법 & 예제 총정리
우선순위 큐(Priority Queue)란? 일반적으로 큐는 데이터를 일시적으로 쌓아두기 위한 자료구조로 스택과는 다르게 FIFO(First In First Out)의 구조 즉 먼저 들어온 데이터가 먼저 나가는 구조를 가집니다. Prior..

coding-factory.tistory.com


힙 (자료 구조) - 위키백과, 우리 모두의 백과사전
HIV/AIDS 관련 문서를 편집 할 의료 전공자를 5월 1일부터 14일까지 모집합니다. 힙 (자료 구조) 위키백과, 우리 모두의 백과사전. 힙 ( heap )은 최댓값 및 최솟값을 찾아내는 연산을 빠르게 하기 위해 고안된 완전이진트리(complete binary tree)를 기본으로 한 자료구조(tree-based structure)로서 다음과 같은 힙 속성(property)을 만족한다. A가 B의 부모노드(parent node) 이면, A의 키(key)값과 B의 키값 사이에는 대소관계가 성립한다. 힙에는 두가지 종류가 있으며, ...

ko.wikipedia.org

​
