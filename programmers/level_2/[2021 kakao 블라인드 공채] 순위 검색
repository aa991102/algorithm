문제 설명

[본 문제는 정확성과 효율성 테스트 각각 점수가 있는 문제입니다.]

카카오는 하반기 경력 개발자 공개채용을 진행 중에 있으며 현재 지원서 접수와 코딩테스트가 종료되었습니다. 

이번 채용에서 지원자는 지원서 작성 시 아래와 같이 4가지 항목을 반드시 선택하도록 하였습니다.

​

- 코딩테스트 참여 개발언어 항목에 cpp, java, python 중 하나를 선택해야 합니다.

- 지원 직군 항목에 backend와 frontend 중 하나를 선택해야 합니다.

- 지원 경력구분 항목에 junior와 senior 중 하나를 선택해야 합니다.

- 선호하는 소울푸드로 chicken과 pizza 중 하나를 선택해야 합니다.

​

인재영입팀에 근무하고 있는 니니즈는 코딩테스트 결과를 분석하여 채용에 참여한 개발팀들에 제공하기 위해 지원자들의 지원 조건을 선택하면 해당 조건에 맞는 지원자가 몇 명인 지 쉽게 알 수 있는 도구를 만들고 있습니다.

​

예를 들어, 개발팀에서 궁금해하는 문의사항은 다음과 같은 형태가 될 수 있습니다.

- 코딩테스트에 java로 참여했으며, backend 직군을 선택했고, junior 경력이면서, 소울푸드로 pizza를 선택한 사람 중 코딩테스트 점수를 50점 이상 받은 지원자는 몇 명인가?

물론 이 외에도 각 개발팀의 상황에 따라 아래와 같이 다양한 형태의 문의가 있을 수 있습니다.

- 코딩테스트에 python으로 참여했으며, frontend 직군을 선택했고, senior 경력이면서, 소울푸드로 chicken을 선택한 사람 중 코딩테스트 점수를 100점 이상 받은 사람은 모두 몇 명인가?

- 코딩테스트에 cpp로 참여했으며, senior 경력이면서, 소울푸드로 pizza를 선택한 사람 중 코딩테스트 점수를 100점 이상 받은 사람은 모두 몇 명인가?

- backend 직군을 선택했고, senior 경력이면서 코딩테스트 점수를 200점 이상 받은 사람은 모두 몇 명인가?

- 소울푸드로 chicken을 선택한 사람 중 코딩테스트 점수를 250점 이상 받은 사람은 모두 몇 명인가?

- 코딩테스트 점수를 150점 이상 받은 사람은 모두 몇 명인가?

​

즉, 개발팀에서 궁금해하는 내용은 다음과 같은 형태를 갖습니다.

* [조건]을 만족하는 사람 중 코딩테스트 점수를 X점 이상 받은 사람은 모두 몇 명인가? 

​

[문제]

지원자가 지원서에 입력한 4가지의 정보와 획득한 코딩테스트 점수를 하나의 문자열로 구성한 값의 배열 info, 개발팀이 궁금해하는 문의조건이 문자열 형태로 담긴 배열 query가 매개변수로 주어질 때,

각 문의조건에 해당하는 사람들의 숫자를 순서대로 배열에 담아 return 하도록 solution 함수를 완성해 주세요.

​

[제한사항]

- info 배열의 크기는 1 이상 50,000 이하입니다.

- info 배열 각 원소의 값은 지원자가 지원서에 입력한 4가지 값과 코딩테스트 점수를 합친 "개발언어 직군 경력 소울푸드 점수" 형식입니다.

  - 개발언어는 cpp, java, python 중 하나입니다.

  - 직군은 backend, frontend 중 하나입니다.

  - 경력은 junior, senior 중 하나입니다.

  - 소울푸드는 chicken, pizza 중 하나입니다.

  - 점수는 코딩테스트 점수를 의미하며, 1 이상 100,000 이하인 자연수입니다.

  - 각 단어는 공백문자(스페이스 바) 하나로 구분되어 있습니다.

- query 배열의 크기는 1 이상 100,000 이하입니다.

- query의 각 문자열은 "[조건] X" 형식입니다.

  - [조건]은 "개발언어 and 직군 and 경력 and 소울푸드" 형식의 문자열입니다.

  - 언어는 cpp, java, python, - 중 하나입니다.

  - 직군은 backend, frontend, - 중 하나입니다.

  - 경력은 junior, senior, -​ 중 하나입니다.

  - 소울푸드는 chicken, pizza, - 중 하나입니다.

  - '-' 표시는 해당 조건을 고려하지 않겠다는 의미입니다.

  - X는 코딩테스트 점수를 의미하며 조건을 만족하는 사람 중 X점 이상 받은 사람은 모두 몇 명인 지를 의미합니다.

  - 각 단어는 공백문자(스페이스 바) 하나로 구분되어 있습니다.

  - 예를 들면, "cpp and - and senior and pizza 500"은 "cpp로 코딩테스트를 봤으며, 경력은 senior 이면서 소울푸드로 pizza를 선택한

     지원자 중 코딩테스트 점수를 500점 이상 받은 사람은 모두 몇 명인가?"를 의미합니다.

​

[입출력 예]

info

query

result

["java backend junior pizza 150","python frontend senior chicken 210","python frontend senior chicken 150","cpp backend senior pizza 260","java backend junior chicken 80","python backend senior chicken 50"]

["java and backend and junior and pizza 100","python and frontend and senior and chicken 200","cpp and - and senior and pizza 250","- and backend and senior and - 150","- and - and - and chicken 100","- and - and - and - 150"]

[1,1,1,1,2,4]

입출력 예에 대한 설명

지원자 정보를 표로 나타내면 다음과 같습니다.

언어

직군

경력

소울 푸드

점수

java

backend

junior

pizza

150

python

frontend

senior

chicken

210

python

frontend

senior

chicken

150

cpp

backend

senior

pizza

260

java

backend

junior

chicken

80

python

backend

senior

chicken

50

"java and backend and junior and pizza 100" 

 : java로 코딩테스트를 봤으며, backend 직군을 선택했고 junior 경력이면서 소울푸드로 pizza를 선택한 지원자 중 코딩테스트 점수를 100점 이상 받은 지원자는 1명 입니다.

​

"python and frontend and senior and chicken 200"

 : python으로 코딩테스트를 봤으며, frontend 직군을 선택했고, senior 경력이면서 소울 푸드로 chicken을 선택한 지원자 중 코딩테스트 점수를 200점 이상 받은 지원자는 1명 입니다.

​

"cpp and - and senior and pizza 250"

 : cpp로 코딩테스트를 봤으며, senior 경력이면서 소울푸드로 pizza를 선택한 지원자 중 코딩테스트 점수를 250점 이상 받은 지원자는 1명 입니다.

​

"- and backend and senior and - 150"

 : backend 직군을 선택했고, senior 경력인 지원자 중 코딩테스트 점수를 150점 이상 받은 지원자는 1명 입니다.

​

"- and - and - and chicken 100"

 : 소울푸드로 chicken을 선택한 지원자 중 코딩테스트 점수를 100점 이상을 받은 지원자는 2명 입니다.

​

"- and - and - and - 150"

 : 코딩테스트 점수를 150점 이상 받은 지원자는 4명 입니다.

​

​

카카오 문제 풀이   2021 카카오 신입공채 1차 온라인 코딩테스트 해설 보러가기

​

본 문제는 정확성 테스트와 효율성 테스트 두 가지 방식으로 검증하는 문제입니다. 

효율성 테스트의 경우 주어진 시간 내에 실행이 완료되어야 하므로, 최적화된 구현 방법을 고민할 필요가 있습니다.

​

우선, 매 문의 조건마다 INFO 배열에서 조건에 해당하는 지원자들을 찾으면서 X점 이상 받은 사람은 몇 명인지 구한다면 정확성 테스트를 통과할 수 있습니다.

​

그러나 효율성 테스트의 경우에는 위와 같은 방식으로 매번 지원자들을 찾는다면 통과할 수 없습니다. 

문제 해결을 위해서, 지원자들을 그룹별로 적절하게 미리 분류해두면 매 문의 조건마다 지원자들을 INFO 배열에서 찾지 않아도 됩니다.

​

예를 들어, “java backend junior pizza 150” 지원자의 경우 다음과 같이 16가지 그룹에 속하게 됩니다.

언어

직군

경력

소울 푸드

점수

java

backend

junior

pizza

150

–

backend

junior

pizza

150

java

–

junior

pizza

150

java

backend

–

pizza

150

java

backend

junior

–

150

–

–

junior

pizza

150

–

backend

–

pizza

150

… (생략)

java

–

–

–

150

–

–

–

–

150

검색 조건이 “java and backend and junior and pizza 100″이라 하면, 위 지원자는 검색 대상에 포함되며, 
검색 조건이 “java and – and junior and – 100” 인 경우에도 검색 대상에 포함이 됩니다.

따라서 모든 지원자들을 위와 같은 방식으로 분류한 후 같은 그룹의 지원자끼리 묶어두고, 
해당 그룹에서 점수를 기준으로 오름차순 정렬해 둡니다.

이제, 검색 조건이 주어질 경우 INFO 배열에서 지원자들을 찾지 않고, 
미리 분류해둔 그룹에서 X점 이상 맞은 지원자 수를 세주기만 하면 됩니다.

이때, X점 이상 맞은 지원자를 찾기 위해 해당 그룹의 최저점, 혹은 최고점부터 순차적으로 검색한다면 여전히 오랜 시간이 걸리게 됩니다. 이때, 숫자가 오름차순으로 정렬된 배열에서 X라는 숫자를 찾는 효율적인 방법으로 binary search를 사용할 수 있습니다. 
이때, 배열에 X가 없을 수도 있으므로, 배열에서 X보다 크거나 같은 숫자가 처음 나타나는 위치를 찾아야 하며, 이는 lower bound를 이용하면 됩니다.





내풀이 < 실패 >

import java.util.*;
class Solution {
    public int[] solution(String[] info, String[] query) {
        int[] answer = new int[query.length];
        
        // map< 항목, 해당하는 index 리스트 >
        Map<String,List<Integer>> map = new HashMap<>();
        
        // info 처리
        for(int i=0; i<info.length; i++){
            String[] datas = info[i].split(" ");
            for(int j=0; j<datas.length; j++){
                String data = datas[j];
                
                if(j<4){ // info[i]의 항목 처리
                    if(map.containsKey(data)){
                        map.get(data).add(i); // list에 인덱스 넣기
                    }else{
                        List<Integer> list = new ArrayList<>();
                        list.add(i); // list에 인덱스 넣기
                        map.put(data, list);
                    }
                }else{ // info[i]의 점수 처리
                    if(map.containsKey("nums")){
                        map.get("nums").add(Integer.parseInt(data)); // list에 점수 넣기(info[i]인덱스 순으로 들어갈테니, list의 인덱스와 info의 인덱스가 동일)
                    }else{
                        List<Integer> list = new ArrayList<>();
                        list.add(Integer.parseInt(data)); // list에 점수 넣기
                        map.put("nums", list);
                    }
                }
            }
        }
        
        // 각 query에 일치하는 사람수 구하기
        for(int i=0; i<query.length; i++){
            String[] query_splits = query[i].split(" ");
            List<Integer> list = new ArrayList<>();
            int no_requirement_cnt = 0;
            int score = 0;
            
            for(int j=0; j<query_splits.length; j++){
                String q = query_splits[j];
                
                if(q.equals("and")) continue;
                if(q.equals("-")){
                    no_requirement_cnt++;
                    continue;
                }
                
                if(q.matches("^[0-9]*$")){ // 점수면
                    score = Integer.parseInt(q);
                    
                    for(int l=0; l<list.size(); l++){
                        if(map.get("nums").get(list.get(l))<score){ //map.numList.get(index) < score인 경우 지우기
                            list.remove(l--);
                        }
                    }
                }else{ // 정보면
                    if(map.containsKey(q)){
                        if(list.size()>0){ // 이미 list에 넣은 값이 있으면
                            for(int k=0; k<map.get(q).size(); k++){ // map<항목,index 리스트>의 index 리스트에 접근
                                for(int l=0; l<list.size(); l++){ // list에 접근
                                    if(!map.get(q).contains(list.get(l))){
                                        list.remove(l--);
                                    }
                                }
                            }
                        }else{ // list에 넣은 값이 없으면
                            for(int k=0; k<map.get(q).size(); k++){
                                list.add(map.get(q).get(k));
                            }
                        }
                    }else{
                        list.clear();
                        break;
                    }
                }
            }
            
            if(no_requirement_cnt==4){ // 조건이 모두 없는 경우~
                for(int l : map.get("nums")){
                    if(l>=score) {
                        answer[i]++;
                    }
                }
            }else{
                answer[i] = list.size();
                
            }
        }
        
        return answer;
    }
}
효율성 테스트 4문제는 모두 시간초과로 실패.

정확성 테스트 18문제 중에 8,9,10,14,15,18번은 시간초과로 실패.

그리고 3, 4번은 그냥 실패....!! 그런데 그 이유를 알 수가 없어서 답답하다..ㅠ 

시간이 오래 걸리는건 실패한 거 이해할 수 있겠는데.... 대체 어느 부분에서 잘못된 것일까...!!!!!!


​

다른사람풀이

코딩테스트 연습 / 2021 KAKAO BLIND RECRUITMENT / 순위 검색 / 다른 사람의 풀이 / AnGyeIn , kkw

import java.util.HashMap;
import java.util.ArrayList;

class Solution {
    public int[] solution(String[] info, String[] query) {
        String[] langs = {"cpp", "java", "python"},
                 deps = {"backend", "frontend"},
                 exps = {"junior", "senior"},
                 foods = {"chicken", "pizza"};
        // 각 그룹 map 생성
        HashMap<String, HashMap<String, HashMap<String, HashMap<String, ArrayList<Integer>>>>> langMap = new HashMap();
        for (String lang : langs)
            langMap.put(lang, new HashMap<>());
        for (String lang : langMap.keySet()) {
            HashMap<String, HashMap<String, HashMap<String, ArrayList<Integer>>>> depMap = langMap.get(lang);
            for (String dep : deps)
                depMap.put(dep, new HashMap<>());
            for (String dep : depMap.keySet()) {
                HashMap<String, HashMap<String, ArrayList<Integer>>> expMap = depMap.get(dep);
                for (String exp : exps)
                    expMap.put(exp, new HashMap<>());
                for (String exp : expMap.keySet()) {
                    HashMap<String, ArrayList<Integer>> foodMap = expMap.get(exp);
                    for (String food : foods)
                        foodMap.put(food, new ArrayList<Integer>());
                }
            }
        }
        
        // 각 지원자가 해당하는 그룹에 지원자 점수넣기
        for (String row : info) {
            String[] parse = row.split(" ");
            langMap.get(parse[0]).get(parse[1]).get(parse[2]).get(parse[3]).add(Integer.parseInt(parse[4]));
        }

        // 각 그룹의 점수 정렬
        for (HashMap<String, HashMap<String, HashMap<String, ArrayList<Integer>>>> depMap : langMap.values())
            for (HashMap<String, HashMap<String, ArrayList<Integer>>> expMap : depMap.values())
                for (HashMap<String, ArrayList<Integer>> foodMap : expMap.values())
                    for (ArrayList<Integer> scoreList : foodMap.values())
                        scoreList.sort(null); // 오름차순 정렬

        
        int[] answer = new int[query.length];
        int i = 0; // answer(query) index
        for (String quest : query) {
            // parse[0,1,2,3] => 항목4개, subParse[1]:점수 =parseInt=> minScore
            String[] parse = quest.split(" and "),
                     subParse = parse[3].split(" ");
            parse[3] = subParse[0];
            int minScore = Integer.parseInt(subParse[1]);

            // 쿼리에 해당하는 그룹을 찾아가는 과정
            for (String lang : langs)
                if (parse[0].equals("-") || parse[0].equals(lang)) {
                    HashMap<String, HashMap<String, HashMap<String, ArrayList<Integer>>>> depMap = langMap.get(lang);
                    for (String dep : deps)
                        if (parse[1].equals("-") || parse[1].equals(dep)) {
                            HashMap<String, HashMap<String, ArrayList<Integer>>> expMap = depMap.get(dep);
                            for (String exp : exps)
                                if (parse[2].equals("-") || parse[2].equals(exp)) {
                                    HashMap<String, ArrayList<Integer>> foodMap = expMap.get(exp);
                                    for (String food : foods)
                                        if (parse[3].equals("-") || parse[3].equals(food)) {
                                            ArrayList<Integer> scoreList = foodMap.get(food);
                                            
                                            // 해당하는 그룹에서 쿼리점수(minScore) 이상인 것의 개수 세기 -> answer[i]에 넣기
                                            int n = scoreList.size(),
                                                min = 0, // scoreList의 가장 작은 index
                                                max = n-1, // scoreList의 가장 큰 index
                                                mid = max, // scoreList의 가운데 index
                                                idx = n; // 이 인덱스부터 점수가 minScore 이상
                                            while (min <= max) {
                                                mid = (min + max) / 2;
                                                if (scoreList.get(mid) >= minScore) {
                                                    idx = mid;
                                                    max = mid - 1;
                                                } else
                                                    min = mid + 1;
                                            }
                                            answer[i] += n - idx;
                                        }
                                }
                        }
                }
            i++;
        }
        return answer;
    }
}
이 풀이는 카카오 문제 풀이에서 말하는 것처럼 그룹을 지정하고, 쿼리에 해당하는 그룹에서 쿼리점수 이상인 것의 개수를 세는 방식​!

​

ArrayList.sort(Comparator): parameter로 받는 Comparator를 통해 리스트 안의 데이터를 비교하며 정렬.

 - 만약 리스트의 데이터 오브젝트가 Comparable을 implements한 오브젝트라면 null값을 입력해 오름차순으로 정렬할 수 있음.
 - java doc에서는 list.sort(null)은 list.sort(Comparator.naturalOrder()) 와 같다고 설명

​

​

* 출처 사이트

Java :: ArrayList 정렬을 위한 sort 메소드 파해치기
개요 필자는 모 사이트에서 프로그래밍 문제를 해결하던 중, 입력된 데이터를 오름차순으로 정렬하여 리턴하라는 문제가 있어 해당 메소드에 대해 알아보았다. List에는 데이터 정렬을 위한 sort라는 메소드가 존..

manorgass.tistory.com

​
