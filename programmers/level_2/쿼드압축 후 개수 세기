문제 설명

0과 1로 이루어진 2n x 2n 크기의 2차원 정수 배열 arr이 있습니다. 

당신은 이 arr을 쿼드 트리와 같은 방식으로 압축하고자 합니다. 

​

구체적인 방식은 다음과 같습니다.

  1. 당신이 압축하고자 하는 특정 영역을 S라고 정의합니다.

  2. 만약 S 내부에 있는 모든 수가 같은 값이라면, S를 해당 수 하나로 압축시킵니다.

  3. 그렇지 않다면, S를 정확히 4개의 균일한 정사각형 영역(입출력 예를 참고해주시기 바랍니다.)으로 쪼갠 뒤, 

       각 정사각형 영역에 대해 같은 방식의 압축을 시도합니다.

​

arr이 매개변수로 주어집니다. 위와 같은 방식으로 arr을 압축했을 때, 

배열에 최종적으로 남는 0의 개수와 1의 개수를 배열에 담아서 return 하도록 solution 함수를 완성해주세요.

​

​

제한사항

  - arr의 행의 개수는 1 이상 1024 이하이며, 2의 거듭 제곱수 형태를 하고 있습니다. 

    즉, arr의 행의 개수는 1, 2, 4, 8, ..., 1024 중 하나입니다.

  - arr의 각 행의 길이는 arr의 행의 개수와 같습니다. 즉, arr은 정사각형 배열입니다.

  - arr의 각 행에 있는 모든 값은 0 또는 1 입니다.

​

입출력 예

arr

result

[[1,1,0,0],[1,0,0,0],[1,0,0,1],[1,1,1,1]]

[4,9]

[[1,1,1,1,1,1,1,1],[0,1,1,1,1,1,1,1],[0,0,0,0,1,1,1,1],[0,1,0,0,1,1,1,1],[0,0,0,0,0,0,1,1],[0,0,0,0,0,0,0,1],[0,0,0,0,1,0,0,1],[0,0,0,0,1,1,1,1]]

[10,15]

​

입출력 예 설명

입출력 예 #1

다음 그림은 주어진 arr을 압축하는 과정을 나타낸 것입니다.


최종 압축 결과에 0이 4개, 1이 9개 있으므로, [4,9]를 return 해야 합니다.

​

입출력 예 #2

다음 그림은 주어진 arr을 압축하는 과정을 나타낸 것입니다.


최종 압축 결과에 0이 10개, 1이 15개 있으므로, [10,15]를 return 해야 합니다.​





내 풀이

class Solution {
    public int[] solution(int[][] arr) {
        int[] answer = new int[2];
        
        int length = arr.length;
        int value = -1;
        
        while(length>1){
            for(int start_x=0; start_x+length<=arr.length; start_x+=length){
                for(int start_y=0; start_y+length<=arr.length; start_y+=length){
                    value = compression(arr, start_x, start_y, length);
                    
                    if(value != -1){
                        for(int i=start_x; i<start_x+length; i++){
                            for(int j=start_y; j<start_y+length; j++){
                                if(i==start_x && j==start_y) continue;
                                arr[i][j] = -1;
                            }
                        }
                    }
                }
            }
            
            if(length%2!=0) length++;
    
            length /= 2;
        }
        
        for(int i=0; i<arr.length; i++){
            for(int j=0; j<arr.length; j++){
                if(arr[i][j] == -1) continue;
                if(arr[i][j] == 0){
                    answer[0]++;
                }else{
                    answer[1]++;
                }
            }
        }
        
        return answer;
    }
    
    public int compression(int[][] arr, int start_x, int start_y, int length) {
        int first = arr[start_x][start_y];
        
        for(int i=start_x; i<start_x+length; i++){
            for(int j=start_y; j<start_y+length; j++){
                if(arr[i][j] == -1) continue;
                if(arr[i][j] != first) return -1;
            }
        }
        
        return first;
    }
}
0.13 ~ 55.61ms

​

​

다른사람풀이

코딩테스트 연습 / 월간 코드 챌린지 시즌1 / 쿼드압축 후 개수 세기 / 다른 사람의 풀이 / 유준혁

class Solution {
    int one = 0, zero = 0;
    void press(int[][] arr, int xs, int xe, int ys, int ye){
        int oneCnt = 0, max = (int)Math.pow(xe - xs, 2);
        for(int i = xs; i < xe; i++){
            for(int j = ys; j < ye; j++){
                oneCnt += arr[i][j];
            }
        }
        if(oneCnt == 0) zero++;
        else if(oneCnt == max) one++;
        else {
            int xm = (xe + xs) / 2;
            int ym = (ye + ys) / 2;
            press(arr, xs, xm, ys, ym);
            press(arr, xm, xe, ys, ym);
            press(arr, xs, xm, ym, ye);
            press(arr, xm, xe, ym, ye);
        }
    }
    public int[] solution(int[][] arr) {
        press(arr, 0, arr.length, 0, arr.length);
        return new int[]{zero, one};
    }
}
재귀함수....!

나보다 
1) 보기도 좋고
2) 시간도 덜 걸리는 코드!
0.05 ~ 44.77ms
