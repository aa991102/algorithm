문제 설명

게임 캐릭터를 4가지 명령어를 통해 움직이려 합니다. 명령어는 다음과 같습니다.

  U: 위쪽으로 한 칸 가기

  D: 아래쪽으로 한 칸 가기

  R: 오른쪽으로 한 칸 가기

  L: 왼쪽으로 한 칸 가기

​

캐릭터는 좌표평면의 (0, 0) 위치에서 시작합니다. 

좌표평면의 경계는 왼쪽 위(-5, 5), 왼쪽 아래(-5, -5), 오른쪽 위(5, 5), 오른쪽 아래(5, -5)로 이루어져 있습니다.


​

예를 들어, "ULURRDLLU"로 명령했다면


​

- 1번 명령어부터 7번 명령어까지 다음과 같이 움직입니다.


​

- 8번 명령어부터 9번 명령어까지 다음과 같이 움직입니다.


이때, 우리는 게임 캐릭터가 지나간 길 중 캐릭터가 처음 걸어본 길의 길이를 구하려고 합니다. 

예를 들어 위의 예시에서 게임 캐릭터가 움직인 길이는 9이지만, 캐릭터가 처음 걸어본 길의 길이는 7이 됩니다. 

(8, 9번 명령어에서 움직인 길은 2, 3번 명령어에서 이미 거쳐 간 길입니다)

​

단, 좌표평면의 경계를 넘어가는 명령어는 무시합니다.

​

예를 들어, "LULLLLLLU"로 명령했다면


​

- 1번 명령어부터 6번 명령어대로 움직인 후, 7, 8번 명령어는 무시합니다. 다시 9번 명령어대로 움직입니다.


이때 캐릭터가 처음 걸어본 길의 길이는 7이 됩니다.

​

명령어가 매개변수 dirs로 주어질 때, 게임 캐릭터가 처음 걸어본 길의 길이를 구하여 return 하는 solution 함수를 완성해 주세요.

​

제한사항

- dirs는 string형으로 주어지며, 'U', 'D', 'R', 'L' 이외에 문자는 주어지지 않습니다.

- dirs의 길이는 500 이하의 자연수입니다.

​

입출력 예

dirs

answer

"ULURRDLLU"

7

"LULLLLLLU"

7

입출력 예 설명

입출력 예 #1

문제의 예시와 같습니다.

​

입출력 예 #2

문제의 예시와 같습니다.






내 풀이

import java.util.HashMap;
class Solution {
    public int solution(String dirs) {
        int answer = 0;
        HashMap<String,String> map = new HashMap<>();
        int now_x = 0;
        int now_y = 0;
        
        for(int i=0; i<dirs.length(); i++){
            char dir = dirs.charAt(i);
            String now = (now_x<0 ? now_x : "+"+now_x)+","+now_y;
            
            if(dir=='U'){
                if(now_y==5) continue;
                now_y++;
            }else if(dir=='D'){
                if(now_y==-5) continue;
                now_y--;
            }else if(dir=='R'){
                if(now_x==5) continue;
                now_x++;
            }else if(dir=='L'){
                if(now_x==-5) continue;
                now_x--;
            }
            String next = (now_x<0 ? now_x : "+"+now_x)+","+now_y;
                
            if(map.containsKey(now)){
                if(!map.get(now).contains(next) ){
                    map.put(now, map.get(now)+"|"+next);
                    map.put(next, map.get(next)+"|"+now);
                    answer++; 
                }
            }else{
                map.put(now, next);
                map.put(next, now);
                answer++;
            }
        }
        return answer;
    }
}
19.43 ~ 31.44ms

이렇게 풀지 말자고 다짐하며....^^

​

​

다른사람풀이1

코딩테스트 연습 / Summer/Winter Coding(~2018) / 방문 길이 / 다른 사람의 풀이 / mkh9293

import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

class Solution {
    public int solution(String dirs) {
        Map<String, int[]> map = new HashMap<>();
        map.put("U", new int[] {0, 1});
        map.put("D", new int[] {0, -1});
        map.put("R", new int[] {1, 0});
        map.put("L", new int[] {-1, 0});

        String[] arr = dirs.split("");

        Set<String> set = new HashSet<>();        
        int cx = 0;
        int cy = 0;

        for(int i=0; i<arr.length; i++) {
            String s = arr[i];

            int x = map.get(s)[0];
            int y = map.get(s)[1];

            cx += x;
            cy += y;

            if(cx < -5 || cx > 5) {
                cx -= x;
                continue;
            }
            if(cy < -5 || cy > 5) {
                cy -= y;
                continue;
            }
            set.add(""+(cx-x)+ ""+ (cy-y)+ ""+cx + ""+cy);
            set.add(""+cx + ""+cy+""+(cx-x)+ ""+ (cy-y));
        } 
        return set.size()/2;
    }
}
16.22 ~ 29.07ms

​

다른사람풀이2

코딩테스트 연습 / Summer/Winter Coding(~2018) / 방문 길이 / 다른 사람의 풀이 / 김형민

class Solution {
    int[][] d = {{0, 1}, {-1, 0}, {0, -1}, {1, 0}}; // 원래 {{-1, 0}, {0, -1}, {1, 0}, {0, 1}}; 이랬는데 수정. 이동하는 방향이 정확하지 않은것같아서...(물론 정답에 영향은 없어요!)
    int[] d2 = {0x000f, 0x0f00, 0x00f0, 0xf000}; // 순서대로 U, L, D, R 를 나타낸다고 볼 수 있다. (예: 1111 0000 0000 0000 이면 움직임 U를 가진 것임)
    int[][] map = new int[11][11]; // map을 배열로 그려버리셨다. 맨 왼쪽 아래가 (-5,-5)가 아닌 (0,0)이 될 수 있게!

    public int solution(String dirs) {
        int answer = 0;
        Coord coord = new Coord(5, 5); // map의 가운데는 (5,5)

        for(int i = 0; i < dirs.length(); i++) {
            int nx, ny;
            switch (dirs.charAt(i)) {
            case 'U':
                answer += subFunc(coord, 0);
                break;
            case 'D':
                answer += subFunc(coord, 2);
                break;
            case 'L':
                answer += subFunc(coord, 1);
                break;
            case 'R':
                answer += subFunc(coord, 3);
                break;
            }
        }

        return answer;
    }

    public int subFunc(Coord coord, int dir) {
        int result = 0;
        int nx = coord.x + d[dir][0], ny = coord.y + d[dir][1];
        if((0 <= nx && nx < 11) && (0 <= ny && ny < 11)) {
            if((map[nx][ny] & d2[dir]) == 0) { // next위치에 해당하는 움직임(U/D/L/R)이 없을 경우
                map[nx][ny] |= d2[dir]; // next위치에 해당하는 움직임을 표시. (예: 움직임이 U인 경우, map[nx][ny]의 기존값이 0000 0000 0000 1111 이라면 1111 0000 0000 1111 으로 바뀜)
                map[coord.x][coord.y] |= d2[(dir + 2) % 4]; // 현재 위치에 해당하는 움직임의 반대를 표시. (예: (5,5)에서 U를 해서 (5,6)으로 바뀔때, 5,5에 D에 해당되는 것을 표시. 기존에 map[4][4]의 값이 0000 0000 0000 1111이라면 0000 0000 1111 1111 로 바뀜)
                result = 1;
            }
            coord.x = nx;
            coord.y = ny;
        }
        return result;
    }
}
class Coord {
    int x, y;
    Coord(int x, int y) {
        this.x = x;
        this.y = y;
    }
}
흠...아니 물론 정답에 영향을 주는건 아니지만... 이동하는 방향을 정확히 하려면

switch문에서 case 순서대로 subFunc(coord, dir)의 dir 부분에 3, 1, 0, 2 를 넣어야 하지 않나...?하는 생각이...??? 들었지만 어차피 

​

아니 근데 진짜로 중요한 것은...

실행시간 0.22 ~ 0.31ms !!!!!

비트 마스크를 이용해서 풀이하셨다!!!

내가 생각한대로 맘대로 해석해서 주석을 달아 보았는데, 약간 다른 사람은 이해 못할 것 같다...ㅠㅠ

​

코드에서 사용된 16진수는 비트 마스크를 이용할 때 자주 나오는 것 같아서 아예 표로 정리해버려따~

16진법 (Hexadecimal) - 10진법 (Decimal) - 2진법 (Binary)
0xf000 - 61440 - 1111 0000 0000 0000
0x0f00 - 3840 - 0000 1111 0000 0000
0x00f0 - 240 - 0000 0000 1111 0000
0x000f - 15 - 0000 0000 0000 1111

​
