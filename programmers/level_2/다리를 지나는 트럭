문제 설명

트럭 여러 대가 강을 가로지르는 일 차선 다리를 정해진 순으로 건너려 합니다. 모든 트럭이 다리를 건너려면 최소 몇 초가 걸리는지 알아내야 합니다. 트럭은 1초에 1만큼 움직이며, 다리 길이는 bridge_length이고 다리는 무게 weight까지 견딥니다.

※ 트럭이 다리에 완전히 오르지 않은 경우, 이 트럭의 무게는 고려하지 않습니다.

예를 들어, 길이가 2이고 10kg 무게를 견디는 다리가 있습니다. 무게가 [7, 4, 5, 6]kg인 트럭이 순서대로 최단 시간 안에 다리를 건너려면 다음과 같이 건너야 합니다.

경과 시간

다리를 지난 트럭

다리를 건너는 트럭

대기 트럭

0

[]

[]

[7,4,5,6]

1~2

[]

[7]

[4,5,6]

3

[7]

[4]

[5,6]

4

[7]

[4,5]

[6]

5

[7,4]

[5]

[6]

6~7

[7,4,5]

[6]

[]

8

[7,4,5,6]

[]

[]

따라서, 모든 트럭이 다리를 지나려면 최소 8초가 걸립니다.

solution 함수의 매개변수로 다리 길이 bridge_length, 다리가 견딜 수 있는 무게 weight, 트럭별 무게 truck_weights가 주어집니다. 이때 모든 트럭이 다리를 건너려면 최소 몇 초가 걸리는지 return 하도록 solution 함수를 완성하세요.

​

제한 조건

bridge_length는 1 이상 10,000 이하입니다.

weight는 1 이상 10,000 이하입니다.

truck_weights의 길이는 1 이상 10,000 이하입니다.

모든 트럭의 무게는 1 이상 weight 이하입니다.

​

입출력 예

bridge_length

weight

truck_weights

return

2

10

[7,4,5,6]

8

100

100

[10]

101

100

100

[10,10,10,10,10,10,10,10,10,10]

110






내 풀이

class Solution {
    public int solution(int bridge_length, int weight, int[] truck_weights) {
        int answer = 0;
        int[] in_bridge_time = new int[truck_weights.length]; //다리 위에서의 시간(위치)
        int bridge_weight = 0; // 다리 위의 무게
        int i = 0; // 다리에 들어오는 트럭 인덱스
        int j = 0; // 다리에서 나가는 트럭 인덱스
        
        while(j<truck_weights.length){
            answer++;

            // 1. 다리에 지탱할 수 있으면 truck_weights[i]를 다리에 추가
            if((bridge_weight <= weight)&&(i < truck_weights.length ) && (bridge_weight + truck_weights[i] <= weight)){
                bridge_weight += truck_weights[i];
                i++;
            }
            
            // 2. 다리 위의 트럭 시간 계산
            for(int h=j; h<i; h++){
                in_bridge_time[h]++;
            }
            
            // 3. 나갈 트럭 내보내기
            if(in_bridge_time[j]==bridge_length){
                bridge_weight -= truck_weights[j];
                j++;
            }
        }
        
        return ++answer;
    }
}
마지막 트럭이 다리 길이를 지나 벗어나는데 1초가 걸리니까 return ++answer;
실행시간은 0.02 ~ 18.35ms

​

다른사람풀이1 < Queue >

코딩테스트 연습 / 스택/큐 / 다리를 지나는 트럭 / 다른 사람의 풀이 / HamYoungChan , 탈퇴한 사용자 , - , fkalstj99 , 김우성 외 1 명

import java.util.*;

class Solution {
    class Truck {
        int weight;
        int move;

        public Truck(int weight) {
            this.weight = weight;
            this.move = 1;
        }

        public void moving() {
            move++;
        }
    }

    public int solution(int bridgeLength, int weight, int[] truckWeights) {
        Queue<Truck> waitQ = new LinkedList<>();
        Queue<Truck> moveQ = new LinkedList<>();

        for (int t : truckWeights) {
            waitQ.offer(new Truck(t));
        }

        int answer = 0;
        int curWeight = 0;

        while (!waitQ.isEmpty() || !moveQ.isEmpty()) {
            answer++;

            if (moveQ.isEmpty()) {
                Truck t = waitQ.poll();
                curWeight += t.weight;
                moveQ.offer(t);
                continue;
            }

            for (Truck t : moveQ) {
                t.moving();
            }

            if (moveQ.peek().move > bridgeLength) {
                Truck t = moveQ.poll();
                curWeight -= t.weight;
            }

            if (!waitQ.isEmpty() && curWeight + waitQ.peek().weight <= weight) {
                Truck t = waitQ.poll();
                curWeight += t.weight;
                moveQ.offer(t);
            }
        }

        return answer;
    }
}
와 Queue를 move랑 wait 두 개를 이용하셨구나!!

그리고 트럭이랑 관련된 클래스를 따로 만드셨고...

클래스를 따로 만들 생각은 하지도 못했네...

​

다른사람풀이2 < Stack, Map >

코딩테스트 연습 / 스택/큐 / 다리를 지나는 트럭 / 다른 사람의 풀이 / aispark , 승환 , - , - , 김세준 외 3 명

import java.util.HashMap;
import java.util.Map;
import java.util.Stack;

class Solution {
    public int solution(int bridge_length, int weight, int[] truck_weights) {
            Stack<Integer> truckStack = new Stack<>();
            Map<Integer, Integer> bridgeMap = new HashMap<>();

            for (int i = truck_weights.length-1; i >= 0; i--)
                truckStack.push(truck_weights[i]);

            int answer = 0;
            int sum = 0;
            while(true) {
                answer++;

                if (bridgeMap.containsKey(answer))
                    bridgeMap.remove(answer);

                sum = bridgeMap.values().stream().mapToInt(Number::intValue).sum();

                if (!truckStack.isEmpty())
                    if (sum + truckStack.peek() <= weight)
                        bridgeMap.put(answer + bridge_length, truckStack.pop());

                if (bridgeMap.isEmpty() && truckStack.isEmpty())
                    break;


            }
            return answer;
    }
}
Stack을 사용할줄은 몰랐다!!!

Map을 이용해서 지워나가는게 재밌는 것 같다.

​

다른사람풀이3

코딩테스트 연습 / 스택/큐 / 다리를 지나는 트럭 / 다른 사람의 풀이 / 김태훈

import java.util.LinkedList;
import java.util.Queue;

class Solution {
    public int solution(int bridge_length, int weight, int[] truck_weights) {
        Queue<Integer> queue = new LinkedList<>();
        int count = 0;
        int time = 0;

        for(int i = 0; i < bridge_length; i++) {
            queue.add(0);
        }

        int temp;
        int ind = 0;
        while(true) {
            time++;
            temp = queue.poll();
            if(temp != 0) count++;
            if(count == truck_weights.length) {
                return time;
            } else if(ind<truck_weights.length) {
                if(Weight(queue) + truck_weights[ind] > weight) {
                    queue.add(0);
                } else {
                    queue.add(truck_weights[ind]);
                    ind++;
                }
            }
        }
    }

    private int Weight(Queue<Integer> queue) {
        int sum = 0;
        for(Integer i : queue) {
            sum = sum + i;
        }
        return sum;
    }
}
헐 이분은 내가 처음에 큐로 하고싶었던 방법대로 푸셨다...! 난 생각이 안나서 포기했는데..

0을 큐에 넣다니...!
