문제 설명

전화번호부에 적힌 전화번호 중, 한 번호가 다른 번호의 접두어인 경우가 있는지 확인하려 합니다.

​

전화번호가 다음과 같을 경우, 구조대 전화번호는 영석이의 전화번호의 접두사입니다.

구조대 : 119

박준영 : 97 674 223

지영석 : 11 9552 4421

​

전화번호부에 적힌 전화번호를 담은 배열 phone_book 이 solution 함수의 매개변수로 주어질 때, 어떤 번호가 다른 번호의 접두어인 경우가 있으면 false를 그렇지 않으면 true를 return 하도록 solution 함수를 작성해주세요.

​

제한 사항

- phone_book의 길이는 1 이상 1,000,000 이하입니다.

- 각 전화번호의 길이는 1 이상 20 이하입니다.

- 같은 전화번호가 중복해서 들어있지 않습니다.

​

입출력 예제

phone_book

return

["119", "97674223", "1195524421"]

false

["123","456","789"]

true

["12","123","1235","567","88"]

false

입출력 예 설명

입출력 예 #1

앞에서 설명한 예와 같습니다.

​

입출력 예 #2

한 번호가 다른 번호의 접두사인 경우가 없으므로, 답은 true입니다.

​

입출력 예 #3

첫 번째 전화번호, “12”가 두 번째 전화번호 “123”의 접두사입니다. 따라서 답은 false입니다.

​

알림

2021년 3월 4일, 테스트 케이스가 변경되었습니다. 이로 인해 이전에 통과하던 코드가 더 이상 통과하지 않을 수 있습니다.

출처





내 풀이

import java.util.*;
class Solution {
    public boolean solution(String[] phone_book) {
        boolean answer = true;
        StringBuilder sb = new StringBuilder();
        int first_index;
        int last_index;
        
        Arrays.sort(phone_book, Collections.reverseOrder()); // 내림차순으로 정렬
        
        for(int i=0; i<phone_book.length; i++){
            sb.append('*'+phone_book[i]);
            
            first_index = sb.indexOf('*'+phone_book[i]);
            last_index = sb.lastIndexOf('*'+phone_book[i]);
            
            if(first_index != last_index){
                answer = false;
                break;
            }
        }
        
        return answer;
    }
}



다른사람풀이1 (원래코드 부분수정)

코딩테스트 연습 / 해시 / 전화번호 목록 / 다른 사람의 풀이 / - , - , 한장호 , 권일우 , 신제문 외 4 명

import java.util.Arrays;

class Solution {
    public boolean solution(String[] phoneBook) {
        Arrays.sort(phoneBook);
        for(int i=0; i<phoneBook.length; i++){
            System.out.println(phoneBook[i]);
        }
        boolean result = true;
        for (int i=0; i<phoneBook.length-1; i++) {
            if (phoneBook[i+1].startsWith(phoneBook[i])) {
                result = false;
                break;
            }
        }
        return result;
    }
}
원래코드는 if문 안에 startsWith()가 아니라 contains()였는데, 정확도 테스트 13번에서 실패!

​

만약, phoneBook배열이 ["11", "211"] 이렇게 주어질 때, 

"211"이 "11"로 시작하지 않았으므로 문제의 정답은 true를 리턴해야 하는데

contains()의 경우 "211"이 "11"을 포함하니까 if문에 걸려 false를 리턴하게 된다.

​

그래서 contains() -> startsWith() 로 변경!

결과는 대성공 ★★★



오늘도 배워갑니다!!

s.startsWith(String s) : 파라미터로 들어오는 문자열로 시작하는지 확인해서 boolean값을 리턴

반대로 endsWith()는 해당 문자열로 끝나는지 확인해주는 함수~

​



다른사람풀이2 < HashMap 사용 >

코딩테스트 연습 / 해시 / 전화번호 목록 / 다른 사람의 풀이 / 김태훈 , her0807 , 허정연 , 서지숙

import java.util.HashMap;
import java.util.Map;

class Solution {
    public boolean solution(String[] phoneBook) {
        boolean answer = true;

            Map<String, Integer> map = new HashMap<>();

            for(int i = 0; i < phoneBook.length; i++) {
                map.put(phoneBook[i], i);
            }

            for(int i = 0; i < phoneBook.length; i++) {
                for(int j = 0; j < phoneBook[i].length(); j++) {
                    if(map.containsKey(phoneBook[i].substring(0,j))) {
                        answer = false;
                        return answer;
                    }
                }
            }

            return answer;
    }
}
if문의 substring(0,j) 에서 

j < phoneBook[].length 라서 phoneBook[i]의 마지막 문자까지 검색하지 않는게 (예를 들어, "112"일때 "11"까지만 map에서 검색)

내가 기억해야할 포인트인 것 같다.

​
