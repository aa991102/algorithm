문제 설명

짝지어 제거하기는, 알파벳 소문자로 이루어진 문자열을 가지고 시작합니다. 

먼저 문자열에서 같은 알파벳이 2개 붙어 있는 짝을 찾습니다. 

그다음, 그 둘을 제거한 뒤, 앞뒤로 문자열을 이어 붙입니다. 

이 과정을 반복해서 문자열을 모두 제거한다면 짝지어 제거하기가 종료됩니다. 

​

문자열 S가 주어졌을 때, 짝지어 제거하기를 성공적으로 수행할 수 있는지 반환하는 함수를 완성해 주세요. 

성공적으로 수행할 수 있으면 1을, 아닐 경우 0을 리턴해주면 됩니다.

​

예를 들어, 문자열 S = baabaa 라면

b aa baa → bb aa → aa →

의 순서로 문자열을 모두 제거할 수 있으므로 1을 반환합니다.

​

제한사항

- 문자열의 길이 : 1,000,000이하의 자연수

- 문자열은 모두 소문자로 이루어져 있습니다.

​

입출력 예

s

result

baabaa

1

cdcd

0

입출력 예 설명

​

입출력 예 #1

위의 예시와 같습니다.

​

입출력 예 #2

문자열이 남아있지만 짝지어 제거할 수 있는 문자열이 더 이상 존재하지 않기 때문에 0을 반환합니다.




내 풀이 < 시간초과 실패 >​

import java.util.*;
class Solution {
    public int solution(String s) {
        List<String> list = new ArrayList<>(Arrays.asList(s.split(""))); 
        
        for(int i = 0; i < list.size()-1; i++){
            if(list.get(i).equals("")){
                if(i == list.size()-2){
                    break;
                }else{
                    continue;
                }
            }
            
            if(list.get(i).equals(list.get(i+1))){
                list.remove(i);
                list.remove(i);
                i = -1;
                continue;
            }
        }
        
        return list.isEmpty()?1:0;
    }
}

정확성 테스트 13문제는 모두 성공했는데....
걸린 시간이 8049.35ms..
효율성 테스트 6문제 모두 시간 초과로 실패.....





다른사람풀이1 < Stack >

코딩테스트 연습 / 2017 팁스타운 / 짝지어 제거하기 / 다른 사람의 풀이 / 임상현 , 최진영

import java.util.*;
class Solution {
    public int solution(String s) {
        int answer = 0;
        Stack<Character> stack = new Stack<>();

        for(char c : s.toCharArray()){
            if(stack.size() == 0){
                stack.push(c);
            }
            else if(stack.peek() == c){
                stack.pop();
            }
            else{
                stack.push(c);
            }
        }
        return stack.size() > 0 ? 0 : 1;
    }
}

문자에 한 번만 접근하면서 바로 해결해버리는 코드

정확성 테스트 실행 시간 0.23 ~ 23.37ms
효율성 테스트 실행 시간 49.30 ~ 71.36ms

​

다른사람풀이2 < ArrayList >

코딩테스트 연습 / 2017 팁스타운 / 짝지어 제거하기 / 다른 사람의 풀이 / - , 최성준

import java.util.*;
class Solution {
    public int solution(String s) {
        char[] c = s.toCharArray();

        ArrayList<Character> list = new ArrayList<>();

        for(char _c : c){
            Add(list, _c);
        }

        if(list.isEmpty()){
            return 1;
        }else {
            return 0;
        }
    }

    public static void Add(ArrayList _list, char _c){
        _list.add(_c);

        if(_list.size() > 1){
            if(_list.get(_list.size() - 2) == _list.get(_list.size() - 1)){
                _list.remove(_list.size() - 1);
                _list.remove(_list.size() - 1);
            }
        }
    }
}

이 코드도 위의 Stack을 이용한 방법과 같이 
문자 값을 입력받는 순간에 앞의 문자와 같으면 제거하고, 아니면 다음 문자를 입력받게 처리
