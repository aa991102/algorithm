문제 설명

땅따먹기 게임을 하려고 합니다. 땅따먹기 게임의 땅(land)은 총 N행 4열로 이루어져 있고, 모든 칸에는 점수가 쓰여 있습니다. 

1행부터 땅을 밟으며 한 행씩 내려올 때, 각 행의 4칸 중 한 칸만 밟으면서 내려와야 합니다. 

단, 땅따먹기 게임에는 한 행씩 내려올 때, 같은 열을 연속해서 밟을 수 없는 특수 규칙이 있습니다.

​

예를 들면,

| 1 | 2 | 3 | 5 |

| 5 | 6 | 7 | 8 |

| 4 | 3 | 2 | 1 |

로 땅이 주어졌다면, 1행에서 네번째 칸 (5)를 밟았으면, 2행의 네번째 칸 (8)은 밟을 수 없습니다.

​

마지막 행까지 모두 내려왔을 때, 얻을 수 있는 점수의 최대값을 return하는 solution 함수를 완성해 주세요. 

​

위 예의 경우, 

1행의 네번째 칸 (5), 2행의 세번째 칸 (7), 3행의 첫번째 칸 (4) 땅을 밟아 16점이 최고점이 되므로 16을 return 하면 됩니다.

​

제한사항

- 행의 개수 N : 100,000 이하의 자연수

- 열의 개수는 4개이고, 땅(land)은 2차원 배열로 주어집니다.

- 점수 : 100 이하의 자연수

​

입출력 예

land

answer

[[1,2,3,5],[5,6,7,8],[4,3,2,1]]

16

입출력 예 설명

입출력 예 #1

문제의 예시와 같습니다.






내 풀이 < 실패 >

class Solution {
    int solution(int[][] land) {
        int answer = 0;
        int pre = 0;
        int temp = 0;
        
        for(int start=0; start<4; start++){
            pre = start;
            temp = land[0][pre];
            
            for(int i=1; i<land.length; i++){
                int max = 0;
                int index = 0;

                for(int j=0; j<4; j++){
                    if( land[i][j]>max && j!=pre ){
                        max = land[i][j];
                        index = j;
                    }
                }
                pre = index;
                temp += max;
            }
            
            if(temp > answer){
                answer = temp;
            }
            
            temp = 0;
        }
        
        return answer;
    }
}
나름 열심히 짰는데...완전실패..!

​

[[4, 3, 2, 1], [2, 2, 2, 1], [6, 6, 6, 4], [8, 7, 6, 5]] 

이 경우 기댓값은 20이지만

내 코드로는 아래와 같은 과정으로 19가 나온다.

4 [0]

2 [1] 

6 [0] 

7 [1] 

temp: 19================== 

3 [1] 

2 [0] 

6 [1] 

8 [0] 

temp: 19================== 

2 [2]

2 [0] 

6 [1] 

8 [0] 

temp: 18================== 

1 [3]

2 [0] 

6 [1] 

8 [0] 

temp: 17==================

​

​

다른사람풀이1

코딩테스트 / 연습 연습문제 / 땅따먹기 / 다른 사람의 풀이 / -

class Solution {
    int solution(int[][] land) {
        int result = 0;
        int max = 0;

        for(int i=0; i<land.length-1; i++){
            int temp [] = new int[4];
            for(int j=0; j<4; j++){//i+1번째행에서 j를밟는게
                max = 0;    
                for(int k=0; k<4; k++){//가장 max인 K를 찾아라 i행에서
                    if(j==k){
                        continue; 
                    }
                    max = Math.max(max, land[i][k] + land[i+1][j]);
                }
                temp[j] = max;
            }
            land[i+1] = temp;
            temp = null;
        }

      for(int i=0; i<4; i++){
        result = Math.max(result, land[land.length-1][i]); 
      }
        return result;
    }
}
1.01 ~ 16.17ms

​

다른사람풀이2

코딩테스트 / 연습 연습문제 / 땅따먹기 / 다른 사람의 풀이 / - , JegalJisu , 이용준 , - , 이병창 외 3 명

class Solution {
    int solution(int[][] board) {
        int size = board.length;
        for(int i=1; i<size; i++) {
            board[i][0] += Math.max(board[i-1][1], Math.max(board[i-1][2], board[i-1][3]));
            board[i][1] += Math.max(board[i-1][0], Math.max(board[i-1][2], board[i-1][3]));
            board[i][2] += Math.max(board[i-1][0], Math.max(board[i-1][1], board[i-1][3]));
            board[i][3] += Math.max(board[i-1][0], Math.max(board[i-1][1], board[i-1][2]));
        }
        return Math.max(board[size-1][0], Math.max(board[size-1][1], Math.max(board[size-1][2], board[size-1][3])));
    }
}
0.33 ~ 21.87ms

굳이 4라고 알려준 이유가 뭘까 싶었는데 이런식으로 풀 수 있게끔 하기 위한 거였을까...?

​

DP(Dynamic Programming, 동적 프로그래밍)로 푸는 법을 배울 수 있는 시간이었다!
