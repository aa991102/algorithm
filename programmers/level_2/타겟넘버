문제 설명

n개의 음이 아닌 정수가 있습니다. 이 수를 적절히 더하거나 빼서 타겟 넘버를 만들려고 합니다. 

예를 들어 [1, 1, 1, 1, 1]로 숫자 3을 만들려면 다음 다섯 방법을 쓸 수 있습니다.

-1+1+1+1+1 = 3 

+1-1+1+1+1 = 3 

+1+1-1+1+1 = 3 

+1+1+1-1+1 = 3 

+1+1+1+1-1 = 3 

​

사용할 수 있는 숫자가 담긴 배열 numbers, 타겟 넘버 target이 매개변수로 주어질 때 숫자를 적절히 더하고 빼서 타겟 넘버를 만드는 방법의 수를 return 하도록 solution 함수를 작성해주세요.

​

제한사항

- 주어지는 숫자의 개수는 2개 이상 20개 이하입니다.

- 각 숫자는 1 이상 50 이하인 자연수입니다.

- 타겟 넘버는 1 이상 1000 이하인 자연수입니다.

​

입출력 예

numbers

target

return

[1, 1, 1, 1, 1]

3

5

입출력 예 설명

문제에 나온 예와 같습니다.





내 풀이

import java.util.ArrayList;
class Solution {
    ArrayList<Integer> list = new ArrayList<>(); 
    
    public int solution(int[] numbers, int target) {
        
        cal(numbers, 0, 0, target);
        
        int answer = list.size();
        
        return answer;
    }

    // numbers[]에 인덱스 0부터 차례대로 앞에서 계산한 값에 더하고 뺀다.
    public void cal(int[] numbers, int calculated, int index, int target){
        if(index==numbers.length){
            // 계산된 값이 target과 같으면 list에 담기
            if(calculated == target){
                list.add(calculated);
            }
            return; 
        } 
         
        int num = numbers[index];
        index++;
        
        cal(numbers, calculated+num, index, target);
        cal(numbers, calculated-num, index, target);
    }
}
0.23 ~ 13.49ms

​

사실 이 문제보고 '어려울것같다....못풀것같다...' 이렇게 생각하고 

막상 풀면서도 '틀리면 어떡하지..오래걸려서 시간초과나면 어떡하지' 하고 걱정했는데.... 어찌저찌 *성공*​ !!!​ 


문제를 보았을때 두려운 감정을 좀 완화시키는 방법을 찾아야 할 것 같다.... 

2021 카카오 인턴 코딩테스트 보면서도 사실 막상 풀면 별게 아닌데, 

풀면서 자꾸 긴장하고...못풀것같고...이래서 집중해서 빡!하면 해결했을 수도 있는데 그러질 못한 것 같다.

​

​

다른사람풀이

코딩테스트 연습 / 깊이/너비 우선 탐색(DFS/BFS) / 타겟 넘버 / 다른 사람의 풀이 / 김형민 , 최건 , 임종수 , - , - 외 250 명

class Solution {
    public int solution(int[] numbers, int target) {
        int answer = 0;
        answer = dfs(numbers, 0, 0, target);
        return answer;
    }
    int dfs(int[] numbers, int n, int sum, int target) {
        if(n == numbers.length) {
            if(sum == target) {
                return 1;
            }
            return 0;
        }
        return dfs(numbers, n + 1, sum + numbers[n], target) + dfs(numbers, n + 1, sum - numbers[n], target);
    }
}
오오오!! 굳이 리스트에 값을 넣지 않고, 
그냥 타겟 넘버와 같으면 1을 리턴, 아니면 0을 리턴해서 그걸 다 더하면 되는구나!!!!

실행시간은 0.24 ~ 8.07ms
