문제 설명

신입사원 어피치는 카카오톡으로 전송되는 메시지를 압축하여 전송 효율을 높이는 업무를 맡게 되었다. 메시지를 압축하더라도 전달되는 정보가 바뀌어서는 안 되므로, 압축 전의 정보를 완벽하게 복원 가능한 무손실 압축 알고리즘을 구현하기로 했다.

​

어피치는 여러 압축 알고리즘 중에서 성능이 좋고 구현이 간단한 LZW(Lempel–Ziv–Welch) 압축을 구현하기로 했다. LZW 압축은 1983년 발표된 알고리즘으로, 이미지 파일 포맷인 GIF 등 다양한 응용에서 사용되었다.

​

LZW 압축은 다음 과정을 거친다.

  1. 길이가 1인 모든 단어를 포함하도록 사전을 초기화한다.

  2. 사전에서 현재 입력과 일치하는 가장 긴 문자열 w를 찾는다.

  3. w에 해당하는 사전의 색인 번호를 출력하고, 입력에서 w를 제거한다.

  4. 입력에서 처리되지 않은 다음 글자가 남아있다면(c), w+c에 해당하는 단어를 사전에 등록한다.

  5. 단계 2로 돌아간다.

​

압축 알고리즘이 영문 대문자만 처리한다고 할 때, 사전은 다음과 같이 초기화된다. 

사전의 색인 번호는 정수값으로 주어지며, 1부터 시작한다고 하자.

색인 번호

1

2

3

...

24

25

26

단어

A

B

C

...

X

Y

Z

예를 들어 입력으로 KAKAO가 들어온다고 하자.

1. 현재 사전에는 KAKAO의 첫 글자 K는 등록되어 있으나, 두 번째 글자까지인 KA는 없으므로, 

     첫 글자 K에 해당하는 색인 번호 11을 출력하고, 다음 글자인 A를 포함한 KA를 사전에 27 번째로 등록한다.

2. 두 번째 글자 A는 사전에 있으나, 세 번째 글자까지인 AK는 사전에 없으므로, 

     A의 색인 번호 1을 출력하고, AK를 사전에 28 번째로 등록한다.

3. 세 번째 글자에서 시작하는 KA가 사전에 있으므로, 

     KA에 해당하는 색인 번호 27을 출력하고, 다음 글자 O를 포함한 KAO를 29 번째로 등록한다.

4. 마지막으로 처리되지 않은 글자 O에 해당하는 색인 번호 15를 출력한다.

현재 입력(w)

다음 글자(c)

출력

사전 추가(w+c)

K

A

11

27: KA

A

K

1

28: AK

KA

O

27

29: KAO

O

15

이 과정을 거쳐 다섯 글자의 문장 KAKAO가 4개의 색인 번호 [11, 1, 27, 15]로 압축된다.

입력으로 TOBEORNOTTOBEORTOBEORNOT가 들어오면 다음과 같이 압축이 진행된다.​

현재 입력(w)

다음 글자(c)

출력

사전 추가(w+c)

T

O

20

27: TO

O

B

15

28: OB

B

E

2

29: BE

E

O

5

30: EO

O

R

15

31: OR

R

N

18

32: RN

N

O

14

33: NO

O

T

15

34: OT

T

T

20

35: TT

TO

B

27

36: TOB

BE

O

29

37: BEO

OR

T

31

38: ORT

TOB

E

36

39: TOBE

EO

R

30

40: EOR

RN

O

32

41: RNO

OT

34

입력 형식

입력으로 영문 대문자로만 이뤄진 문자열 msg가 주어진다. msg의 길이는 1 글자 이상, 1000 글자 이하이다.

​

출력 형식

주어진 문자열을 압축한 후의 사전 색인 번호를 배열로 출력하라.

​

입출력 예제

msg

answer

KAKAO

[11, 1, 27, 15]

TOBEORNOTTOBEORTOBEORNOT

[20, 15, 2, 5, 15, 18, 14, 15, 20, 27, 29, 31, 36, 30, 32, 34]

ABABABABABABABAB

[1, 2, 27, 29, 28, 31, 30]



================================================================

카카오 문제 풀이  카카오 신입 공채 3차 코딩 테스트 문제 해설

​

GIF 파일 등에서 실제로 쓰이는 LZW 알고리즘을 설명해주고, 구현하는 문제입니다. 

실제로 쓰이는 알고리즘을 구현해보는 것이 어떠셨나요? 

압축이라는 말만으로 얼핏 어려워 보이지만, 설명에 나온 의사코드Pseudocode를 그대로 따라서 구현만 하면 되는 문제로, 

기초적인 문자열과 배열을 다룰 수 있다면 풀 수 있는 문제입니다.

​

이 문제의 정답률은 95.80%입니다. 가장 많은 지원자가 잘 풀어주셨습니다. 

언어별로는 Java 언어 사용자들이 조금 어려워했습니다.

================================================================


내 풀이

import java.util.*;
class Solution {
    public int[] solution(String msg) {
        ArrayList<Integer> list = new ArrayList<>(); // 출력값 담을 리스트
        Map<String,Integer> map = new HashMap<>(); // 사전(단어,색인 번호)
        
        char alphabet = 'A';
        int index = 1; // 사전 색인 번호
        
        // 사전에 알파벳 추가
        while(alphabet <= 'Z'){
            map.put("" + alphabet++, index++);
        }
        
        // 압축
        for(int i=0; i<msg.length(); i++){
            String w = "" + msg.charAt(i);
            int j = i+1; 
            
            while(j<msg.length()){
                if(map.containsKey(w + msg.charAt(j))){
                    w = w + msg.charAt(j++);
                }else{
                    if(j<msg.length()-1){
                        map.put(w+msg.charAt(j), index++);
                    }
                    break;
                }
            }
            
            list.add(map.get(w));
            i = --j;
        }
        
        int[] answer = new int[list.size()];
        for(int i=0; i<answer.length; i++){
            answer[i] = list.get(i);
        }
        
        return answer;
    }
}
14.82 ~ 29.82ms

​

다른사람풀이

코딩테스트 연습 / 2018 KAKAO BLIND RECRUITMENT / [3차] 압축 / 다른 사람의 풀이 / 서원국

import java.util.ArrayList;

class Solution {
  public int[] solution(String msg) {
    ArrayList<String> dic = new ArrayList<String>();
    ArrayList<Integer> result = new ArrayList<Integer>();

    for(int i = 0 ; i < 26; i++) {
        dic.add(String.valueOf((char)('A'+i)));
    }

    for(int i = 0 ; i < msg.length() ; i++) {
        for(int j = dic.size()-1 ; j >= 0 ; j--) {
            if(msg.substring(i).startsWith(dic.get(j))) {
                i += dic.get(j).length()-1;
                result.add(j+1);
                if(i+1 < msg.length())
                    dic.add(dic.get(j)+msg.charAt(i+1));
                break;
            }
        }
    }

    int[] answer = new int[result.size()];

    for(int i = 0 ; i < result.size() ; i++) 
        answer[i] = result.get(i);

    return answer;  
  }
}
0.09 ~ 51.65ms

​

오우 실행시간의 편차가 너무 큰 거 아닙니까...? 왜일까...??? 

msg가 엄청 길고 반복되는 글자가 적으면 사전에서 찾는 for문을 그만큼 많이 돌아야 해서 그런가..?

​
