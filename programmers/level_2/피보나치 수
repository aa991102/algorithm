문제 설명

피보나치 수는 F(0) = 0, F(1) = 1일 때, 1 이상의 n에 대하여 F(n) = F(n-1) + F(n-2) 가 적용되는 수 입니다.

​

예를들어

F(2) = F(0) + F(1) = 0 + 1 = 1

F(3) = F(1) + F(2) = 1 + 1 = 2

F(4) = F(2) + F(3) = 1 + 2 = 3

F(5) = F(3) + F(4) = 2 + 3 = 5

와 같이 이어집니다.

​

2 이상의 n이 입력되었을 때, n번째 피보나치 수를 1234567으로 나눈 나머지를 리턴하는 함수, solution을 완성해 주세요.

​

제한 사항

* n은 1이상, 100000이하인 자연수입니다.

​

입출력 예

n

return

3

2

5

5

입출력 예 설명

피보나치수는 0번째부터 0, 1, 1, 2, 3, 5, ... 와 같이 이어집니다.

1234567로 나눈 나머지를 리턴하는 부분에 대한 설명을 가져와봤다. (질문하기에서)

​

문제에서 1234567로 나눈 나머지를 정답으로 내놓으라는 것은 문제를 꼰 것이 아니라 int 자료형의 범위 내에 항상 값이 있을 수 있도록 한 배려이며, 자료형의 크기에 제한이 있는 언어를 쓸 경우 (A + B) % C ≡ ( ( A % C ) + ( B % C) ) % C라는 성질을 이용해서 매번 계산 결과에 1234567으로 나눈 나머지를 대신 넣는 것으로 int 범위 내에 항상 값이 존재함을 보장할 수 있다.





다른사람풀이

https://ivory-room.tistory.com/45 [개발로 자기개발]

class Solution {
 
//재귀함수 ->시간초과
//    public static int solution(int n) {
//        if(n<2) return n;
//        else return (solution(n-1) + solution(n-2)) % 1234567;
//    }
 
    public int solution(int n) {
        int answer = 0;
        //n이 3일때
        //f(3) = f(1)+f(2) = 1+1 = 2이므로 숫자 초기화
        int num1 = 1;
        int num2 = 1;
        
        if(n==1 || n==2) return 1;
        else {
            for(int i=3; i<=n; i++) {
                answer = (num1+num2)%1234567;
                num1 = num2;//전전수
                num2 = answer;//전수
                
            }
            return answer;
        }
    }
}
헉. 재귀함수로 풀다가 시간초과 나서 포기했는데 그냥 for문이 있었다... 아니 왜 이 생각을 못한 거지 나란 녀석...?

​

재귀로 풀면
로직이 쉬운 반면,
연산이 반복될 수록 너무 많은 메모리를 차지해서 스택, 힙 오버플로우 등의 문제와 함께 연산 속도가 갈수록 느려진다는 시간복잡도 측면에서의 치명적 단점이 있기 때문에
작은 케이스면 몰라도 대량의 건을 처리해야 하는 경우에는 쓰지 않는게 좋다고 함!!!!
