문제 설명

가로 길이가 Wcm, 세로 길이가 Hcm인 직사각형 종이가 있습니다. 종이에는 가로, 세로 방향과 평행하게 격자 형태로 선이 그어져 있으며, 모든 격자칸은 1cm x 1cm 크기입니다. 이 종이를 격자 선을 따라 1cm × 1cm의 정사각형으로 잘라 사용할 예정이었는데, 누군가가 이 종이를 대각선 꼭지점 2개를 잇는 방향으로 잘라 놓았습니다. 그러므로 현재 직사각형 종이는 크기가 같은 직각삼각형 2개로 나누어진 상태입니다. 새로운 종이를 구할 수 없는 상태이기 때문에, 이 종이에서 원래 종이의 가로, 세로 방향과 평행하게 1cm × 1cm로 잘라 사용할 수 있는 만큼만 사용하기로 하였습니다.

​

가로의 길이 W와 세로의 길이 H가 주어질 때, 사용할 수 있는 정사각형의 개수를 구하는 solution 함수를 완성해 주세요.

​

제한사항

W, H : 1억 이하의 자연수

​

입출력 예

W

H

result

8

12

80

입출력 예 설명

입출력 예 #1

가로가 8, 세로가 12인 직사각형을 대각선 방향으로 자르면 총 16개 정사각형을 사용할 수 없게 됩니다. 원래 직사각형에서는 96개의 정사각형을 만들 수 있었으므로, 96 - 16 = 80 을 반환합니다.






내 풀이

class Solution {
    public long solution(int w, int h) {
        long answer = 0;
        
        for(long i=1; i<w; i++){
            answer += Math.floor(h*i/w);
        }
        
        return answer*2;
    }
}
오우...사실 기울기 구하는 공식 찾아보고 

먼저 기울기를 정의(기울기=h/w)한 다음에

for문에서 i랑 곱해줬는데...

계속 테스트케이스 6번에서 런타임오류가 발생했다....

​

그래서 질문하기를 둘러본 결과

곱하기를 먼저하고 나중에 나누기를 해야 오차가 덜하다는 것을 알게 되었다...

​

​

그 설명을 가져와 보자면...

​

​


조란

2020.11.9 00:15

cpp로 풀기는 했지만, 저도 마찬가지로 순서를 바꾸니 6번 케이스에서 실패가 떴습니다.

실패: floor(h / w * i);

통과: floor(h * i / w);

문제에서 h,w가 1억 이하의 자연수라고 주어집니다. 숫자가 매우 크기 때문에 곱하기와 나누기의 순서가 중요한 것으로 보입니다. 아무리 double형이라도 유효자리수가 53자리수로 소수점 자리수가 이것을 넘어가면 나머지 자리수는 버려집니다.

그래서 먼저 나누기를 해서 소수점이 버려진 후에 곱하기를 하면 (버려진 숫자 * i) 만큼의 오차가 생깁니다.

자연수끼리 곱한 후에 나눈 것은 마지막 결과값에서 버려진 소수점만큼의 오차가 발생하므로 실패코드보다 오차가 적습니다.

저도 6번의 케이스가 무엇인지 확인은 못했는데, 아마 이런 이유로 답이 틀렸을 것 같습니다!

아래 예시는 사칙연산의 순서로 인해 소수점 자리수가 달라지는 예시입니다. 정수가 달라지는 케이스는 못 찾았지만, 테스트해본 것을 첨부합니다!

double w = 12354291;

double h = 32344359;

int i = 43535;

printf(%.40lf\n, h / w * i);

printf(%.40lf\n, h * i / w);

결과

113977.5377692657639272511005401611328125000000

113977.5377692657493753358721733093261718750000

​

​

다른사람풀이1

코딩테스트 연습 / Summer/Winter Coding(2019) / 멀쩡한 사각형 / 다른 사람의 풀이 / 조규현 , 창씨

import java.math.BigInteger;

public class Solution {

    public long solution(int w, int h) {
        long totalCount = (long) w * (long) h;
        long diagonalCount = w + h - BigInteger.valueOf(w).gcd(BigInteger.valueOf(h)).longValue();

        return totalCount - diagonalCount;
    }
}
다른사람풀이2

코딩테스트 연습 / Summer/Winter Coding(2019) / 멀쩡한 사각형 / 다른 사람의 풀이 / 조소영

class Solution {
    public long solution(int w,int h) {
        long min=Math.min(w, h);
        long max=Math.max(w, h);
        long remain=1;
        while(remain>0) {
            remain=max%min;
            max=min;
            min=remain;
        }
        long answer = (long)w*(long)h-max*(w/max + h/max -1);
        return answer;
    }
}
음...다른사람풀이1,2 모두 최대공약수를 활용해서 풀었는데...음...이해도 못하겠다......대체 다들 이런 생각을 어떻게 하시는거죠..?
