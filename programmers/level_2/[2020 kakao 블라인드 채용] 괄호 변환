문제 설명

카카오에 신입 개발자로 입사한 "콘"은 선배 개발자로부터 개발역량 강화를 위해 다른 개발자가 작성한 소스 코드를 분석하여 문제점을 발견하고 수정하라는 업무 과제를 받았습니다. 소스를 컴파일하여 로그를 보니 대부분 소스 코드 내 작성된 괄호가 개수는 맞지만 짝이 맞지 않은 형태로 작성되어 오류가 나는 것을 알게 되었습니다.

​

수정해야 할 소스 파일이 너무 많아서 고민하던 "콘"은 소스 코드에 작성된 모든 괄호를 뽑아서 올바른 순서대로 배치된 괄호 문자열을 알려주는 프로그램을 다음과 같이 개발하려고 합니다.

​

용어의 정의

'(' 와 ')' 로만 이루어진 문자열이 있을 경우, '(' 의 개수와 ')' 의 개수가 같다면 이를 균형잡힌 괄호 문자열이라고 부릅니다.

그리고 여기에 '('와 ')'의 괄호의 짝도 모두 맞을 경우에는 이를 올바른 괄호 문자열이라고 부릅니다.

​

예를 들어, "(()))("와 같은 문자열은 "균형잡힌 괄호 문자열" 이지만 "올바른 괄호 문자열"은 아닙니다.

반면에 "(())()"와 같은 문자열은 "균형잡힌 괄호 문자열" 이면서 동시에 "올바른 괄호 문자열" 입니다.

​

'(' 와 ')' 로만 이루어진 문자열 w가 "균형잡힌 괄호 문자열" 이라면 다음과 같은 과정을 통해 "올바른 괄호 문자열"로 변환할 수 있습니다.

1. 입력이 빈 문자열인 경우, 빈 문자열을 반환합니다. 

2. 문자열 w를 두 "균형잡힌 괄호 문자열" u, v로 분리합니다. 

    단, u는 "균형잡힌 괄호 문자열"로 더 이상 분리할 수 없어야 하며, v는 빈 문자열이 될 수 있습니다. 

3. 문자열 u가 "올바른 괄호 문자열" 이라면 문자열 v에 대해 1단계부터 다시 수행합니다. 

    3-1. 수행한 결과 문자열을 u에 이어 붙인 후 반환합니다. 

4. 문자열 u가 "올바른 괄호 문자열"이 아니라면 아래 과정을 수행합니다. 

    4-1. 빈 문자열에 첫 번째 문자로 '('를 붙입니다. 

    4-2. 문자열 v에 대해 1단계부터 재귀적으로 수행한 결과 문자열을 이어 붙입니다. 

    4-3. ')'를 다시 붙입니다. 

    4-4. u의 첫 번째와 마지막 문자를 제거하고, 나머지 문자열의 괄호 방향을 뒤집어서 뒤에 붙입니다. 

    4-5. 생성된 문자열을 반환합니다. 

​

"균형잡힌 괄호 문자열" p가 매개변수로 주어질 때, 

주어진 알고리즘을 수행해 "올바른 괄호 문자열"로 변환한 결과를 return 하도록 solution 함수를 완성해 주세요.​

​

​

매개변수 설명

- p는 '(' 와 ')' 로만 이루어진 문자열이며 길이는 2 이상 1,000 이하인 짝수입니다.

- 문자열 p를 이루는 '(' 와 ')' 의 개수는 항상 같습니다.

- 만약 p가 이미 "올바른 괄호 문자열"이라면 그대로 return 하면 됩니다.

​

입출력 예

p

result

"(()())()"

"(()())()"

")("

"()"

"()))((()"

"()(())()"

입출력 예에 대한 설명

입출력 예 #1

- 이미 "올바른 괄호 문자열" 입니다.

​

입출력 예 #2

- 두 문자열 u, v로 분리합니다.

    u = ")("

    v = ""

​

- u가 "올바른 괄호 문자열"이 아니므로 다음과 같이 새로운 문자열을 만듭니다.

    - v에 대해 1단계부터 재귀적으로 수행하면 빈 문자열이 반환됩니다.

    - u의 앞뒤 문자를 제거하고, 나머지 문자의 괄호 방향을 뒤집으면 ""이 됩니다.

    - 따라서 생성되는 문자열은 "(" + "" + ")" + ""이며, 최종적으로 "()"로 변환됩니다.

​

입출력 예 #3

- 두 문자열 u, v로 분리합니다.

    u = "()"

    v = "))((()"

- 문자열 u가 "올바른 괄호 문자열"이므로 그대로 두고, v에 대해 재귀적으로 수행합니다.

- 다시 두 문자열 u, v로 분리합니다.

    u = "))(("

    v = "()"

- u가 "올바른 괄호 문자열"이 아니므로 다음과 같이 새로운 문자열을 만듭니다.

    - v에 대해 1단계부터 재귀적으로 수행하면 "()"이 반환됩니다.

    - u의 앞뒤 문자를 제거하고, 나머지 문자의 괄호 방향을 뒤집으면 "()"이 됩니다.

    - 따라서 생성되는 문자열은 "(" + "()" + ")" + "()"이며, 최종적으로 "(())()"를 반환합니다.

- 처음에 그대로 둔 문자열에 반환된 문자열을 이어 붙이면 "()" + "(())()" = "()(())()"가 됩니다.

​

카카오 출제 의도 및 해설   2020 신입 개발자 블라인드 채용 1차 코딩 테스트 문제 해설

​

출제 의도

- 주어진 로직을 그대로 구현할 수 있는지 파악

- 재귀함수를 이해하고 작성할 수 있는지 파악

해설

올바른 괄호쌍이라는 친숙한 내용과 관련된 문제입니다. 문제에는 짝이 맞지 않는 괄호가 주어졌을 때, 이를 짝이 맞는 괄호로 변환하는 방법이 제시되었습니다. 괄호쌍을 확인하는 방법과 재귀함수에 대해 이해하고 있고, 문제에 주어진 대로 정확히 코딩할 수 있다면 어렵지 않게 해결할 수 있었습니다.





내 풀이

class Solution {
    public String solution(String p) {
        String answer = parenthesisConvert(p);
        return answer;
    }
    
    // 괄호 변환 처리
    public String parenthesisConvert(String p){
        // 1. 빈 문자열인 경우, 빈 문자열을 반환
        if(p.length()==0) return "";
        
        boolean is_right = false;
        int lCnt = 0;
        int rCnt = 0;
        int end_index = 0; // 'u'의 마지막 인덱스
        
        // u와 v를 분리(혹은 구분)
        for(int i=0; i<p.length(); i++){
            if(p.charAt(i)=='('){
                lCnt++;
            }else{
                rCnt++;
            }

            if( lCnt == rCnt ){
                end_index = i+1;
                break;
            }
        } 
        
        String u = p.substring(0, end_index);
        String v = p.substring(end_index);
        
        // 균형잡힌 괄호문자열 'u'가 올바른 괄호 문자열인지 확인
        is_right = isRight(u);

        if(is_right){ // 'u'가 "올바른 괄호 문자열"인 경우
            return u + parenthesisConvert(v);
        }else{ // 'u'가 "올바른 괄호 문자열"이 아닌 경우
            return "("+parenthesisConvert(v)+")"+uChange(u);
        }
    }
    
    // "올바른 괄호 문자열"인지 확인
    public boolean isRight(String p){
        if(p.charAt(0)!='(' || p.charAt(p.length()-1)!=')'){
            return false;
        }
        
        int[] int_arr = new int[p.length()];
        
        for(int i=0; i<int_arr.length; i++){
            if(p.charAt(i)=='(') {
                int_arr[i] = 1; // '('
            }else{
                int_arr[i] = 2; // ')'
            }
        }
        
        for(int i=0; i<int_arr.length; i++){
            if(int_arr[i] == 2){ // ')'일 경우
                int_arr[i] = 0;
                
                int j=i-1;
                
                do{
                    if(int_arr[j]==1){
                        int_arr[j] = 0;
                        break;
                    }
                    j--;
                }while(j>=0);
            }
        }
        
        for(int i=0; i<int_arr.length; i++){
            if(int_arr[i]!=0) {
                return false;
            }
        }
        
        return true;
    }
    
    // 4-4. u의 첫 번째와 마지막 문자를 제거하고, 나머지 문자열의 괄호 방향을 뒤집어서 뒤에 붙입니다. 
    public String uChange(String p){
        String u = p.substring(1,p.length()-1);
        char[] char_arr = new char[u.length()];
        
        for(int i=0; i<char_arr.length; i++){
            if(u.charAt(i)=='('){
                char_arr[i] = ')';
            }else{
                char_arr[i] = '(';
            }
        }
        
        return new String(char_arr);
    }

}
1.47 ~ 22.04ms 

하하... 사실 정말 문제에서 그냥 방법을 떠먹여줬는데도... 맞추는데에만 급급해서 효율적인 부분은 생각하지를 못했다.

​

​

다른사람풀이1

코딩테스트 연습 / 2020 KAKAO BLIND RECRUITMENT / 괄호 변환 / 다른 사람의 풀이 / 전세진, 이진원

class Solution {
    public String solution(String balancedParenthesis) {
        return getCorrectParenthesis(balancedParenthesis);
    }

    private boolean isCorrectParenthesis(String balancedParenthesis) {
        int strLen = balancedParenthesis.length();
        int open = 0;
        for (int i = 0; i < strLen; i++) {
            if (balancedParenthesis.charAt(i) == '(') {
                open++;
            } else {
                if (open == 0) return false;
                open--;
            }
        }
        return true;
    }

    private String getCorrectParenthesis(String balancedParenthesis) {
        // 1. 입력이 빈 문자열인 경우, 빈 문자열을 반환합니다.
        if (balancedParenthesis.length() == 0) return balancedParenthesis;

        // 2. 문자열 w를 두 "균형잡힌 괄호 문자열" u, v로 분리합니다. 
        // 단, u는 "균형잡힌 괄호 문자열"로 더 이상 분리할 수 없어야 하며, v는 빈 문자열이 될 수 있습니다.
        int open = 0;
        int close = 0;
        for (char c : balancedParenthesis.toCharArray()) {
            if (c == '(') open++;
            else close++;
            if (open == close) break;
        }
        int uLen = open + close;
        String u = balancedParenthesis.substring(0, uLen);
        String v = balancedParenthesis.substring(uLen);

        if (isCorrectParenthesis(u)) {
            // 3. 문자열 u가 "올바른 괄호 문자열" 이라면 문자열 v에 대해 1단계부터 다시 수행합니다.
            //   3-1. 수행한 결과 문자열을 u에 이어 붙인 후 반환합니다.
            return u + getCorrectParenthesis(v);
        } else {
            // 4. 문자열 u가 "올바른 괄호 문자열"이 아니라면 아래 과정을 수행합니다.
            //   4-1. 빈 문자열에 첫 번째 문자로 '('를 붙입니다.
            //   4-2. 문자열 v에 대해 1단계부터 재귀적으로 수행한 결과 문자열을 이어 붙입니다.
            //   4-3. ')'를 다시 붙입니다.
            String uDash = "(" + getCorrectParenthesis(v) + ")";
            //   4-4. u의 첫 번째와 마지막 문자를 제거하고, 나머지 문자열의 괄호 방향을 뒤집어서 뒤에 붙입니다.
            for (int i = 1; i < uLen - 1; i++) {
                if (u.charAt(i) == '(') {
                    uDash += ")";
                } else {
                    uDash += "(";
                }
            }
            //   4-5. 생성된 문자열을 반환합니다.
            return uDash;
        }
    }
}

올바른 괄호 문자열인지 확인하는 부분이 이렇게 간단히???!!!!! 
여는 괄호의 경우엔 open을 증가, 닫는 괄호면 open을 감소, 그리고 닫는 괄호가 나왔는데 open의 값이 0이면 올바르지 못한 괄호로 처리!

실행시간은 1.47 ~ 15.97ms 

나도 꼭 이런 보기도 좋고, 효율도 좋은 코드를 짜게 될것이라..... 믿습니다......!

​

다른사람풀이2

코딩테스트 연습 / 2020 KAKAO BLIND RECRUITMENT / 괄호 변환 / 다른 사람의 풀이 / Nick H

class Solution {
    public String solution(String p) {
        return balancedParen(p, 0);
    }

    // p는 '(' 와 ')' 로만 이루어진 문자열이며 길이는 2 이상 1,000 이하인 짝수입니다.
    // 문자열 p를 이루는 '(' 와 ')' 의 개수는 항상 같습니다.
    private String balancedParen(String w, int fromW) {
        if (fromW == w.length()) return "";
        int leftOpen = 0;
        int balancedCount = 0;
        for (int i = fromW; i < w.length(); ++i) {
            char c = w.charAt(i);
            if (c == '(') {
                leftOpen++;
                balancedCount++;
            } else {
                if (leftOpen > 0) leftOpen--;
                balancedCount--;
            }
            if (balancedCount == 0) {
                if (leftOpen == 0) {
                    // 3. 문자열 u가 "올바른 괄호 문자열" 이라면 문자열 v에 대해 1단계부터 다시 수행합니다. 
                    // 3-1. 수행한 결과 문자열을 u에 이어 붙인 후 반환합니다.
                    return w.substring(fromW, i + 1) + balancedParen(w, i + 1);
                } else {
                    // 4. 문자열 u가 "올바른 괄호 문자열"이 아니라면 아래 과정을 수행합니다. 
                    // 4-1. 빈 문자열에 첫 번째 문자로 '('를 붙입니다. 
                    // 4-2. 문자열 v에 대해 1단계부터 재귀적으로 수행한 결과 문자열을 이어 붙입니다. 
                    // 4-3. ')'를 다시 붙입니다. 
                    // 4-4. u의 첫 번째와 마지막 문자를 제거하고, 나머지 문자열의 괄호 방향을 뒤집어서 뒤에 붙입니다. 
                    // 4-5. 생성된 문자열을 반환합니다.
                    return "(" + balancedParen(w, i + 1) + ")" + reverse(w, fromW + 1, i);
                }
            }
        }
        // should be unreachable.
        throw new IllegalArgumentException("the input should only contain parens and open and closing paren should match");
    }

    private String reverse(String w, int from, int to) {
        StringBuilder sb = new StringBuilder();
        for (int i = from; i < to; ++i) {
            sb.append((w.charAt(i) == ')' ? '(' : ')'));
        }
        return sb.toString();
    }
}
이 코드도 진짜 간결한 것도 간결한 건데, 내가 처음에 생각했던 방식을 구현한 코드라 가져와봤다.
String에서의 시작 위치를 파라미터로 보내서 그 위치부터 읽게끔 하는 방식을 머리속으로만 생각해봤는데 이렇게 구현하시다니!

그리고 물론 이건 코딩테스트니까 주어진 테스트 문자열이 있으니 괄호 이외의 문자가 들어올리가 없지만... 
그럼에도 불구하고 그런 경우에 exception을 던져준다는 것에 왜인지 모르게 감동....!!

실행시간은 1.42 ~ 15.60ms

​
