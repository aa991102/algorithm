문제 설명

이번 추석에도 시스템 장애가 없는 명절을 보내고 싶은 어피치는 서버를 증설해야 할지 고민이다. 장애 대비용 서버 증설 여부를 결정하기 위해 작년 추석 기간인 9월 15일 로그 데이터를 분석한 후 초당 최대 처리량을 계산해보기로 했다. 

초당 최대 처리량은 요청의 응답 완료 여부에 관계없이 임의 시간부터 1초(=1,000밀리초)간 처리하는 요청의 최대 개수를 의미한다.

​

입력 형식

- solution 함수에 전달되는 lines 배열은 N(1 ≦ N ≦ 2,000)개의 로그 문자열로 되어 있으며, 

  각 로그 문자열마다 요청에 대한 응답완료시간 S와 처리시간 T가 공백으로 구분되어 있다.

- 응답완료시간 S는 작년 추석인 2016년 9월 15일만 포함하여 고정 길이 2016-09-15 hh:mm:ss.sss 형식으로 되어 있다.

- 처리시간 T는 0.1s, 0.312s, 2s 와 같이 최대 소수점 셋째 자리까지 기록하며 뒤에는 초 단위를 의미하는 s로 끝난다.

- 예를 들어, 로그 문자열 2016-09-15 03:10:33.020 0.011s은 "2016년 9월 15일 오전 3시 10분 33.010초"부터 "2016년 9월 15일 오전 3

  시 10분 33.020초"까지 "0.011초" 동안 처리된 요청을 의미한다. (처리시간은 시작시간과 끝시간을 포함)

- 서버에는 타임아웃이 3초로 적용되어 있기 때문에 처리시간은 0.001 ≦ T ≦ 3.000이다.

l- ines 배열은 응답완료시간 S를 기준으로 오름차순 정렬되어 있다.

​

출력 형식

- solution 함수에서는 로그 데이터 lines 배열에 대해 초당 최대 처리량을 리턴한다.

​

입출력 예제

예제1

- 입력: [

"2016-09-15 01:00:04.001 2.0s",

"2016-09-15 01:00:07.000 2s"

]

- 출력: 1

​

예제2

- 입력: [

"2016-09-15 01:00:04.002 2.0s",

"2016-09-15 01:00:07.000 2s"

]

- 출력: 2

- 설명: 처리시간은 시작시간과 끝시간을 포함하므로

첫 번째 로그는 01:00:02.003 ~ 01:00:04.002에서 2초 동안 처리되었으며,

두 번째 로그는 01:00:05.001 ~ 01:00:07.000에서 2초 동안 처리된다.

따라서, 첫 번째 로그가 끝나는 시점과 두 번째 로그가 시작하는 시점의 구간인 01:00:04.002 ~ 01:00:05.001 1초 동안 최대 2개가 된다.

​

예제3

- 입력: [

"2016-09-15 20:59:57.421 0.351s",

"2016-09-15 20:59:58.233 1.181s",

"2016-09-15 20:59:58.299 0.8s",

"2016-09-15 20:59:58.688 1.041s",

"2016-09-15 20:59:59.591 1.412s",

"2016-09-15 21:00:00.464 1.466s",

"2016-09-15 21:00:00.741 1.581s",

"2016-09-15 21:00:00.748 2.31s",

"2016-09-15 21:00:00.966 0.381s",

"2016-09-15 21:00:02.066 2.62s"

]

- 출력: 7

- 설명: 아래 타임라인 그림에서 빨간색으로 표시된 1초 각 구간의 처리량을 구해보면 (1)은 4개, (2)는 7개, (3)는 2개임을 알 수 있다. 따라서 초당 최대 처리량은 7이 되며, 동일한 최대 처리량을 갖는 1초 구간은 여러 개 존재할 수 있으므로 이 문제에서는 구간이 아닌 개수만 출력한다.



=================================================================================
카카오 문제 풀이  카카오 신입 공채 1차 코딩 테스트 문제 해설

이번 테스트의 마지막 문제이고, 가장 어려운 문제입니다. 초당 최대 처리량이 되는 구간 윈도우를 찾아야 하는 문제인데요. 
당연히 처음부터 끝까지 스캔하기에는 범위가 너무 크고, 게다가 ms 단위로 되어 있기 때문에 첫 로그 시각부터 마지막 로그 시각까지 1ms씩 증가시키면서 1000ms 단위의 슬라이딩 윈도우로 풀면 24 * 3600 * 1000 * n * 1000ms 만큼의 연산이 필요하기 때문에 이렇게는 풀 수가 없습니다.

그렇다고 각 로그의 시작 시각부터 마지막 시각까지 1ms 씩 움직이면 time(ms) * n^2 이 되며, time(ms)의 값은 대부분 천 단위 이상이기 때문에 마찬가지로 타임아웃이 발생하여 풀 수가 없습니다. 그런데 자세히 살펴보면 요청량이 변하는 순간은 각 로그의 시작과 끝뿐임을 알 수 있습니다. 따라서, 각 로그 별 2번의 비교 연산만 수행하면 되며 2 * n^2, 빅오로 정리하면 O(n^2)에 풀 수가 있습니다. 빅오에서 제거된 상수항도 매우 작기 때문에 이 경우 무리 없이 문제를 풀 수 있게 되며 C++ 기준으로 10ms를 넘지 않습니다.

물론, 이 문제는 윈도우를 사용하지 않고도 풀 수 있는 방법이 있습니다. 효율적인 알고리즘을 쓴다면, O(n log n)으로 풀 수 있는 방법도 있으니 한 번 고민해보세요. 
이 문제는 가장 어려운 문제였던 만큼 정답률은 가장 낮은 17.99%입니다.
=================================================================================




내 풀이 < 실패 >

import java.util.HashMap;
class Solution {
    public int solution(String[] lines) {
        int answer = 0;
        HashMap<String, Integer> map = new HashMap<>();
        
        for(int i=0; i<lines.length; i++){
            String[] line = lines[i].split(" ");
            String[] time = line[1].split(":");
            int start_h = Integer.parseInt(time[0]);
            int end_h = start_h;
            int start_m = Integer.parseInt(time[1]);
            int end_m = start_m;
            double end_s_d = Double.parseDouble(time[2].substring(0, time[2].length()-1));
            double start_s_d = end_s_d - Double.parseDouble(line[2].substring(0, line[2].length()-1))+0.001;
            int end_s = (int)end_s_d;
            if(end_s_d - end_s > 0) end_s++;
            int start_s = (int)start_s_d;
            
            if(end_s < 0){
            	end_s += 60;
                end_m--;
            }
            if(end_s > 59){
            	end_s -= 60;
            	end_m++;
            }
            if(end_m < 0){
            	end_m += 60;
                end_h--;
            }
            if(end_m > 59){
            	end_m -= 60;
            	end_h++;
            }
            if(end_h < 0){
            	end_h += 24;
            }
            if(end_h > 23){
            	end_h -= 24;
            }
            if(start_s < 0){
                start_s += 60;
                start_m--;
            }
            if(start_s > 59){
                start_s -= 60;
                start_m++;
            }
            if(start_m < 0){
                start_m += 60;
                start_h--;
            }
            if(start_m > 59){
                start_m -= 60;
                start_h++;
            }
            if(start_h < 0){
                start_h += 24;
            }
            if(start_h > 23){
                start_h -= 24;
            }
            
            while(start_h!=end_h || start_m!=end_m || start_s!=end_s){
            	String str = "" + start_h + start_m + start_s++;
                
                if(start_s > 59){
                    start_s -= 60;
                    start_m++;
                }
                if(start_m > 59){
                    start_m -= 60;
                    start_h++;
                }
                if(start_h > 23){
                    start_h -= 24;
                }
                map.put(str, map.getOrDefault(str, 0)+1);
            }
            String str = "" + start_h + start_m + start_s;
            map.put(str, map.getOrDefault(str, 0)+1);
        }
        
        for(String key : map.keySet()){
            if(map.get(key)>answer) answer = map.get(key);
        }
        
        return answer;
    }
}
하하.... 애초에 문제도 잘못 이해해지만

(1초 단위로 트래픽양을 구하는 줄 알았다. 예를 들어, 12:59:01:000 ~ 12:59:03:000 이런 식으로.. 

  하지만 문제를 보면, 12:59:01:051 ~ 12:59:03:050 이렇게 구하는 것도 가능하다.)

문제를 해결하려 한 방식도.... 초에 해당하는 것을 map에 key로 입력해서 해당하는 초(ms)에 카운트를 하려고 했던거라... 

메모리를 너무 비효율적으로 사용한 것 같다.

​

다른사람풀이1

https://velog.io/@hyeon930/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4-%EC%B6%94%EC%84%9D-%ED%8A%B8%EB%9E%98%ED%94%BD-Java

import java.util.*;

class Solution {
	public int solution(String[] lines) {
		int answer = 0;
		int[] startTimes = new int[lines.length];
		int[] endTimes = new int[lines.length];
		
		getTimes(lines, startTimes, endTimes);
		
		for(int i = 0 ; i < lines.length ; ++i) {
			int cnt = 0;
			int startOfSection = startTimes[i];
			int endOfSection = startOfSection + 1000;
			
			for(int j = 0 ; j < lines.length ; ++j) {
				if(startTimes[j] >= startOfSection && startTimes[j] < endOfSection) {
					cnt++;
				} else if(endTimes[j] >= startOfSection && endTimes[j] < endOfSection) {
					cnt++;
				} else if(startTimes[j] <= startOfSection && endTimes[j] >= endOfSection) {
					cnt++;
				}
			}

			answer = cnt > answer ? cnt : answer;
		}
		
		for(int i = 0 ; i < lines.length ; ++i) {
			int cnt = 0;
			int startOfSection = endTimes[i];
			int endOfSection = startOfSection + 1000;
			
			for(int j = 0 ; j < lines.length ; ++j) {
				if(startTimes[j] >= startOfSection && startTimes[j] < endOfSection) {
					cnt++;
				} else if(endTimes[j] >= startOfSection && endTimes[j] < endOfSection) {
					cnt++;
				} else if(startTimes[j] <= startOfSection && endTimes[j] >= endOfSection) {
					cnt++;
				}
			}

			answer = cnt > answer ? cnt : answer;
		}
		
		return answer;
	}

	private void getTimes(String[] lines, int[] startTimes, int[] endTimes) {
		for(int i = 0 ; i < lines.length ; ++i) {
			String[] log = lines[i].split(" ");
			String[] responseTime = log[1].split(":");
			int processingTime = (int)(Double.parseDouble(log[2].substring(0, log[2].length() - 1)) * 1000);
			int startTime = 0;
			int endTime = 0;
			
			endTime += Integer.parseInt(responseTime[0]) * 60 * 60 * 1000;
			endTime += Integer.parseInt(responseTime[1]) * 60 * 1000;
			endTime += (int)(Double.parseDouble(responseTime[2]) * 1000);
			startTime = endTime - processingTime + 1;
			
			startTimes[i] = startTime;
			endTimes[i] = endTime;
		}
	}
}
이 분의 풀이 내용을 가져오면,

​

구간을 구하는 것이 아니라 처리량이 가장 많은 1초만 구하면 된다. 

근데 처리량이 변화는 시점은 하나의 데이터를 처리하는 시점과 완료한 시점이다. 

그렇다면 각 로그의 시작과 끝을 윈도우의 시작으로 보고 각 윈도우에 대해서 처리량이 얼마나 되는지 확인하면 되겠다.

- 각 로그의 시작점과 끝점을 구한다.

    - 시간을 밀리초로 환산한다.

    - 시작점은 응답완료시간 - 처리시간 + 1밀리초

- 시작점과 끝점을 기준으로하는 윈도우를 만들어 처리량을 확인한다.

    - 해당 윈도우에 처리중인 로그는 다음과 같다.

        - 시작점이 윈도우에 걸쳐있는 경우

        - 끝점이 윈도우에 걸쳐있는 경우

        - 로그가 윈도우를 포함하고 있는 경우

​

 
[프로그래머스] 추석 트래픽 (Java)
프로그래머스 추석 트래픽처리량이 변하는 것은 시작과 끝이다. 라는 것을 깨닫는데 굉장히 오래걸렸다. 생각했던 아이디어들은 다음과 같다.boolean 배열로 진짜 그래프처럼 만든다.단위가 밀리초라서 86400000개의 배열을 만들어야한다. boolean의 크기는 대략 1

velog.io

​

다른사람풀이2

코딩테스트 연습 / 2018 KAKAO BLIND RECRUITMENT / [1차] 추석 트래픽 / 다른 사람의 풀이 / bogurs

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;

class Solution {
  public int solution(String[] lines) throws ParseException {
          int answer = 1;
          int linesLen = lines.length;
          Date[] startTimeArr = new Date[lines.length];
          Date[] endTimeArr = new Date[lines.length];
          String prefixSec = "09:00:0";
          String postfixSec = ".000";
          String dateFormat = "HH:mm:ss.SSS";
          SimpleDateFormat sdf = new SimpleDateFormat(dateFormat);

          //시점 구하기(첫번째 구간의 시점은 제외함)
          for (int i = 0; i < linesLen; i++) {
              String[] splitLine = lines[i].split(" ");
              String secStr = prefixSec + splitLine[2].replace("s", "");
              if (!secStr.contains(".")) {
                  secStr = secStr.concat(postfixSec);
              }
              Date sec = sdf.parse(secStr);
              endTimeArr[i] = sdf.parse((splitLine[1]));
              startTimeArr[i] = new Date(endTimeArr[i].getTime() - sec.getTime() + 1);
          }

          //하나씩 구간을 옮겨가면서 현재 종점과 다음 구간의 시점의 시간 차이가 1초 미만인 대상을 모두 찾는다.
          //찾은 경우 임시 total에 1씩 증가시키고, 1회 loop가 종료되면 answer와 비교하여 최대값을 answer에 할당한다.
          for (int i = 1; i < linesLen; i++) {
              int newAnswer = 1;
              for (int j = i; j < linesLen; j++) {
                  if (startTimeArr[j].getTime() - endTimeArr[i-1].getTime() < 1000) { 
                      newAnswer++;
                  }
              }
              if (newAnswer > answer) {
                  answer = newAnswer;
              }
          }

          return answer;
      }
}
Date.getTime() : Date를 밀리세컨드로 변환해서 long형 숫자 데이터로 반환

​

​

아래 링크는 C++언어로 작성된 코드지만
O(n log n)으로 풀 수 있는 방법을 알려주어서 가져와보았다~^ㅁ^~

 
[프로그래머스]2018 KAKAO BLIND RECRUITMENT[1차] : 추석 트래픽 (level 3)(c++)
https://programmers.co.kr/learn/courses/30/lessons/17676 코딩테스트 연습 - [1차] 추석 트래픽 입력: [ 2016-09-15 20:59:57.421 0.351s, 2016-09-15 20:59:58.233 1.181s, 2016-09-15 20:59:58.299 0.8s, 201..

softworking.tistory.com

​
