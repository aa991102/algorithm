문제 설명

당신은 폰켓몬을 잡기 위한 오랜 여행 끝에, 홍 박사님의 연구실에 도착했습니다. 

홍 박사님은 당신에게 자신의 연구실에 있는 총 N 마리의 폰켓몬 중에서 N/2마리를 가져가도 좋다고 했습니다.

​

홍 박사님 연구실의 폰켓몬은 종류에 따라 번호를 붙여 구분합니다.

따라서 같은 종류의 폰켓몬은 같은 번호를 가지고 있습니다. 

예를 들어 연구실에 총 4마리의 폰켓몬이 있고, 각 폰켓몬의 종류 번호가 [3번, 1번, 2번, 3번]이라면 이는 3번 폰켓몬 두 마리, 1번 폰켓몬 한 마리, 2번 폰켓몬 한 마리가 있음을 나타냅니다. 

​

이때, 4마리의 폰켓몬 중 2마리를 고르는 방법은 다음과 같이 6가지가 있습니다.

첫 번째(3번), 두 번째(1번) 폰켓몬을 선택

첫 번째(3번), 세 번째(2번) 폰켓몬을 선택

첫 번째(3번), 네 번째(3번) 폰켓몬을 선택

두 번째(1번), 세 번째(2번) 폰켓몬을 선택

두 번째(1번), 네 번째(3번) 폰켓몬을 선택

세 번째(2번), 네 번째(3번) 폰켓몬을 선택

​

이때, 첫 번째(3번) 폰켓몬과 네 번째(3번) 폰켓몬을 선택하는 방법은 한 종류(3번 폰켓몬 두 마리)의 폰켓몬만 가질 수 있지만, 

다른 방법들은 모두 두 종류의 폰켓몬을 가질 수 있습니다. 

따라서 위 예시에서 가질 수 있는 폰켓몬 종류 수의 최댓값은 2가 됩니다.

​

당신은 최대한 다양한 종류의 폰켓몬을 가지길 원하기 때문에, 최대한 많은 종류의 폰켓몬을 포함해서 N/2마리를 선택하려 합니다. 

N마리 폰켓몬의 종류 번호가 담긴 배열 nums가 매개변수로 주어질 때, N/2마리의 폰켓몬을 선택하는 방법 중, 

가장 많은 종류의 폰켓몬을 선택하는 방법을 찾아, 그때의 폰켓몬 종류 번호의 개수를 return 하도록 solution 함수를 완성해주세요.

​

제한사항

- nums는 폰켓몬의 종류 번호가 담긴 1차원 배열입니다.

- nums의 길이(N)는 1 이상 10,000 이하의 자연수이며, 항상 짝수로 주어집니다.

- 폰켓몬의 종류 번호는 1 이상 200,000 이하의 자연수로 나타냅니다.

- 가장 많은 종류의 폰켓몬을 선택하는 방법이 여러 가지인 경우에도, 선택할 수 있는 폰켓몬 종류 개수의 최댓값 하나만 return 하면 됩니다.

​

입출력 예

nums

result

[3,1,2,3]

2

[3,3,3,2,2,4]

3

[3,3,3,2,2,2]

2

입출력 예 설명

​

입출력 예 #1

문제의 예시와 같습니다.

​

입출력 예 #2

6마리의 폰켓몬이 있으므로, 3마리의 폰켓몬을 골라야 합니다.

가장 많은 종류의 폰켓몬을 고르기 위해서는 3번 폰켓몬 한 마리, 2번 폰켓몬 한 마리, 4번 폰켓몬 한 마리를 고르면 되며, 따라서 3을 return 합니다.

​

입출력 예 #3

6마리의 폰켓몬이 있으므로, 3마리의 폰켓몬을 골라야 합니다.

가장 많은 종류의 폰켓몬을 고르기 위해서는 3번 폰켓몬 한 마리와 2번 폰켓몬 두 마리를 고르거나, 혹은 3번 폰켓몬 두 마리와 3번 폰켓몬 한 마리를 고르면 됩니다. 따라서 최대 고를 수 있는 폰켓몬 종류의 수는 2입니다.

​


내 풀이 < ArrayList >

import java.util.List;
import java.util.ArrayList;

class Solution {
    public int solution(int[] nums) {
        int answer = 0;
        List mine = new ArrayList();
        
        for(int num : nums){
            if(mine.size() == nums.length/2){
                break;
            }
            
            if(!mine.contains(num)){
                mine.add(num);
            }
        }
        
        answer = mine.size();
        
        return answer;
    }
}
0.04 ~ 37.16ms 

숫자가 커질 경우(배열의 길이가 길 수록) 그만큼 for문이 많이 돌아야 해서 실행속도의 편차가 큰 것 같다.

​

다른사람풀이1 <HashSet >

코딩테스트 연습 / 찾아라 프로그래밍 마에스터 / 폰켓몬 / 다른 사람의 풀이 / 김형석 , Junwoo Choi , 쿠쿡 , 권준호 , yongyong0514

import java.util.HashSet;

class Solution {
    public int solution(int[] nums) {

            HashSet<Integer> hs = new HashSet<>();

            for(int i =0; i<nums.length;i++) {
                hs.add(nums[i]);
            }

            if(hs.size()>nums.length/2)
                return nums.length/2;

            return hs.size();
    }
}
오호 HashSet은 Set 인터페이스를 구현해서 Set의 중복저장이 되지 않는 성질을 같고 있다. 

이를 이용해서 위와 같이 코드를 작성하면

0.04 ~ 7.71

이렇게 실행속도의 편차가 작아진다!!!

앞으로 중복을 피해야 하는 경우는 List 보다 Set 을 이용하는 걸루~

​

​

다른사람풀이2 < Stream >

코딩테스트 연습 / 찾아라 프로그래밍 마에스터 / 폰켓몬 / 다른 사람의 풀이 / 

import java.util.Arrays;
import java.util.stream.Collectors;

class Solution {
    public int solution(int[] nums) {
        return Arrays.stream(nums)
                .boxed()
                .collect(Collectors.collectingAndThen(Collectors.toSet(),
                        phonekemons -> Integer.min(phonekemons.size(), nums.length / 2)));
    }
}
3.06 ~ 19.88ms로 배열의 길이가 짧더라도 실행시간이 비교적 오래걸린다.


그래도 여기에 쓰인 메소드를 다시 보고싶어서 가져왔다.

Stream.boxed() : int, long, double 요소를 Integer, Long, Double 요소로 박싱해서 Stream을 생성.

Stream.collect() : 데이터의 중간 처리 후 마지막에 원하는 형태로 변환해 주는 역할.

Collectors.collectingAndThen() : 수집이 끝난 직후 결과에 대해 다른 작업을 수행할 수 있는 특수한 collector.

Collectors.toSet() : 모든 Stream의 요소를 Set 인스턴스로 수집하는데 사용.

Integer.min() : 입력받은 두 개의 인자 값 중 작은 값을 리턴.
