문제 설명

다트 게임

카카오톡에 뜬 네 번째 별! 심심할 땐? 카카오톡 게임별~


카카오톡 게임별의 하반기 신규 서비스로 다트 게임을 출시하기로 했다. 

다트 게임은 다트판에 다트를 세 차례 던져 그 점수의 합계로 실력을 겨루는 게임으로, 모두가 간단히 즐길 수 있다.

​

갓 입사한 무지는 코딩 실력을 인정받아 게임의 핵심 부분인 점수 계산 로직을 맡게 되었다. 

다트 게임의 점수 계산 로직은 아래와 같다.

​

 1. 다트 게임은 총 3번의 기회로 구성된다.

 2. 각 기회마다 얻을 수 있는 점수는 0점에서 10점까지이다.

 3. 점수와 함께 Single(S), Double(D), Triple(T) 영역이 존재하고 

     각 영역 당첨 시 점수에서 1제곱, 2제곱, 3제곱 (점수1 , 점수2 , 점수3 )으로 계산된다.

 4. 옵션으로 스타상(*) , 아차상(#)이 존재하며 스타상(*) 당첨 시 해당 점수와 바로 전에 얻은 점수를 각 2배로 만든다. 

     아차상(#) 당첨 시 해당 점수는 마이너스된다.

 5. 스타상(*)은 첫 번째 기회에서도 나올 수 있다. 이 경우 첫 번째 스타상(*)의 점수만 2배가 된다. (예제 4번 참고)

 6. 스타상(*)의 효과는 다른 스타상(*)의 효과와 중첩될 수 있다. 이 경우 중첩된 스타상(*) 점수는 4배가 된다. (예제 4번 참고)

 7. 스타상(*)의 효과는 아차상(#)의 효과와 중첩될 수 있다. 이 경우 중첩된 아차상(#)의 점수는 -2배가 된다. (예제 5번 참고)

 8. Single(S), Double(D), Triple(T)은 점수마다 하나씩 존재한다.

 9. 스타상(*), 아차상(#)은 점수마다 둘 중 하나만 존재할 수 있으며, 존재하지 않을 수도 있다.

​

0~10의 정수와 문자 S, D, T, *, #로 구성된 문자열이 입력될 시 총점수를 반환하는 함수를 작성하라.

​

입력 형식

점수|보너스|[옵션]으로 이루어진 문자열 3세트.

예) 1S2D*3T

점수는 0에서 10 사이의 정수이다.

보너스는 S, D, T 중 하나이다.

옵선은 *이나 # 중 하나이며, 없을 수도 있다.

​

출력 형식

3번의 기회에서 얻은 점수 합계에 해당하는 정수값을 출력한다.

예) 37

​

입출력 예제

예제

dartResult

answer

설명

1

1S2D*3T

37

11 * 2 + 22 * 2 + 33

2

1D2S#10S

9

12 + 21 * (-1) + 101

3

1D2S0T

3

12 + 21 + 03

4

1S*2T*3S

23

11 * 2 * 2 + 23 * 2 + 31

5

1D#2S*3S

5

12 * (-1) * 2 + 21 * 2 + 31

6

1T2D3D#

-4

13 + 22 + 32 * (-1)

7

1D2S3T*

59

12 + 21 * 2 + 33 * 2

해설 : http://tech.kakao.com/2017/09/27/kakao-blind-recruitment-round-1/




내 풀이 <실패>

class Solution {
    public int solution(String dartResult) {
        int answer = 0;
        String[] arr = new String[dartResult.length()];
        arr = dartResult.split("");
        
        int[] point = new int[3];
        int p = 0;
        
        for (int i=0;i<arr.length;i++){
            if(isInteger(arr[i])&&p!=3){
                if(arr[i].equals("1") && arr[i+1].equals("0")){
                    point[p] = 10;
                    p++;
                }else if(arr[i].equals("0") && arr[i-1].equals("1")){
                    continue;
                }else {
                    point[p] = Integer.parseInt(arr[i]);
                    p++;
                }
            }else if(arr[i].equals("S")||arr[i].equals("D")||arr[i].equals("T")){
                int pow = 1;
                if(arr[i].equals("D")){
                    pow = 2;
                }else if(arr[i].equals("T")){
                    pow = 3;
                }
                
                point[p-1] = (int)Math.pow(point[p-1],pow);
                
            }else if(arr[i].equals("*")){ 
                if (p==1){
                    point[0] = point[0]*2;
                }else{
                    point[p-1] = point[p-1]*2;
                    point[p-2] = point[p-2]*2;
                }
            }else if(arr[i].equals("#")){
                point[p-1] = -point[p-1];
            }else{
                continue;
            }
        }
        
        for (int i=0;i<3;i++){
            answer += point[i];
        }
        
        return answer;
    }
    
    static boolean isInteger(String s) { 
        try {
            Integer.parseInt(s);
            return true;
        } catch(NumberFormatException e) {  
            return false;
        }
    }
}

전에 풀어뒀던 풀이가 있었다. 다른사람의 풀이를 보고 푼 것! 하지만 실패한 풀이였다.

테스트케이스 총 32개 중, 5번과 8번이 실패(런타임 에러)해서 원인을 알아봤더니

질문하기에서 찾아낸 것 같다.



첫 번째 for문의 첫 if문 안에서 

i가 0이고 arr[0]의 값이 0일 경우 (첫 번째 다트 점수가 0점일 경우)

else if문에 잡히는데 arr[-1]이 존재하지 않기 때문에 런타임 오류가 발생했다. 

for (int i=0;i<arr.length;i++){
     if(isInteger(arr[i])&&p!=3){
         if(arr[i].equals("1") && arr[i+1].equals("0")){
              point[p] = 10;
              p++;
         }else if(arr[i].equals("0") && arr[i-1].equals("1")){
              continue;
         }else {
              point[p] = Integer.parseInt(arr[i]);
              p++;
         }
     ...
     
그래서 위의 이 풀이를 아래처럼 

else if문을 없애고 

if조건일 경우 i를 1증가하도록 하면 해결!!

for (int i=0;i<arr.length;i++){
     if(isInteger(arr[i])&&p!=3){
         if(arr[i].equals("1") && arr[i+1].equals("0")){
              point[p] = 10;
              p++;
              i++;
         }else {
              point[p] = Integer.parseInt(arr[i]);
              p++;
         }
     ...




다른사람풀이1

코딩테스트 연습 / 2018 KAKAO BLIND RECRUITMENT / [1차] 다트 게임 / 다른 사람의 풀이 / 김동진

class Solution {
    public int solution(String dartResult) {
        int[] score = new int[3];
        char[] c1 = new char[3];
        char[] c2 = new char[3];
        int[] round = new int[3];



        int num = -1;
        String tmp = "";
        for(int i=0;i<dartResult.length();i++) {
            if(dartResult.charAt(i)-'0'>=0 && dartResult.charAt(i)-'0'<=9) {
                if(tmp.equals("")) {
                    num++;
                }
                tmp = tmp + dartResult.charAt(i);
            }
            else if(dartResult.charAt(i)=='S' || dartResult.charAt(i)=='D' || dartResult.charAt(i)=='T'){
                c1[num] = dartResult.charAt(i);
                score[num] = Integer.parseInt(tmp);
                tmp = "";
            }
            else if(dartResult.charAt(i)=='*' || dartResult.charAt(i)=='#'){
                c2[num] = dartResult.charAt(i);
            }
        }

        for(int i=0;i<3;i++) {
            if(c1[i]=='S') {
                round[i] = score[i];
            }
            if(c1[i]=='D') {
                round[i] = score[i]*score[i];           
            }
            if(c1[i]=='T') {
                round[i] = score[i]*score[i]*score[i];
            }
            if(c2[i]=='*') {
                if(i==0) {
                    round[i] *= 2;
                }
                else {
                    round[i-1] *= 2;
                    round[i] *= 2;
                }
            }
            if(c2[i]=='#') {
                round[i] = 0 - round[i];
            }
        }

        return round[0]+round[1]+round[2];
    }
}




다른사람풀이2

코딩테스트 연습 / 2018 KAKAO BLIND RECRUITMENT / [1차] 다트 게임 / 다른 사람의 풀이 / Nick H , KangyeolLee

import java.util.*;
class Solution {
    public int solution(String dartResult) {
        Stack<Integer> stack = new Stack<>();
        int sum = 0;
        for (int i = 0; i < dartResult.length(); ++i) {
            char c = dartResult.charAt(i);
            if (Character.isDigit(c)) {
                sum = (c - '0');
                if (sum == 1 && i < dartResult.length() - 1 && dartResult.charAt(i + 1) == '0') {
                    sum = 10;
                    i++;
                }
                stack.push(sum);
            } else {
                int prev = stack.pop();
                if (c == 'D') {
                    prev *= prev;
                } else if (c == 'T') {
                    prev = prev * prev * prev;
                } else if (c == '*') {
                    if (!stack.isEmpty()) {
                        int val = stack.pop() * 2;
                        stack.push(val);
                    }
                    prev *= 2;
                } else if (c == '#') {
                    prev *= (-1);
                }
                // System.out.println(prev);
                stack.push(prev);
            }
        }
        int totalScore = 0;
        while (!stack.isEmpty()) {
            totalScore += stack.pop();
        }
        return totalScore;
    }
}


Stack 이란 제한적으로 접근할 수 있는 나열된 구조로, 후입선출(LIFO: Last In First Out)의 자료구조


참고로, 스택이 실제로 사용되는 경우를 들어보자면,

1. 운영체제(OS: Operating System) : 프로그램에서 사용되는 함수들을 스택 자료형에 저장하여 사용

2. 컴파일러(Compiler) : 수학 기호들을 기계어로 변환시 사용 (괄호 등을 매칭하는 경우)

3. 자바 가상 머신(JVM: Java Virtual Machine) : JVM 내에서 메서드가 실행, 종료될 때 스택 프레임을 이용하여 관리

가 있다고 함!



일반적으로 스택에 사용되는 필수적인 메서드를 보자면,

1. pop() : 스택의 가장 최상위(마지막)에 위치한 데이터를 추출(리턴)한 후에 스택에서 삭제

2. push(데이터) : 스택의 가장 최상위(마지막)에 데이터를 삽입

3. isEmpty() : 스택인 빈(empty) 상태인지 확인, 비어있으면 true/ 아니면 false 리턴

4. clear() : 스택에 저장된 모든 데이터를 삭제하고 스택 초기화 

5. peek() : 스택의 가장 최상위(마지막)에 위치한 데이터를 추출(리턴), pop()과는 달리 스택에서 데이터 삭제X



이 외에 이 풀이에서 쓰인 함수는

Character.isDisit(char ch / int codePoint) : 매개변수 값이 숫자인지 여부 판단. 숫자면 true / 아니면 false

이 함수와 비슷한 함수는
Character.isLetter(char ch / int codePoint) : 매개변수 값이 문자인지 여부 판단. 문자면 true / 아니면 false
