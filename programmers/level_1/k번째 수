문제 설명

배열 array의 i번째 숫자부터 j번째 숫자까지 자르고 정렬했을 때, k번째에 있는 수를 구하려 합니다.

예를 들어 array가 [1, 5, 2, 6, 3, 7, 4], i = 2, j = 5, k = 3이라면

array의 2번째부터 5번째까지 자르면 [5, 2, 6, 3]입니다.

1에서 나온 배열을 정렬하면 [2, 3, 5, 6]입니다.

2에서 나온 배열의 3번째 숫자는 5입니다.

배열 array, [i, j, k]를 원소로 가진 2차원 배열 commands가 매개변수로 주어질 때, commands의 모든 원소에 대해 앞서 설명한 연산을 적용했을 때 나온 결과를 배열에 담아 return 하도록 solution 함수를 작성해주세요.

​

제한사항

array의 길이는 1 이상 100 이하입니다.

array의 각 원소는 1 이상 100 이하입니다.

commands의 길이는 1 이상 50 이하입니다.

commands의 각 원소는 길이가 3입니다.

​

입출력 예

array

commands

return

[1, 5, 2, 6, 3, 7, 4]

[[2, 5, 3], [4, 4, 1], [1, 7, 3]]

[5, 6, 3]

입출력 예 설명

[1, 5, 2, 6, 3, 7, 4]를 2번째부터 5번째까지 자른 후 정렬합니다. [2, 3, 5, 6]의 세 번째 숫자는 5입니다.

[1, 5, 2, 6, 3, 7, 4]를 4번째부터 4번째까지 자른 후 정렬합니다. [6]의 첫 번째 숫자는 6입니다.

[1, 5, 2, 6, 3, 7, 4]를 1번째부터 7번째까지 자릅니다. [1, 2, 3, 4, 5, 6, 7]의 세 번째 숫자는 3입니다.




내 풀이

import java.util.Arrays; class Solution { public int[] solution(int[] array, int[][] commands) { int[] answer = new int[commands.length]; for (int i=0;i<commands.length;i++){ // 1. ( commands[0][1] - array[commands[0][0] + 1 ) 크기의 arr 배열 선언 및 생성 int[] arr = new int[commands[i][1]-commands[i][0]+1]; int ai = 0; ﻿// 2. array[commands[0][0]]부터 array[commands[0][1]]까지 arr 배열 초기화 for (int j=commands[i][0]-1;j<commands[i][1];j++){ arr[ai] = array[j]; ai++; } /* 3. arr 배열 정렬 및 arr배열의 commands[i][2]번째(단, 배열 인덱스는 0부터 시작하니까 여기에-1)숫자를 answer 배열에 초기화 */ Arrays.sort(arr); answer[i] = arr[commands[i][2]-1]; } return answer; } }

1. ( commands[0][1] - array[commands[0][0] + 1 ) 크기의 arr 배열 선언 및 생성

2. array[commands[0][0]]부터 array[commands[0][1]]까지 arr 배열 초기화

3. arr 배열 정렬 및 arr배열의 commands[i][2]번째(단, 배열 인덱스는 0부터 시작하니까 여기에-1)숫자를 answer 배열에 초기화

​

다른 사람 풀이1

프로그래머스 / 다른 사람의 풀이 / 기웅 , 김기준 , 최재웅 , 김윤희 , - 외 155 명

import java.util.Arrays; class Solution { public int[] solution(int[] array, int[][] commands) { int[] answer = new int[commands.length]; for(int i=0; i<commands.length; i++){ int[] temp = Arrays.copyOfRange(array, commands[i][0]-1, commands[i][1]); Arrays.sort(temp); answer[i] = temp[commands[i][2]-1]; } return answer; } }

배열을 복사하는 함수가 있었돠~~~ Arrays.copyOfRange() 를 사용한 것이 인상적이다!!

Arrays.copyOfRange(원본 배열, 복사할 시작인덱스, 복사할 끝인덱스) < 출처: https://taeil00.tistory.com/193 [EO's Blog] >

​

다른 사람 풀이2

프로그래머스 / 다른 사람의 풀이 / JandB , jisqus , 임예종 , 김태홍 , 김바다

class Solution { public int[] solution(int[] array, int[][] commands) { int n = 0; int[] ret = new int[commands.length]; while(n < commands.length){ int m = commands[n][1] - commands[n][0] + 1; if(m == 1){ ret[n] = array[commands[n++][0]-1]; continue; } int[] a = new int[m]; int j = 0; for(int i = commands[n][0]-1; i < commands[n][1]; i++) a[j++] = array[i]; sort(a, 0, m-1); ret[n] = a[commands[n++][2]-1]; } return ret; } void sort(int[] a, int left, int right){ int pl = left; int pr = right; int x = a[(pl+pr)/2]; do{ while(a[pl] < x) pl++; while(a[pr] > x) pr--; if(pl <= pr){ int temp = a[pl]; a[pl] = a[pr]; a[pr] = temp; pl++; pr--; } }while(pl <= pr); if(left < pr) sort(a, left, pr); if(right > pl) 

