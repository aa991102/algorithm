문제 설명

어떤 문장의 각 알파벳을 일정한 거리만큼 밀어서 다른 알파벳으로 바꾸는 암호화 방식을 시저 암호라고 합니다. 예를 들어 AB는 1만큼 밀면 BC가 되고, 3만큼 밀면 DE가 됩니다. z는 1만큼 밀면 a가 됩니다. 문자열 s와 거리 n을 입력받아 s를 n만큼 민 암호문을 만드는 함수, solution을 완성해 보세요.

​

제한 조건

공백은 아무리 밀어도 공백입니다.

s는 알파벳 소문자, 대문자, 공백으로만 이루어져 있습니다.

s의 길이는 8000이하입니다.

n은 1 이상, 25이하인 자연수입니다.

​

입출력 예

s

n

result

AB

1

BC

z

1

a

a B z

4

e F d





내 풀이

class Solution { public String solution(String s, int n) { String answer = ""; for(int i=0;i<s.length();i++){ if(s.charAt(i)==' '){ answer += ' '; continue; } char ch = (char)(s.charAt(i)+n); if(s.charAt(i)<='z' && ch>'z'){ ch = (char)(ch - 1 - 'z' + 'a'); }else if(s.charAt(i)<='Z' && ch>'Z'){ ch = (char)(ch - 1 - 'Z' + 'A'); } answer += ch; } return answer; } }





다른 사람 풀이1

코딩테스트 연습 / 연습문제 / 시저 암호 / 다른 사람의 풀이 / Isaac Ahn , 문하 , - , - , Sung Rak 외 31 명

class Solution { public String solution(String s, int n) { String result = ""; n = n % 26; for (int i = 0; i < s.length(); i++) { char ch = s.charAt(i); if (Character.isLowerCase(ch)) { ch = (char) ((ch - 'a' + n) % 26 + 'a'); } else if (Character.isUpperCase(ch)) { ch = (char) ((ch - 'A' + n) % 26 + 'A'); } result += ch; } return result; } }

ch = (char) ((ch - 'a' + n)%26 + 'a');
%26 이라고 계산한 부분이 인상적이다.
나는 ch = (char)(ch + n - 1 - 'z' + 'a'); 한 부분을 위와 같이 처리!
​
예를들어, 받은 문자열: "z", 거리: 2 의 경우
'z' - 'a' + 2 = 122 - 97 + 2 = 25 + 2 = 27
27%26 = 1
'a' + 1 = 97 + 1 = 98 = 'b'

​

​

다른사람풀이2

코딩테스트 연습 / 연습문제 / 시저 암호 / 다른 사람의 풀이 / 덱스또

class Caesar { public String caesar(String s, int _n) { return s.chars().map(c -> { int n = _n % 26; if (c >= 'a' && c <= 'z') { return 'a' + (c - 'a' + n) % 26; } else if (c >= 'A' && c <= 'Z') { return 'A' + (c - 'A' + n) % 26; } else { return c; } }).mapToObj(c -> String.valueOf((char)c)) .reduce((a, b) -> a + b).orElse(""); } public static void main(String[] args) { Caesar c = new Caesar(); System.out.println("s는 'a B z', n은 4인 경우: " + c.caesar("a B z", 4)); } }

음 이분은 람다식을 이용하셨는데.... 여기 사용된 함수들을 알아보자면

​

​

s.chars().map(~~~).mapToObj(~~~).reduce(~~~).orElse();

① chars()
CharSequence 인터페이스로부터 파생한 String 클래스의 메소드로, 
IntStream을 반환한다고 한다. (즉, 숫자로 반환)

② map()
스트림 내 요소들을 하나씩 특정 값으로 변환. 
값을 변환하기 위한 람다를 인자로 받는다.
​
③ mapToObj()
숫자가 아닌 문자로 출력해주려면
Stream API의 mapToObj()를 이용해서 
IntStream 내의 Element들을 변형해 주어야 한다.

④ reduce()
Stream의 데이터를 변환하지 않고, 더하거나 빼는 등의 연산을 수행하여 하나의 값으로 만든다.

⑤ orElse()
이 전 과정에서 얻은 Optional이 비어있을 경우, 디폴트로 사용할 값을 세팅해준다.

* Optional : 존재할 수도 있지만 안 할 수도 있는 객체(null이 될 수도 있는 객체)를 감싸고 있는 일종의 래퍼 클래스
원소가 없거나 최대 하나 밖에 없는 Collection이나 Stream으로 생각해도 된다네요...

