문제 설명

실패율

슈퍼 게임 개발자 오렐리는 큰 고민에 빠졌다. 그녀가 만든 프랜즈 오천성이 대성공을 거뒀지만, 요즘 신규 사용자의 수가 급감한 것이다. 원인은 신규 사용자와 기존 사용자 사이에 스테이지 차이가 너무 큰 것이 문제였다.

​

이 문제를 어떻게 할까 고민 한 그녀는 동적으로 게임 시간을 늘려서 난이도를 조절하기로 했다. 역시 슈퍼 개발자라 대부분의 로직은 쉽게 구현했지만, 실패율을 구하는 부분에서 위기에 빠지고 말았다. 오렐리를 위해 실패율을 구하는 코드를 완성하라.

​

실패율은 다음과 같이 정의한다.

- 스테이지에 도달했으나 아직 클리어하지 못한 플레이어의 수 / 스테이지에 도달한 플레이어 수

​

전체 스테이지의 개수 N, 게임을 이용하는 사용자가 현재 멈춰있는 스테이지의 번호가 담긴 배열 stages가 매개변수로 주어질 때, 실패율이 높은 스테이지부터 내림차순으로 스테이지의 번호가 담겨있는 배열을 return 하도록 solution 함수를 완성하라.

​

제한사항

- 스테이지의 개수 N은 1 이상 500 이하의 자연수이다.

- stages의 길이는 1 이상 200,000 이하이다.

- stages에는 1 이상 N + 1 이하의 자연수가 담겨있다.

- 각 자연수는 사용자가 현재 도전 중인 스테이지의 번호를 나타낸다.

- 단, N + 1 은 마지막 스테이지(N 번째 스테이지) 까지 클리어 한 사용자를 나타낸다.

- 만약 실패율이 같은 스테이지가 있다면 작은 번호의 스테이지가 먼저 오도록 하면 된다.

- 스테이지에 도달한 유저가 없는 경우 해당 스테이지의 실패율은 0 으로 정의한다.

​

입출력 예

N

stages

result

5

[2, 1, 2, 6, 2, 4, 3, 3]

[3,4,2,1,5]

4

[4,4,4,4,4]

[4,1,2,3]

입출력 예 설명

​

입출력 예 #1

1번 스테이지에는 총 8명의 사용자가 도전했으며, 이 중 1명의 사용자가 아직 클리어하지 못했다. 따라서 1번 스테이지의 실패율은 다음과 같다.

- 1 번 스테이지 실패율 : 1/8

​

2번 스테이지에는 총 7명의 사용자가 도전했으며, 이 중 3명의 사용자가 아직 클리어하지 못했다. 따라서 2번 스테이지의 실패율은 다음과 같다.

- 2 번 스테이지 실패율 : 3/7

​

마찬가지로 나머지 스테이지의 실패율은 다음과 같다.

- 3 번 스테이지 실패율 : 2/4

- 4번 스테이지 실패율 : 1/2

- 5번 스테이지 실패율 : 0/1

​

각 스테이지의 번호를 실패율의 내림차순으로 정렬하면 다음과 같다.

[3,4,2,1,5]

​

입출력 예 #2

모든 사용자가 마지막 스테이지에 있으므로 4번 스테이지의 실패율은 1이며 나머지 스테이지의 실패율은 0이다.

[4,1,2,3]





내 풀이

class Solution { public int[] solution(int N, int[] stages) { int[] answer = new int[N]; //HashMap<Integer,Double> st = new HashMap<Integer,Double>(); double[][] st = new double[N][2]; double[][] stSort = new double[N][2]; // [0][0] = 3 미도달 // [0][1] = 7 도달 // {{3,7},{,},{,}} // 스테이지 도달/미도달 카운트 for(int i=0; i<stages.length; i++){ if(stages[i]<=N){ // stages[i]==N+1 인 경우 미도달 표현 X // steges[i]는 미도달 st[stages[i]-1][0]++; } // stages[i] 미만은 도달 for(int j=0; j<stages[i]-1; j++){ st[j][1]++; } } // 실패율 계산 {{0, 1/8}, {1, 3/7}, {2, 2/4}, ...} for(int i=0; i<st.length; i++){ st[i][1] = st[i][0] / (st[i][0] + st[i][1]); stSort[i][1] = st[i][1]; st[i][0] = i+1; } // 실패율 내림차순 for(int i=0; i<stSort.length-1; i++){ for(int j=i+1; j<stSort.length; j++){ if(stSort[i][1] < stSort[j][1]){ double temp = stSort[i][1]; stSort[i][1] = stSort[j][1]; stSort[j][1] = temp; } } } //실패율 내림차순된 숫자랑 비교 for(int i=0; i<st.length; i++){ for(int j=0; j<stSort.length; j++){ if(st[i][1]==stSort[j][1] && stSort[j][0]==0){ stSort[j][0] = st[i][0]; break; } } } // 만약 N이 5인데 stages배열 안에 3까지 밖에 없는 경우, 4랑 5가 안들어가져있음.. for(int i=0; i<N; i++){ if(stSort[i][0]==0){ stSort[i][0] = i+1; } } for(int i=0;i<st.length;i++){ answer[i] = (int)stSort[i][0]; } return answer; } }

와... 진짜 이런걸 기록해야지....^^
다신 이렇게 풀지 말자고 다짐하는 의미로.....하하하핫 

각 실행시간 0.02 ~ 118.13ms




다른사람풀이1

코딩테스트 연습 / 2019 KAKAO BLIND RECRUITMENT / 실패율 / 다른 사람의 풀이 / -

class Solution { public int[] solution(int N, int[] stages) { int[] answer = new int[N]; float[] result = new float[N]; for(int i = 0 ; i < N; i++) { float unclear = 0; float clear = 0; for(int stage : stages) { if(stage == i+1) { unclear++; clear++; } else if(stage > i+1) { clear++; } } if(clear != 0) result[i] = unclear/clear; else result[i] = 0; } for(float res : result) { System.out.println(res); } for(int i = 0; i < N ; i++) { float maxValue = result[0]; int maxIndex = 0; for(int j = 0; j < N; j++) { if(maxValue < result[j]) { maxIndex = j; maxValue = result[j]; } } result[maxIndex] = -1; answer[i] = maxIndex + 1; } return answer; } }

내 풀이를 수정한다면 이 풀이처럼 될 것 같다.

1. 내가 마지막에 
// 만약 N이 5인데 stages배열 안에 3까지 밖에 없는 경우, 4랑 5가 안들어가져있음.. 
하면서 따로 for문 돌린 것을 이건 실패율 계산할 때 같이 해결

2. 정렬할 때 자꾸 제대로 되지 않고 뒤섞여서 엄청 고민했었는데, 이게 그걸 완벽히 해결해줬다!
이중for문으로 돌릴때 가장 실패율이 큰 것의 인덱스를 바로 answer에 넣고, 값을 -1로 만들어 내부 for문에서 잡히지 않게 만들었다.

​

​
다른사람풀이2

코딩테스트 연습 / 2019 KAKAO BLIND RECRUITMENT / 실패율 / 다른 사람의 풀이 / 허현

import java.util.ArrayList; import java.util.Collections; import java.util.List; class Solution { public int[] solution(int N, int[] lastStages) { int nPlayers = lastStages.length; int[] nStagePlayers = new int[N + 2]; for (int stage : lastStages) { nStagePlayers[stage] += 1; } int remainingPlayers = nPlayers; List<Stage> stages = new ArrayList<>(); for (int id = 1 ; id <= N; id++) { double failure = (double) nStagePlayers[id] / remainingPlayers; remainingPlayers -= nStagePlayers[id]; Stage s = new Stage(id, failure); stages.add(s); } Collections.sort(stages, Collections.reverseOrder()); int[] answer = new int[N]; for (int i = 0; i < N; i++) { answer[i] = stages.get(i).id; } return answer; } class Stage implements Comparable<Stage> { public int id; public double failure; public Stage(int id_, double failure_) { id = id_; failure = failure_; } @Override public int compareTo(Stage o) { if (failure < o.failure ) { return -1; } if (failure > o.failure ) { return 1; } return 0; } } }




다른사람풀이3

코딩테스트 연습 / 2019 KAKAO BLIND RECRUITMENT / 실패율 / 다른 사람의 풀이 / - , -

import java.util.*; class Solution { public int[] solution(int N, int[] stages) { Map<Integer,Integer> map = new HashMap<>(); Map<Integer,Double> ans = new HashMap<>(); for (int stage : stages) { int count = map.containsKey(stage) ? map.get(stage) + 1 : 1; map.put(stage,count); } int total = stages.length; for (int i = 1; i <= N; i++) { if (map.containsKey(i)) { int cnt = map.get(i); ans.put(i, (double) cnt / total); total -= cnt; } else { ans.put(i, 0.0); } } List<Integer> list = sortByValue(ans); int[] answer = new int[list.size()]; for (int i = 0; i < list.size(); i++) { answer[i] = list.get(i); } return answer; } public static List<Integer> sortByValue(final Map<Integer,Double> map) { List<Integer> list = new ArrayList(); list.addAll(map.keySet()); Collections.sort(list, (Comparator) (o1, o2) -> { Object v1 = map.get(o1); Object v2 = map.get(o2); return ((Comparable) v2).compareTo(v1); }); return list; } }

