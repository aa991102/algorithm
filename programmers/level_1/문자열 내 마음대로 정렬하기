문자열로 구성된 리스트 strings와, 정수 n이 주어졌을 때, 각 문자열의 인덱스 n번째 글자를 기준으로 오름차순 정렬하려 합니다. 예를 들어 strings가 [sun, bed, car]이고 n이 1이면 각 단어의 인덱스 1의 문자 u, e, a로 strings를 정렬합니다.

​

제한 조건

strings는 길이 1 이상, 50이하인 배열입니다.

strings의 원소는 소문자 알파벳으로 이루어져 있습니다.

strings의 원소는 길이 1 이상, 100이하인 문자열입니다.

모든 strings의 원소의 길이는 n보다 큽니다.

인덱스 1의 문자가 같은 문자열이 여럿 일 경우, 사전순으로 앞선 문자열이 앞쪽에 위치합니다.

​

입출력 예

strings

n

return

[sun, bed, car]

1

[car, bed, sun]

[abce, abcd, cdx]

2

[abcd, abce, cdx]

입출력 예 설명

입출력 예 1

sun, bed, car의 1번째 인덱스 값은 각각 u, e, a 입니다. 이를 기준으로 strings를 정렬하면 [car, bed, sun] 입니다.

입출력 예 2

abce와 abcd, cdx의 2번째 인덱스 값은 c, c, x입니다. 따라서 정렬 후에는 cdx가 가장 뒤에 위치합니다. abce와 abcd는 사전순으로 정렬하면 abcd가 우선하므로, 답은 [abcd, abce, cdx] 입니다.

​


다른 사람 풀이1

코딩테스트 연습 / 연습문제 / 문자열 내 마음대로 정렬하기 / 다른 사람의 풀이 / - , Byoung Hee Kwon

class Solution { public String[] solution(String[] strings, int n) { String[] answer = strings; for(int i = 0;i<answer.length-1;i++){ String temp = ""; for(int k= i+1;k<answer.length;k++){ if(answer[i].charAt(n) > answer[k].charAt(n)){ temp = answer[i]; answer[i] = answer[k]; answer[k] = temp; } } } for(int i = 0;i<answer.length-1;i++){ String temp = ""; for(int k= i+1;k<answer.length;k++){ if(answer[i].charAt(n) == answer[k].charAt(n)){ if(answer[i].compareTo(answer[k])>0){ // A>B인 경우(A가 B보다 사전순으로 뒤에 위치한 경우) temp = answer[i]; answer[i] = answer[k]; answer[k] = temp; } } } } return answer; } }

compareTo() : 2개의 값을 사전적으로(lexicographically) 비교하고 int형 값을 반환

- "숫자 비교"와 "문자열 비교"

- 맨 첫자리부터 차례대로 비교

- 문자열 비교에서 A가 B보다 크다는 의미는 "A가 B보다 사전순으로 뒤에!! 위치한다"는 의미




다른 사람 풀이2

코딩테스트 연습 / 연습문제 / 문자열 내 마음대로 정렬하기 / 다른 사람의 풀이 / - , - , - , 박재오 , - 외 22 명

import java.util.*; class Solution { public String[] solution(String[] strings, int n) { String[] answer = {}; ArrayList<String> arr = new ArrayList<>(); for (int i = 0; i < strings.length; i++) { arr.add("" + strings[i].charAt(n) + strings[i]); } Collections.sort(arr); answer = new String[arr.size()]; for (int i = 0; i < arr.size(); i++) { answer[i] = arr.get(i).substring(1, arr.get(i).length()); } return answer; } }

1. 맨 앞에 n번째 문자를 붙여서 정렬

2. substring()으로 붙인 문자 없앤 후 리턴


