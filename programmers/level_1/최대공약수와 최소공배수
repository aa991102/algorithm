문제 설명

두 수를 입력받아 두 수의 최대공약수와 최소공배수를 반환하는 함수, solution을 완성해 보세요. 배열의 맨 앞에 최대공약수, 그다음 최소공배수를 넣어 반환하면 됩니다. 예를 들어 두 수 3, 12의 최대공약수는 3, 최소공배수는 12이므로 solution(3, 12)는 [3, 12]를 반환해야 합니다.

​

제한 사항

두 수는 1이상 1000000이하의 자연수입니다.

​

입출력 예

n

m

return

3

12

[3, 12]

2

5

[1, 10]

입출력 예 설명

입출력 예 #1

위의 설명과 같습니다.

입출력 예 #2

자연수 2와 5의 최대공약수는 1, 최소공배수는 10이므로 [1, 10]을 리턴해야 합니다.
​

​

다른사람풀이1

코딩테스트 연습 / 연습문제 / 최대공약수와 최소공배수 / 다른 사람의 풀이 / - , 김민식 , - , - , - 외 8 명

class Solution {
    public int[] solution(int a, int b) {
        int[] answer = new int[2];
        int temp=1;
        int gcd=a*b;
        
        while(temp!=0){
            temp=b%a;
            b=a;
            a=temp;
        }
        
        answer[0]=b;
        answer[1]=gcd/b;
        
        return answer;
    }
}
혹쉬.... 저만 몰랐나요 유클리드 호제법...?

유클리드 호제법(유클리드 알고리즘)은 2개의 자연수의 최대공약수를 구하는 알고리즘의 하나로,
두 수가 서로 상대방 수를 나누어 결국 원하는 수를 얻는 알고리즘을 나타낸다고 합니다.

2개의 자연수(또는 정식) a, b에 대해서 a를 b로 나눈 나머지를 r이라 하면(단, a>b), 
a와 b의 최대공약수는 b와 r의 최대공약수와 같다. 

이 성질에 따라, b를 r로 나눈 나머지 r'를 구하고, 다시 r을 r'로 나눈 나머지를 구하는 과정을 반복하여 
나머지가 0이 되었을 때 나누는 수가 a와 b의 최대공약수이다.



​

다른사람풀이2

코딩테스트 연습 / 연습문제 / 최대공약수와 최소공배수 / 다른 사람의 풀이 / 이홍원 , - , 최영록 , - , - 외 30 명

import java.util.Arrays;

class TryHelloWorld {
    public int[] gcdlcm(int a, int b) {
        int[] answer = new int[2];

          answer[0] = gcd(a,b);
        answer[1] = (a*b)/answer[0];
        return answer;
    }

   public static int gcd(int p, int q)
   {
    if (q == 0) return p;
    return gcd(q, p%q);
   }

    // 아래는 테스트로 출력해 보기 위한 코드입니다.
    public static void main(String[] args) {
        TryHelloWorld c = new TryHelloWorld();
        System.out.println(Arrays.toString(c.gcdlcm(3, 12)));
    }
}
이거는 재귀함수를 이용했다!!

해당 풀이 댓글에 있던 내용도 참고가 될 것 같아서 가져왔습니다.

" answer[1] = (a*b) / answer[0] 부분에서 overflow를 피하려면 ​a / answer[0] * b 로 바꾸어 주는 것도 좋을 것 같아요~ "
-―2017.10.18 14:19
