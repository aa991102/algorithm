문제 설명

[본 문제는 정확성과 효율성 테스트 각각 점수가 있는 문제입니다.]

​

"스노우타운"에서 호텔을 운영하고 있는 "스카피"는 호텔에 투숙하려는 고객들에게 방을 배정하려 합니다. 

호텔에는 방이 총 k개 있으며, 각각의 방은 1번부터 k번까지 번호로 구분하고 있습니다. 

​

처음에는 모든 방이 비어 있으며 "스카피"는 다음과 같은 규칙에 따라 고객에게 방을 배정하려고 합니다.

 1. 한 번에 한 명씩 신청한 순서대로 방을 배정합니다.

 2. 고객은 투숙하기 원하는 방 번호를 제출합니다.

 3. 고객이 원하는 방이 비어 있다면 즉시 배정합니다.

 4. 고객이 원하는 방이 이미 배정되어 있으면 원하는 방보다 번호가 크면서 비어있는 방 중 가장 번호가 작은 방을 배정합니다.

​

예를 들어, 방이 총 10개이고, 고객들이 원하는 방 번호가 순서대로 [1, 3, 4, 1, 3, 1] 일 경우 다음과 같이 방을 배정받게 됩니다.

원하는 방 번호

배정된 방 번호

1

1

3

3

4

4

1

2

3

5

1

6

​

전체 방 개수 k와 고객들이 원하는 방 번호가 순서대로 들어있는 배열 room_number가 매개변수로 주어질 때, 

각 고객에게 배정되는 방 번호를 순서대로 배열에 담아 return 하도록 solution 함수를 완성해주세요.

​

[제한사항]

 - k는 1 이상 1012 이하인 자연수입니다.

 - room_number 배열의 크기는 1 이상 200,000 이하입니다.

 - room_number 배열 각 원소들의 값은 1 이상 k 이하인 자연수입니다.

 - room_number 배열은 모든 고객이 방을 배정받을 수 있는 경우만 입력으로 주어집니다.

    - 예를 들어, k = 5, room_number = [5, 5] 와 같은 경우는 방을 배정받지 못하는 고객이 발생하므로

      이런 경우는 입력으로 주어지지 않습니다.

​

[입출력 예]

k

room_number

result

10

[1,3,4,1,3,1]

[1,3,4,2,5,6]

입출력 예에 대한 설명

입출력 예 1

문제의 예시와 같습니다.

첫 번째 ~ 세 번째 고객까지는 원하는 방이 비어 있으므로 즉시 배정받을 수 있습니다. 

네 번째 고객의 경우 1번 방을 배정받기를 원했는데, 1번 방은 빈 방이 아니므로, 1번 보다 번호가 크고 비어 있는 방 중에서 가장 번호가 작은 방을 배정해야 합니다. 1번 보다 번호가 크면서 비어있는 방은 [2번, 5번, 6번...] 방이며, 이중 가장 번호가 작은 방은 2번 방입니다. 따라서 네 번째 고객은 2번 방을 배정받습니다. 

마찬가지로 5, 6번째 고객은 각각 5번, 6번 방을 배정받게 됩니다.






내 풀이 < 효율성 테스트 실패 >

import java.util.TreeSet;

class Solution {
    public long[] solution(long k, long[] room_number) {
        long[] answer = new long[room_number.length];
        TreeSet<Long> room_set = new TreeSet<>();
        
        for(int i=0; i<room_number.length; i++){
            long number = room_number[i];
            
            if(room_set.contains(number)){
                number++;
                while(room_set.contains(number)){
                    number++;
                }
            }
            
            room_set.add(number);
            answer[i] = number;
        }
        
        return answer;
    }
}
​

​

​

다른사람풀이1 < Map 사용 >

https://bcp0109.tistory.com/188

정확성 뿐만 아니라 효율성까지 고려해야 하는 문제입니다.

단순하게 풀이한다면 Set 자료구조에 선택된 방들을 담아두고 중복된 방을 선택한 경우 +1 하며 전체 스캔하는 것으로 정확성은 통과할 수 있다.

하지만 k 가 최대 10^12 이기 때문에 O(n)으로 매번 검색을 해버리면 효율성을 하나도 통과할 수 없습니다.

​

다음 방을 선택하는 과정에서 O(n) 으로 스캔하는 건 어쩔수가 없습니다.

그렇다면 한번 선택한 방은 다음번에 선택할 때 스캔을 최소 로 한다면 정확성을 통과할 수 있습니다.

접근법은 우선 HashMap 을 선언하여 <방 번호 : 다음 방 번호> 이렇게 저장해두는 겁니다.

고객이 방을 선택했을 때 map.containsKey() 로 다음 방을 바로 찾을 수가 있죠.

다음으로 할 일은 다음 방을 갱신해주는 겁니다.

예를 들어 방이 6 번까지 있고 [1, 2, 3, 4] 는 이미 선택되었다고 가정합니다.

다음 고객이 1 을 선택하였을 때 5 번 방이 비어있는 걸 알기 위해 1 -> 2 -> 3 -> 4 -> 5 순서대로 가야 하지만

다음 방을 미리 저장해둔다면 1 -> 5 로 바로 스캔할 수 있습니다.

그리고 1 번을 갱신하는 김에 2, 3, 4 방도 똑같이 다음 방이 5 니까 갱신해줍니다.

이것을 재귀로 구현한 게 long findEmptyRoom(long room) 함수입니다.

import java.util.*;

class Solution {
    Map<Long, Long> map = new HashMap<>();

    public long[] solution(long k, long[] room_number) {
        int n = room_number.length;
        long[] answer = new long[n];

        for (int i = 0; i < n; i++) {
            answer[i] = findEmptyRoom(room_number[i]);
        }

        return answer;
    }
    
    private long findEmptyRoom(long room) {
        if (!map.containsKey(room)) {
            map.put(room, room + 1);
            return room;
        }
        
        long nextRoom = map.get(room);
        long emptyRoom = findEmptyRoom(nextRoom);
        map.put(room, emptyRoom);
        return emptyRoom;
    }
}
 
[프로그래머스] 2019 카카오 겨울인턴. 호텔 방 배정 (Java)
bcp0109.tistory.com

​

다른사람풀이2 < Set 사용 >

import java.util.HashSet;
import java.util.TreeSet;
class Solution {
    static HashSet<Long> room = new HashSet<>();
    static TreeSet<Long> empty_room = new TreeSet<>();
    public long[] solution(long k, long[] room_number) {
        long[] answer = new long[room_number.length];
        int idx = 0;
        for(long i : room_number) {
            answer[idx++] = findRoom(i);
        }
        return answer;
    }
    static long findRoom(long num) {
        // 이미 해당 방이 배정되어 있는 경우
        if(room.contains(num)) return findRoom(empty_room.higher(num));

        room.add(num);
        empty_room.remove(num);
        // 배정된 방 보다 +1 한 방이 배정되지 않았다면 빈방으로 지정
        if(!room.contains(num+1)) empty_room.add(num+1);
        return num;
    }
}
똑같은 클래스를 사용하더라도 생각하는 거에 따라 결과가 천지차이로 다르다는 것을 여실히 느낄 수 있는 문제였다
