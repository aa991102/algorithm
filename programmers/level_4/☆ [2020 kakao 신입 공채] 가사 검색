친구들로부터 천재 프로그래머로 불리는 "프로도"는 음악을 하는 친구로부터 자신이 좋아하는 노래 가사에 사용된 단어들 중에 특정 키워드가 몇 개 포함되어 있는지 궁금하니 프로그램으로 개발해 달라는 제안을 받았습니다.

그 제안 사항 중, 키워드는 와일드카드 문자중 하나인 '?'가 포함된 패턴 형태의 문자열을 뜻합니다. 

와일드카드 문자인 '?'는 글자 하나를 의미하며, 어떤 문자에도 매치된다고 가정합니다. 

예를 들어 "fro??"는 "frodo", "front", "frost" 등에 매치되지만 "frame", "frozen"에는 매치되지 않습니다.

​

가사에 사용된 모든 단어들이 담긴 배열 words와 찾고자 하는 키워드가 담긴 배열 queries가 주어질 때, 

각 키워드 별로 매치된 단어가 몇 개인지 순서대로 배열에 담아 반환하도록 solution 함수를 완성해 주세요.​

​

가사 단어 제한사항

 - words의 길이(가사 단어의 개수)는 2 이상 100,000 이하입니다.

 - 각 가사 단어의 길이는 1 이상 10,000 이하로 빈 문자열인 경우는 없습니다.

 - 전체 가사 단어 길이의 합은 2 이상 1,000,000 이하입니다.

 - 가사에 동일 단어가 여러 번 나올 경우 중복을 제거하고 words에는 하나로만 제공됩니다.

 - 각 가사 단어는 오직 알파벳 소문자로만 구성되어 있으며, 특수문자나 숫자는 포함하지 않는 것으로 가정합니다.

​

검색 키워드 제한사항

 - queries의 길이(검색 키워드 개수)는 2 이상 100,000 이하입니다.

 - 각 검색 키워드의 길이는 1 이상 10,000 이하로 빈 문자열인 경우는 없습니다.

 - 전체 검색 키워드 길이의 합은 2 이상 1,000,000 이하입니다.

 - 검색 키워드는 중복될 수도 있습니다.

 - 각 검색 키워드는 오직 알파벳 소문자와 와일드카드 문자인 '?' 로만 구성되어 있으며, 

   특수문자나 숫자는 포함하지 않는 것으로 가정합니다.

 - 검색 키워드는 와일드카드 문자인 '?'가 하나 이상 포함돼 있으며,

   '?'는 각 검색 키워드의 접두사 아니면 접미사 중 하나로만 주어집니다.

    - 예를 들어 "??odo", "fro??", "?????"는 가능한 키워드입니다.

    - 반면에 "frodo"('?'가 없음), "fr?do"('?'가 중간에 있음), "?ro??"('?'가 양쪽에 있음)는 불가능한 키워드입니다.

입출력 예

words

queries

result

["frodo", "front", "frost", "frozen", "frame", "kakao"]

["fro??", "????o", "fr???", "fro???", "pro?"]

[3, 2, 4, 1, 0]

입출력 예에 대한 설명

 - "fro??"는 "frodo", "front", "frost"에 매치되므로 3입니다.

 - "????o"는 "frodo", "kakao"에 매치되므로 2입니다.

 - "fr???"는 "frodo", "front", "frost", "frame"에 매치되므로 4입니다.

 - "fro???"는 "frozen"에 매치되므로 1입니다.

 - "pro?"는 매치되는 가사 단어가 없으므로 0 입니다.







카카오 문제 풀이   2020 신입 개발자 블라인드 채용 1차 코딩 테스트 문제 해설

​

정확성 풀이 

queries에 담긴 문자열을 words에 담긴 문자열과 하나하나 비교하면서 개수를 세면 됩니다. 

​

효율성 풀이 

queries에 담긴 문자열을 words에 담긴 문자열과 하나하나 비교하는 방법으로는 효율성 풀이를 통과할 수 없습니다. 

queries에 담긴 문자열이 words에 있는지 탐색하는 효율적인 방법으로 트라이(Trie) 자료구조를 사용할 수 있습니다.

이때, 원래 문자열을 이용해 만든 트라이와, 문자열을 뒤집어서 만든 트라이 두 개를 이용해야 합니다. 

???가 접두사인 경우는, 문자열을 뒤집어서 ???가 접미사로 나온다고 생각할 수 있기 때문입니다. 

예를 들어, “??ost”의 경우 “tso??”로 생각할 수 있습니다.

단어를 트라이에 넣을 때는 길이에 따라 서로 다른 트라이에 넣어줘야 합니다. 

같은 접두사를 가지더라도 길이에 따라 개수가 달라질 수 있기 때문입니다. 

단어 하나의 길이가 최대 1만이기 때문에 길이가 1인 문자열을 넣을 트라이부터 길이가 1만인 문자열을 넣을 트라이까지 생성합니다. 

이제 각 단어별로 길이에 맞는 트라이에 넣어줍니다.

단어를 넣을 때는 각 문자별로 해당 노드의 count를 1씩 증가시켜 줍니다. 

이후에 단어를 검색할 때는 접두사에 해당하는 노드까지 이동한 후 해당 노드의 count를 return 하면 됩니다.

이 외에도 문자열을 정렬한 다음 이분탐색하는 방법 등을 사용할 수 있습니다.

​

정확성: 34.4% 

효율성: 0.8%







내 풀이 < 효율성 실패 >

class Solution {
    public int[] solution(String[] words, String[] queries) {
        int[] answer = new int[queries.length];
        int i = 0;
        for(String query : queries){
            char head = query.charAt(0);
            char foot = query.charAt(query.length()-1);
            String pattern = query.replace("?", "");
            int cnt = query.length() - pattern.length();
            int result = 0;
            
            if(head == '?'){
                pattern = "[a-z]{"+cnt+","+cnt+"}"+pattern;
            }else{
                pattern = pattern+"[a-z]{"+cnt+","+cnt+"}";
            }
            
            for(String word : words){
                if(word.matches(pattern)) {
                    result++;
                }
            }
            
            answer[i++] = result;
        }
        return answer;
    }
}
효율성 1, 2, 3번 시간초과 실패

​

​

​

다른사람풀이1 < Trie 자료구조 - 배열로 구현 >

https://mishuni.tistory.com/46

import java.util.Arrays;

class Solution {
    public int[] solution(String[] words, String[] queries) {
        int[] answer = new int[queries.length];
        
        // 접미사(subffix)용 트라이 구조
        Trie[] tries = new Trie[10001]; // 단어 길이로 index를 삼는데, 단어 길이가 최대 10000이므로
        // 접두사(prefix)용 트라이 구조
        Trie[] rtries = new Trie[10001];
        
        // words 길이 별 분류
        for(String word : words){
            int size = word.length();
            // 길이에 해당하는 트라이 만들기
            try {
                tries[size].insert(word.toCharArray());
            }catch(Exception e) {
                tries[size] = new Trie();
                tries[size].insert(word.toCharArray());
            }
            
            // 반대 문자도 트라이 생성
            word = (new StringBuffer(word)).reverse().toString();
            try {
                rtries[size].insert(word.toCharArray());
            }catch(Exception e) {
                rtries[size] = new Trie();
                rtries[size].insert(word.toCharArray());
            }
        }
        
        // trie 이용하여 해당 쿼리에 맞는 갯수를 찾기
        for(int i=0; i<queries.length; i++){
            String query = queries[i];
            
            if(query.indexOf('?') == 0){
                // prefix
                try {
                    query = (new StringBuffer(query)).reverse().toString();
                    answer[i] = rtries[query.length()].search(query.toCharArray());
                }catch(Exception e) {
                    continue;
                }
            }else {
                // suffix
                try {
                    answer[i] = tries[query.length()].search(query.toCharArray());
                }catch(Exception e) {
                    continue;
                }
            }
        }
        
        return answer;
    }
    
    // Trie Node
    class Trie {
        int count;
        Trie[] childList;
        
        Trie(){
            childList = new Trie[26]; // 영어 a~z까지의 개수
            count = 0;
        }
        
        void insert(char[] word){
            Trie current = this;
            
            for(char no : word){
                ++ current.count;
                
                if(current.childList[no-'a'] != null){
                    current = current.childList[no-'a'];
                }else {
                    current.childList[no-'a'] = new Trie();
                    current = current.childList[no-'a'];
                }
            }
        }
        
        int search(char[] query){
            Trie current = this;
            
            for(char no : query) {
                if(no == '?'){
                    return current.count;
                }
                
                if(current.childList[no-'a'] != null){
                    current = current.childList[no-'a'];
                }else{
                    return 0;
                }
            }
            
            return current.count;
        }
    }
}
<< 위 코드 작성자 분의 말씀 >> 

어떤 방법이 좋을까 생각하다가, 카카오 페이지에 올라와있는 해설을 보게되었습니다.

Trie(트라이) 라는 자료구조를 사용하면 풀 수 있다는 말이었습니다!

여기서 Trie 구조란 ? 문자열에 특화된 트리 구조로, 문자 하나씩 깊이가 추가되는 구조인데 그림으로 보면 아래와 같습니다.

 


Trie 구조 예시

위와 같이, 한글자씩 트리를 추가해가는 구조입니다. 

같은 구간에 중복되는 문자가 있으면 그 문자에 같이 포함을 시켜 count를 추가해가는 구조로 이 문제를 풀면 됩니다.

 
[Java] 2020 카카오 공채 코딩테스트 문제 : 가사 검색(자료구조/ Trie 자료구조)
mishuni.tistory.com

​

​

다른사람풀이2 < Trie 자료구조 - Map으로 구현 >

코딩테스트 연습 / 2020 KAKAO BLIND RECRUITMENT / 가사 검색 / 다른 사람의 풀이 / Yongmaroo Kim

class Solution {
    public int[] solution(String[] words, String[] queries) {
        int N = queries.length;
        int[] answer = new int[N];

        Trie right = new Trie('R', false);
        Trie reverse = new Trie('R', false);

        for (String word : words) {
            build(right, word);
            build(reverse, new StringBuilder(word).reverse().toString());
        }

        for (int i = 0; i < N; i++) {
            String query = queries[i];
            boolean prefix = query.charAt(0) == '?';
            boolean postfix = query.charAt(query.length() - 1) == '?';
            if (prefix && postfix) {
                answer[i] = right.cnt.getOrDefault(query.length(), 0);
            } else if (prefix) {
                answer[i] = search(reverse, new StringBuilder(query).reverse().toString(), 0);
            } else {
                answer[i] = search(right, query, 0);
            }

        }

        return answer;
    }

    private int search(Trie node, String query, int i) {
        int N = query.length();
        if (N == i) {
            return node.w ? 1 : 0;
        }
        if (!node.cnt.containsKey(N-i)) {
            return 0;
        }
        char c = query.charAt(i);
        if (c == '?') {
            return node.cnt.getOrDefault(N - i, 0);
        }
        if (!node.next.containsKey(c)) {
            return 0;
        }

        return search(node.next.get(c), query, i + 1);
    }

    private Trie build(Trie root, String word) {
        int M = word.length();
        Trie cur = root;
        for (int i = 0; i < M; i++) {
            char c = word.charAt(i);
            Trie next = cur.next.getOrDefault(c, new Trie(c, i == M - 1));
            if (i == M - 1) {
                next.w = true;
            }
            int cnt = cur.cnt.getOrDefault(M - i, 0);
            cur.cnt.put(M - i, cnt + 1);

            if (!cur.next.containsKey(c)) {
                cur.next.put(c, next);
            }
            cur = next;
        }

        return root;
    }

    class Trie {
        char c;
        boolean w;
        java.util.Map<Character, Trie> next;
        java.util.Map<Integer, Integer> cnt;

        public Trie(char c, boolean w) {
            this.c = c;
            this.w = w;
            next = new java.util.HashMap<>();
            cnt = new java.util.HashMap<>();
        }
    }
}
​
